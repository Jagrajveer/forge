// Project Bundle
// Root: C:\Users\jagra\Programming\savant_ai\projects\forge
// NOTE: Each section below is labeled with its file path.

// ── FILE: .forge\config.json
{
  "provider": "xai",
  "baseUrl": "https://api.x.ai/v1",
  "model": "grok-code-fast-1"
}

// ── FILE: CHANGELOG.md
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [Unreleased]

### Added
- Comprehensive input validation system
- Structured logging with Pino
- Session persistence and history tracking
- Comprehensive test suite with Vitest
- Security improvements for git operations
- Error handling and recovery system
- Documentation and contributing guidelines

### Changed
- Agent execution is now enabled by default
- Improved error messages and user feedback
- Enhanced security for file operations
- Better validation for all user inputs

### Fixed
- Critical execution bug that prevented tool actions
- Git command injection vulnerability
- Type safety issues throughout codebase
- Missing error boundaries and recovery

### Security
- Fixed git command injection vulnerability
- Added input validation for all user inputs
- Implemented proper argument passing for shell commands
- Added file path validation to prevent directory traversal

## [0.1.0] - 2024-01-XX

### Added
- Initial release of Forge CLI
- Basic AI agent with Grok integration
- Core tools: file operations, git, command execution
- Interactive chat and oneshot modes
- Configuration management
- Basic safety mechanisms
- OpenRouter and xAI provider support

### Features
- Interactive chat sessions with AI assistant
- One-shot question answering
- Code change summarization
- File reading and writing
- Git operations (commit, branch creation)
- Command execution with safety controls
- Environment diagnostics
- Authentication management

### Tools
- `open_file`: Read file contents
- `write_file`: Write files with directory creation
- `apply_patch`: Apply unified diff patches
- `run`: Execute shell commands
- `git`: Git operations (commit, create branch)

### Safety
- Multi-level approval system (safe/balanced/auto)
- Command execution safety checks
- File operation approval
- Input validation

### Configuration
- Environment variable support
- JSON configuration files
- Provider selection (xAI, OpenRouter)
- Model configuration
- Logging configuration

// ── FILE: CONTRIBUTING.md
# Contributing to Forge

Thank you for your interest in contributing to Forge! This document provides guidelines and information for contributors.

## Development Setup

### Prerequisites

- Node.js 18 or higher
- Git
- A code editor (VS Code recommended)

### Getting Started

1. **Fork the repository** on GitHub
2. **Clone your fork** locally:
   ```bash
   git clone https://github.com/your-username/forge.git
   cd forge
   ```

3. **Install dependencies**:
   ```bash
   npm install
   ```

4. **Build the project**:
   ```bash
   npm run build
   ```

5. **Run tests** to ensure everything works:
   ```bash
   npm test
   ```

### Development Workflow

1. **Create a feature branch**:
   ```bash
   git checkout -b feature/your-feature-name
   ```

2. **Make your changes** following our coding standards

3. **Run tests and linting**:
   ```bash
   npm test
   npm run lint
   ```

4. **Build and test locally**:
   ```bash
   npm run build
   npm start -- --help
   ```

5. **Commit your changes** with a clear commit message

6. **Push to your fork** and create a pull request

## Coding Standards

### TypeScript

- Use TypeScript for all new code
- Follow the existing code style and patterns
- Add proper type annotations
- Use interfaces for object shapes
- Prefer `const` over `let` when possible

### Error Handling

- Use the custom error classes from `src/core/errors.ts`
- Always wrap external API calls in try-catch blocks
- Provide meaningful error messages
- Log errors appropriately using the structured logger

### Testing

- Write tests for all new functionality
- Aim for high test coverage (>80%)
- Use descriptive test names
- Test both success and error cases
- Mock external dependencies

### Documentation

- Add JSDoc comments for public APIs
- Update README.md for user-facing changes
- Include examples in documentation
- Keep inline comments concise and helpful

## Project Structure

```
src/
├── cli.ts                 # Main CLI entry point
├── commands/              # CLI command implementations
├── config/                # Configuration management
├── core/                  # Core functionality
│   ├── agent.ts          # Main agent logic
│   ├── contracts.ts      # API contracts and validation
│   ├── errors.ts         # Error handling
│   ├── logger.ts         # Structured logging
│   ├── validation.ts     # Input validation
│   ├── tools/            # Tool implementations
│   └── __tests__/        # Core tests
├── providers/             # LLM provider implementations
├── state/                 # State management (memory, history)
├── ui/                    # User interface components
└── types/                 # TypeScript type definitions
```

## Adding New Features

### New Tools

1. Create a new file in `src/core/tools/`
2. Implement the tool function with proper error handling
3. Add it to the tools registry in `src/core/tools/registry.ts`
4. Add validation in `src/core/validation.ts`
5. Write comprehensive tests
6. Update documentation

### New Commands

1. Create a new file in `src/commands/`
2. Register the command in `src/cli.ts`
3. Add proper error handling and logging
4. Write tests
5. Update README.md

### New Providers

1. Create a new file in `src/providers/`
2. Implement the `LLM` interface
3. Add configuration options
4. Write tests
5. Update documentation

## Testing Guidelines

### Unit Tests

- Place tests in `__tests__` directories
- Use descriptive test names
- Test both success and failure cases
- Mock external dependencies

### Integration Tests

- Test complete workflows
- Use real file system operations when safe
- Test error scenarios

### Running Tests

```bash
# Run all tests
npm test

# Run tests in watch mode
npm run test:watch

# Run tests with coverage
npm run test:coverage

# Run specific test file
npm test src/core/__tests__/validation.test.ts
```

## Pull Request Process

### Before Submitting

1. **Ensure tests pass**: `npm test`
2. **Check linting**: `npm run lint`
3. **Build successfully**: `npm run build`
4. **Test manually**: Try your changes with real usage
5. **Update documentation**: If needed

### Pull Request Template

When creating a pull request, please include:

- **Description**: What changes you made and why
- **Testing**: How you tested the changes
- **Breaking Changes**: Any breaking changes and migration steps
- **Screenshots**: If applicable
- **Related Issues**: Link to any related issues

### Review Process

1. **Automated checks** must pass (tests, linting, build)
2. **Code review** by maintainers
3. **Testing** by maintainers
4. **Approval** and merge

## Bug Reports

When reporting bugs, please include:

- **Description**: Clear description of the issue
- **Steps to reproduce**: Detailed steps to reproduce
- **Expected behavior**: What should happen
- **Actual behavior**: What actually happens
- **Environment**: OS, Node.js version, Forge version
- **Logs**: Relevant log output (remove sensitive data)

## Feature Requests

When requesting features, please include:

- **Use case**: Why this feature would be useful
- **Proposed solution**: How you think it should work
- **Alternatives**: Other solutions you've considered
- **Additional context**: Any other relevant information

## Code of Conduct

### Our Pledge

We are committed to providing a welcoming and inclusive environment for all contributors.

### Expected Behavior

- Be respectful and inclusive
- Use welcoming and inclusive language
- Be respectful of differing viewpoints
- Accept constructive criticism gracefully
- Focus on what's best for the community
- Show empathy towards other community members

### Unacceptable Behavior

- Harassment, trolling, or inappropriate comments
- Personal attacks or political discussions
- Public or private harassment
- Publishing private information without permission
- Other unprofessional conduct

## Getting Help

- **GitHub Issues**: For bug reports and feature requests
- **GitHub Discussions**: For questions and general discussion
- **Discord**: [Join our Discord server](https://discord.gg/savant-ai) for real-time chat

## Release Process

### Versioning

We use [Semantic Versioning](https://semver.org/):
- **MAJOR**: Breaking changes
- **MINOR**: New features (backward compatible)
- **PATCH**: Bug fixes (backward compatible)

### Release Steps

1. Update version in `package.json`
2. Update `CHANGELOG.md`
3. Create a release tag
4. Publish to npm
5. Create GitHub release

## License

By contributing to Forge, you agree that your contributions will be licensed under the MIT License.

---

Thank you for contributing to Forge! 🚀

// ── FILE: eslint.config.js
// eslint.config.js
// ESLint v9 flat config for Node + TypeScript
// Migration: https://eslint.org/docs/latest/use/migrate-to-9.0.0
// Typed linting: https://typescript-eslint.io/getting-started/typed-linting/
import js from "@eslint/js";
import tseslint from "typescript-eslint";

export default [
  // Global ignores (must be its own item)
  { ignores: ["dist/**", "node_modules/**", "vitest.config.ts"] },

  // JavaScript files
  { ...js.configs.recommended, files: ["**/*.{js,cjs,mjs}"] },

  // TypeScript (typed)
  {
    files: ["**/*.{ts,tsx}"],
    languageOptions: {
      parser: tseslint.parser,
      parserOptions: {
        // Modern, faster typed linting without explicit project globs
        projectService: true,
        tsconfigRootDir: import.meta.dirname,
      },
    },
    plugins: {
      "@typescript-eslint": tseslint.plugin,
    },
    rules: {
      // Start from the recommended type-checked rules
      ...tseslint.configs.recommendedTypeChecked.rules,

      // ——— Soften edges for CLI/provider boundaries ———
      // We handle lots of untyped JSON and external data:
      "@typescript-eslint/no-unsafe-assignment": "off",
      "@typescript-eslint/no-unsafe-member-access": "off",
      "@typescript-eslint/no-unsafe-argument": "off",
      "@typescript-eslint/no-unsafe-call": "off",
      "@typescript-eslint/no-unsafe-return": "off",
      "@typescript-eslint/no-explicit-any": "off",

      // Async ergonomics in CLI handlers:
      "@typescript-eslint/require-await": "off",
      "@typescript-eslint/no-floating-promises": "off",

      // Style prefs that were firing widely:
      "@typescript-eslint/prefer-nullish-coalescing": "off",
      "@typescript-eslint/consistent-type-definitions": "off",
      "@typescript-eslint/array-type": "off",
      "@typescript-eslint/dot-notation": "off",
      "@typescript-eslint/prefer-regexp-exec": "off",
    },
  },

  // Declaration files & vendor-like shims: fully relaxed
  {
    files: ["**/*.d.ts"],
    languageOptions: {
      parser: tseslint.parser,
      parserOptions: {
        projectService: true,
        tsconfigRootDir: import.meta.dirname,
      },
    },
    rules: {
      "no-unused-vars": "off",
      "@typescript-eslint/no-explicit-any": "off",
      "@typescript-eslint/no-unsafe-assignment": "off",
      "@typescript-eslint/no-unsafe-member-access": "off",
      "@typescript-eslint/no-unsafe-argument": "off",
      "@typescript-eslint/no-unsafe-call": "off",
      "@typescript-eslint/no-unsafe-return": "off",
      "@typescript-eslint/consistent-type-definitions": "off",
      "@typescript-eslint/array-type": "off",
    },
  },
];

// ── FILE: package-lock.json
{
  "name": "forge",
  "version": "0.1.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "forge",
      "version": "0.1.0",
      "dependencies": {
        "chalk": "^5.3.0",
        "cli-spinners": "^2.9.2",
        "commander": "^12.1.0",
        "diff": "^5.2.0",
        "diff-match-patch": "^1.0.5",
        "diff3": "^0.0.3",
        "dotenv": "^16.6.1",
        "figlet": "^1.7.0",
        "gradient-string": "^3.0.0",
        "ora": "^8.0.1",
        "pino": "^9.0.0",
        "pino-pretty": "^13.1.1",
        "prompts": "^2.4.2",
        "simple-git": "^3.25.0",
        "zod": "^3.23.8"
      },
      "bin": {
        "forge": "bin/forge"
      },
      "devDependencies": {
        "@eslint/js": "^9.36.0",
        "@types/node": "^22.0.0",
        "@types/prompts": "^2.4.9",
        "@vitest/coverage-v8": "^3.2.4",
        "ajv": "^8.17.1",
        "eslint": "^9.36.0",
        "prettier": "^3.3.0",
        "ts-node": "^10.9.2",
        "typescript": "^5.4.0",
        "typescript-eslint": "^8.44.1",
        "vitest": "^3.2.4"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@ampproject/remapping/node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.31",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.31.tgz",
      "integrity": "sha512-zzNR+SdQSDJzc8joaeP8QQoCQr8NuYx2dIIytl1QeBEZHJ9uW6hebsrYgbz8hJwUQao3TWCMtmfV8Nu1twOLAw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
      "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.28.4.tgz",
      "integrity": "sha512-yZbBqeM6TkpP9du/I2pUZnJsRMGGvOuIrhjzC1AwHwW+6he4mni6Bp/m8ijn0iOuZuPI2BfkCoSRunpyjnrQKg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.28.4"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.28.4.tgz",
      "integrity": "sha512-bkFqkLhh3pMBUQQkpVgWDWq/lqzc2678eUyDlTBhRqhCHFguYYGM0Efga7tYk4TogG/3x0EEl66/OQ+WGbWB/Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@bcoe/v8-coverage": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/@bcoe/v8-coverage/-/v8-coverage-1.0.2.tgz",
      "integrity": "sha512-6zABk/ECA/QYSCQ1NGiVwwbQerUCZ+TQbp64Q3AgmfNvurHH0j8TtXa1qbShXA6qqkpAj4V5W8pP6mLe1mcMqA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@cspotcode/source-map-support": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz",
      "integrity": "sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/trace-mapping": "0.3.9"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@esbuild/aix-ppc64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.25.10.tgz",
      "integrity": "sha512-0NFWnA+7l41irNuaSVlLfgNT12caWJVLzp5eAVhZ0z1qpxbockccEt3s+149rE64VUI3Ml2zt8Nv5JVc4QXTsw==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "aix"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.25.10.tgz",
      "integrity": "sha512-dQAxF1dW1C3zpeCDc5KqIYuZ1tgAdRXNoZP7vkBIRtKZPYe2xVr/d3SkirklCHudW1B45tGiUlz2pUWDfbDD4w==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.25.10.tgz",
      "integrity": "sha512-LSQa7eDahypv/VO6WKohZGPSJDq5OVOo3UoFR1E4t4Gj1W7zEQMUhI+lo81H+DtB+kP+tDgBp+M4oNCwp6kffg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-x64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.25.10.tgz",
      "integrity": "sha512-MiC9CWdPrfhibcXwr39p9ha1x0lZJ9KaVfvzA0Wxwz9ETX4v5CHfF09bx935nHlhi+MxhA63dKRRQLiVgSUtEg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-arm64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.25.10.tgz",
      "integrity": "sha512-JC74bdXcQEpW9KkV326WpZZjLguSZ3DfS8wrrvPMHgQOIEIG/sPXEN/V8IssoJhbefLRcRqw6RQH2NnpdprtMA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-x64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.25.10.tgz",
      "integrity": "sha512-tguWg1olF6DGqzws97pKZ8G2L7Ig1vjDmGTwcTuYHbuU6TTjJe5FXbgs5C1BBzHbJ2bo1m3WkQDbWO2PvamRcg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-arm64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.25.10.tgz",
      "integrity": "sha512-3ZioSQSg1HT2N05YxeJWYR+Libe3bREVSdWhEEgExWaDtyFbbXWb49QgPvFH8u03vUPX10JhJPcz7s9t9+boWg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-x64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.25.10.tgz",
      "integrity": "sha512-LLgJfHJk014Aa4anGDbh8bmI5Lk+QidDmGzuC2D+vP7mv/GeSN+H39zOf7pN5N8p059FcOfs2bVlrRr4SK9WxA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.25.10.tgz",
      "integrity": "sha512-oR31GtBTFYCqEBALI9r6WxoU/ZofZl962pouZRTEYECvNF/dtXKku8YXcJkhgK/beU+zedXfIzHijSRapJY3vg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.25.10.tgz",
      "integrity": "sha512-5luJWN6YKBsawd5f9i4+c+geYiVEw20FVW5x0v1kEMWNq8UctFjDiMATBxLvmmHA4bf7F6hTRaJgtghFr9iziQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ia32": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.25.10.tgz",
      "integrity": "sha512-NrSCx2Kim3EnnWgS4Txn0QGt0Xipoumb6z6sUtl5bOEZIVKhzfyp/Lyw4C1DIYvzeW/5mWYPBFJU3a/8Yr75DQ==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-loong64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.25.10.tgz",
      "integrity": "sha512-xoSphrd4AZda8+rUDDfD9J6FUMjrkTz8itpTITM4/xgerAZZcFW7Dv+sun7333IfKxGG8gAq+3NbfEMJfiY+Eg==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-mips64el": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.25.10.tgz",
      "integrity": "sha512-ab6eiuCwoMmYDyTnyptoKkVS3k8fy/1Uvq7Dj5czXI6DF2GqD2ToInBI0SHOp5/X1BdZ26RKc5+qjQNGRBelRA==",
      "cpu": [
        "mips64el"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ppc64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.25.10.tgz",
      "integrity": "sha512-NLinzzOgZQsGpsTkEbdJTCanwA5/wozN9dSgEl12haXJBzMTpssebuXR42bthOF3z7zXFWH1AmvWunUCkBE4EA==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-riscv64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.25.10.tgz",
      "integrity": "sha512-FE557XdZDrtX8NMIeA8LBJX3dC2M8VGXwfrQWU7LB5SLOajfJIxmSdyL/gU1m64Zs9CBKvm4UAuBp5aJ8OgnrA==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-s390x": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.25.10.tgz",
      "integrity": "sha512-3BBSbgzuB9ajLoVZk0mGu+EHlBwkusRmeNYdqmznmMc9zGASFjSsxgkNsqmXugpPk00gJ0JNKh/97nxmjctdew==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-x64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.25.10.tgz",
      "integrity": "sha512-QSX81KhFoZGwenVyPoberggdW1nrQZSvfVDAIUXr3WqLRZGZqWk/P4T8p2SP+de2Sr5HPcvjhcJzEiulKgnxtA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/netbsd-arm64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-arm64/-/netbsd-arm64-0.25.10.tgz",
      "integrity": "sha512-AKQM3gfYfSW8XRk8DdMCzaLUFB15dTrZfnX8WXQoOUpUBQ+NaAFCP1kPS/ykbbGYz7rxn0WS48/81l9hFl3u4A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/netbsd-x64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.25.10.tgz",
      "integrity": "sha512-7RTytDPGU6fek/hWuN9qQpeGPBZFfB4zZgcz2VK2Z5VpdUxEI8JKYsg3JfO0n/Z1E/6l05n0unDCNc4HnhQGig==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-arm64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-arm64/-/openbsd-arm64-0.25.10.tgz",
      "integrity": "sha512-5Se0VM9Wtq797YFn+dLimf2Zx6McttsH2olUBsDml+lm0GOCRVebRWUvDtkY4BWYv/3NgzS8b/UM3jQNh5hYyw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-x64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.25.10.tgz",
      "integrity": "sha512-XkA4frq1TLj4bEMB+2HnI0+4RnjbuGZfet2gs/LNs5Hc7D89ZQBHQ0gL2ND6Lzu1+QVkjp3x1gIcPKzRNP8bXw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openharmony-arm64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/openharmony-arm64/-/openharmony-arm64-0.25.10.tgz",
      "integrity": "sha512-AVTSBhTX8Y/Fz6OmIVBip9tJzZEUcY8WLh7I59+upa5/GPhh2/aM6bvOMQySspnCCHvFi79kMtdJS1w0DXAeag==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openharmony"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/sunos-x64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.25.10.tgz",
      "integrity": "sha512-fswk3XT0Uf2pGJmOpDB7yknqhVkJQkAQOcW/ccVOtfx05LkbWOaRAtn5SaqXypeKQra1QaEa841PgrSL9ubSPQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "sunos"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-arm64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.25.10.tgz",
      "integrity": "sha512-ah+9b59KDTSfpaCg6VdJoOQvKjI33nTaQr4UluQwW7aEwZQsbMCfTmfEO4VyewOxx4RaDT/xCy9ra2GPWmO7Kw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-ia32": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.25.10.tgz",
      "integrity": "sha512-QHPDbKkrGO8/cz9LKVnJU22HOi4pxZnZhhA2HYHez5Pz4JeffhDjf85E57Oyco163GnzNCVkZK0b/n4Y0UHcSw==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.25.10.tgz",
      "integrity": "sha512-9KpxSVFCu0iK1owoez6aC/s/EdUQLDN3adTxGCqxMVhrPDj6bt5dbrHDXUuq+Bs2vATFBBrQS5vdQ/Ed2P+nbw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@eslint-community/eslint-utils": {
      "version": "4.9.0",
      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.9.0.tgz",
      "integrity": "sha512-ayVFHdtZ+hsq1t2Dy24wCmGXGe4q9Gu3smhLYALJrr473ZH27MsnSL+LKUlimp4BWJqMDMLmPpx/Q9R3OAlL4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^3.4.3"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
      }
    },
    "node_modules/@eslint-community/eslint-utils/node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint-community/regexpp": {
      "version": "4.12.1",
      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
      "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
      }
    },
    "node_modules/@eslint/config-array": {
      "version": "0.21.0",
      "resolved": "https://registry.npmjs.org/@eslint/config-array/-/config-array-0.21.0.tgz",
      "integrity": "sha512-ENIdc4iLu0d93HeYirvKmrzshzofPw6VkZRKQGe9Nv46ZnWUzcF1xV01dcvEg/1wXUR61OmmlSfyeyO7EvjLxQ==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/object-schema": "^2.1.6",
        "debug": "^4.3.1",
        "minimatch": "^3.1.2"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/config-helpers": {
      "version": "0.3.1",
      "resolved": "https://registry.npmjs.org/@eslint/config-helpers/-/config-helpers-0.3.1.tgz",
      "integrity": "sha512-xR93k9WhrDYpXHORXpxVL5oHj3Era7wo6k/Wd8/IsQNnZUTzkGS29lyn3nAT05v6ltUuTFVCCYDEGfy2Or/sPA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/core": {
      "version": "0.15.2",
      "resolved": "https://registry.npmjs.org/@eslint/core/-/core-0.15.2.tgz",
      "integrity": "sha512-78Md3/Rrxh83gCxoUc0EiciuOHsIITzLy53m3d9UyiW8y9Dj2D29FeETqyKA+BRK76tnTp6RXWb3pCay8Oyomg==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@types/json-schema": "^7.0.15"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/eslintrc": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-3.3.1.tgz",
      "integrity": "sha512-gtF186CXhIl1p4pJNGZw8Yc6RlshoePRvE0X91oPGb3vZ8pM3qOS9W9NGPat9LziaBV7XrJWGylNQXkGcnM3IQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^10.0.1",
        "globals": "^14.0.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.1.2",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@eslint/js": {
      "version": "9.36.0",
      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-9.36.0.tgz",
      "integrity": "sha512-uhCbYtYynH30iZErszX78U+nR3pJU3RHGQ57NXy5QupD4SBVwDeU8TNBy+MjMngc1UyIW9noKqsRqfjQTBU2dw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://eslint.org/donate"
      }
    },
    "node_modules/@eslint/object-schema": {
      "version": "2.1.6",
      "resolved": "https://registry.npmjs.org/@eslint/object-schema/-/object-schema-2.1.6.tgz",
      "integrity": "sha512-RBMg5FRL0I0gs51M/guSAj5/e14VQ4tpZnQNWwuDT66P14I43ItmPfIZRhO9fUVIPOAQXU47atlywZ/czoqFPA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@eslint/plugin-kit": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/@eslint/plugin-kit/-/plugin-kit-0.3.5.tgz",
      "integrity": "sha512-Z5kJ+wU3oA7MMIqVR9tyZRtjYPr4OC004Q4Rw7pgOKUOKkJfZ3O24nz3WYfGRpMDNmcOi3TwQOmgm7B7Tpii0w==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@eslint/core": "^0.15.2",
        "levn": "^0.4.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      }
    },
    "node_modules/@humanfs/core": {
      "version": "0.19.1",
      "resolved": "https://registry.npmjs.org/@humanfs/core/-/core-0.19.1.tgz",
      "integrity": "sha512-5DyQ4+1JEUzejeK1JGICcideyfUbGixgS9jNgex5nqkW+cY7WZhxBigmieN5Qnw9ZosSNVC9KQKyb+GUaGyKUA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanfs/node": {
      "version": "0.16.7",
      "resolved": "https://registry.npmjs.org/@humanfs/node/-/node-0.16.7.tgz",
      "integrity": "sha512-/zUx+yOsIrG4Y43Eh2peDeKCxlRt/gET6aHfaKpuq267qXdYDFViVHfMaLyygZOnl0kGWxFIgsBy8QFuTLUXEQ==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@humanfs/core": "^0.19.1",
        "@humanwhocodes/retry": "^0.4.0"
      },
      "engines": {
        "node": ">=18.18.0"
      }
    },
    "node_modules/@humanwhocodes/module-importer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=12.22"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/retry": {
      "version": "0.4.3",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/retry/-/retry-0.4.3.tgz",
      "integrity": "sha512-bV0Tgo9K4hfPCek+aMAn81RppFKv2ySDQeMoSZuvTASywNTnVJCArCZE2FWqpvIatKu7VMRLWlR1EazvVhDyhQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.18"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@isaacs/cliui": {
      "version": "8.0.2",
      "resolved": "https://registry.npmjs.org/@isaacs/cliui/-/cliui-8.0.2.tgz",
      "integrity": "sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "string-width": "^5.1.2",
        "string-width-cjs": "npm:string-width@^4.2.0",
        "strip-ansi": "^7.0.1",
        "strip-ansi-cjs": "npm:strip-ansi@^6.0.1",
        "wrap-ansi": "^8.1.0",
        "wrap-ansi-cjs": "npm:wrap-ansi@^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@istanbuljs/schema": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/@istanbuljs/schema/-/schema-0.1.3.tgz",
      "integrity": "sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.13",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.13.tgz",
      "integrity": "sha512-2kkt/7niJ6MgEPxF0bYdQ6etZaA+fQvDcLKckhy1yIQOzaoKjBBjSj63/aLVjYE3qhRt5dvM+uUyfCg6UKCBbA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.5.0",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "node_modules/@jridgewell/gen-mapping/node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.31",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.31.tgz",
      "integrity": "sha512-zzNR+SdQSDJzc8joaeP8QQoCQr8NuYx2dIIytl1QeBEZHJ9uW6hebsrYgbz8hJwUQao3TWCMtmfV8Nu1twOLAw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.5",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.5.tgz",
      "integrity": "sha512-cYQ9310grqxueWbl+WuIUIaiUaDcj7WOq5fVhEljNVgRfOUhY9fy2zTvfoqWsnebh8Sl70VScFbICvJnLKB0Og==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.9",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz",
      "integrity": "sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.0.3",
        "@jridgewell/sourcemap-codec": "^1.4.10"
      }
    },
    "node_modules/@kwsites/file-exists": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/@kwsites/file-exists/-/file-exists-1.1.1.tgz",
      "integrity": "sha512-m9/5YGR18lIwxSFDwfE3oA7bWuq9kdau6ugN4H2rJeyhFQZcG9AgSHkQtSD15a8WvTgfz9aikZMrKPHvbpqFiw==",
      "license": "MIT",
      "dependencies": {
        "debug": "^4.1.1"
      }
    },
    "node_modules/@kwsites/promise-deferred": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/@kwsites/promise-deferred/-/promise-deferred-1.1.1.tgz",
      "integrity": "sha512-GaHYm+c0O9MjZRu0ongGBRbinu8gVAMd2UZjji6jVmqKtZluZnptXGWhz1E8j8D2HJ3f/yMxKAUC0b+57wncIw==",
      "license": "MIT"
    },
    "node_modules/@nodelib/fs.scandir": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "2.0.5",
        "run-parallel": "^1.1.9"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.stat": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.walk": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.scandir": "2.1.5",
        "fastq": "^1.6.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@pkgjs/parseargs": {
      "version": "0.11.0",
      "resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
      "integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/@rollup/rollup-android-arm-eabi": {
      "version": "4.52.3",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.52.3.tgz",
      "integrity": "sha512-h6cqHGZ6VdnwliFG1NXvMPTy/9PS3h8oLh7ImwR+kl+oYnQizgjxsONmmPSb2C66RksfkfIxEVtDSEcJiO0tqw==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-android-arm64": {
      "version": "4.52.3",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.52.3.tgz",
      "integrity": "sha512-wd+u7SLT/u6knklV/ifG7gr5Qy4GUbH2hMWcDauPFJzmCZUAJ8L2bTkVXC2niOIxp8lk3iH/QX8kSrUxVZrOVw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-darwin-arm64": {
      "version": "4.52.3",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.52.3.tgz",
      "integrity": "sha512-lj9ViATR1SsqycwFkJCtYfQTheBdvlWJqzqxwc9f2qrcVrQaF/gCuBRTiTolkRWS6KvNxSk4KHZWG7tDktLgjg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-darwin-x64": {
      "version": "4.52.3",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.52.3.tgz",
      "integrity": "sha512-+Dyo7O1KUmIsbzx1l+4V4tvEVnVQqMOIYtrxK7ncLSknl1xnMHLgn7gddJVrYPNZfEB8CIi3hK8gq8bDhb3h5A==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-arm64": {
      "version": "4.52.3",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.52.3.tgz",
      "integrity": "sha512-u9Xg2FavYbD30g3DSfNhxgNrxhi6xVG4Y6i9Ur1C7xUuGDW3banRbXj+qgnIrwRN4KeJ396jchwy9bCIzbyBEQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-x64": {
      "version": "4.52.3",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.52.3.tgz",
      "integrity": "sha512-5M8kyi/OX96wtD5qJR89a/3x5x8x5inXBZO04JWhkQb2JWavOWfjgkdvUqibGJeNNaz1/Z1PPza5/tAPXICI6A==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
      "version": "4.52.3",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.52.3.tgz",
      "integrity": "sha512-IoerZJ4l1wRMopEHRKOO16e04iXRDyZFZnNZKrWeNquh5d6bucjezgd+OxG03mOMTnS1x7hilzb3uURPkJ0OfA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-musleabihf": {
      "version": "4.52.3",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.52.3.tgz",
      "integrity": "sha512-ZYdtqgHTDfvrJHSh3W22TvjWxwOgc3ThK/XjgcNGP2DIwFIPeAPNsQxrJO5XqleSlgDux2VAoWQ5iJrtaC1TbA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-gnu": {
      "version": "4.52.3",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.52.3.tgz",
      "integrity": "sha512-NcViG7A0YtuFDA6xWSgmFb6iPFzHlf5vcqb2p0lGEbT+gjrEEz8nC/EeDHvx6mnGXnGCC1SeVV+8u+smj0CeGQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-musl": {
      "version": "4.52.3",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.52.3.tgz",
      "integrity": "sha512-d3pY7LWno6SYNXRm6Ebsq0DJGoiLXTb83AIPCXl9fmtIQs/rXoS8SJxxUNtFbJ5MiOvs+7y34np77+9l4nfFMw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-loong64-gnu": {
      "version": "4.52.3",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loong64-gnu/-/rollup-linux-loong64-gnu-4.52.3.tgz",
      "integrity": "sha512-3y5GA0JkBuirLqmjwAKwB0keDlI6JfGYduMlJD/Rl7fvb4Ni8iKdQs1eiunMZJhwDWdCvrcqXRY++VEBbvk6Eg==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-ppc64-gnu": {
      "version": "4.52.3",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-ppc64-gnu/-/rollup-linux-ppc64-gnu-4.52.3.tgz",
      "integrity": "sha512-AUUH65a0p3Q0Yfm5oD2KVgzTKgwPyp9DSXc3UA7DtxhEb/WSPfbG4wqXeSN62OG5gSo18em4xv6dbfcUGXcagw==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-gnu": {
      "version": "4.52.3",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.52.3.tgz",
      "integrity": "sha512-1makPhFFVBqZE+XFg3Dkq+IkQ7JvmUrwwqaYBL2CE+ZpxPaqkGaiWFEWVGyvTwZace6WLJHwjVh/+CXbKDGPmg==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-musl": {
      "version": "4.52.3",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.52.3.tgz",
      "integrity": "sha512-OOFJa28dxfl8kLOPMUOQBCO6z3X2SAfzIE276fwT52uXDWUS178KWq0pL7d6p1kz7pkzA0yQwtqL0dEPoVcRWg==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-s390x-gnu": {
      "version": "4.52.3",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.52.3.tgz",
      "integrity": "sha512-jMdsML2VI5l+V7cKfZx3ak+SLlJ8fKvLJ0Eoa4b9/vCUrzXKgoKxvHqvJ/mkWhFiyp88nCkM5S2v6nIwRtPcgg==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-gnu": {
      "version": "4.52.3",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.52.3.tgz",
      "integrity": "sha512-tPgGd6bY2M2LJTA1uGq8fkSPK8ZLYjDjY+ZLK9WHncCnfIz29LIXIqUgzCR0hIefzy6Hpbe8Th5WOSwTM8E7LA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-musl": {
      "version": "4.52.3",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.52.3.tgz",
      "integrity": "sha512-BCFkJjgk+WFzP+tcSMXq77ymAPIxsX9lFJWs+2JzuZTLtksJ2o5hvgTdIcZ5+oKzUDMwI0PfWzRBYAydAHF2Mw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-openharmony-arm64": {
      "version": "4.52.3",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-openharmony-arm64/-/rollup-openharmony-arm64-4.52.3.tgz",
      "integrity": "sha512-KTD/EqjZF3yvRaWUJdD1cW+IQBk4fbQaHYJUmP8N4XoKFZilVL8cobFSTDnjTtxWJQ3JYaMgF4nObY/+nYkumA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openharmony"
      ]
    },
    "node_modules/@rollup/rollup-win32-arm64-msvc": {
      "version": "4.52.3",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.52.3.tgz",
      "integrity": "sha512-+zteHZdoUYLkyYKObGHieibUFLbttX2r+58l27XZauq0tcWYYuKUwY2wjeCN9oK1Um2YgH2ibd6cnX/wFD7DuA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-ia32-msvc": {
      "version": "4.52.3",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.52.3.tgz",
      "integrity": "sha512-of1iHkTQSo3kr6dTIRX6t81uj/c/b15HXVsPcEElN5sS859qHrOepM5p9G41Hah+CTqSh2r8Bm56dL2z9UQQ7g==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-x64-gnu": {
      "version": "4.52.3",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-gnu/-/rollup-win32-x64-gnu-4.52.3.tgz",
      "integrity": "sha512-s0hybmlHb56mWVZQj8ra9048/WZTPLILKxcvcq+8awSZmyiSUZjjem1AhU3Tf4ZKpYhK4mg36HtHDOe8QJS5PQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-x64-msvc": {
      "version": "4.52.3",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.52.3.tgz",
      "integrity": "sha512-zGIbEVVXVtauFgl3MRwGWEN36P5ZGenHRMgNw88X5wEhEBpq0XrMEZwOn07+ICrwM17XO5xfMZqh0OldCH5VTA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@tsconfig/node10": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@tsconfig/node10/-/node10-1.0.11.tgz",
      "integrity": "sha512-DcRjDCujK/kCk/cUe8Xz8ZSpm8mS3mNNpta+jGCA6USEDfktlNvm1+IuZ9eTcDbNk41BHwpHHeW+N1lKCz4zOw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@tsconfig/node12": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/@tsconfig/node12/-/node12-1.0.11.tgz",
      "integrity": "sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@tsconfig/node14": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/@tsconfig/node14/-/node14-1.0.3.tgz",
      "integrity": "sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@tsconfig/node16": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/@tsconfig/node16/-/node16-1.0.4.tgz",
      "integrity": "sha512-vxhUy4J8lyeyinH7Azl1pdd43GJhZH/tP2weN8TntQblOY+A0XbT8DJk1/oCPuOOyg/Ja757rG0CgHcWC8OfMA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/chai": {
      "version": "5.2.2",
      "resolved": "https://registry.npmjs.org/@types/chai/-/chai-5.2.2.tgz",
      "integrity": "sha512-8kB30R7Hwqf40JPiKhVzodJs2Qc1ZJ5zuT3uzw5Hq/dhNCl3G3l83jfpdI1e20BP348+fV7VIL/+FxaXkqBmWg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/deep-eql": "*"
      }
    },
    "node_modules/@types/deep-eql": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/@types/deep-eql/-/deep-eql-4.0.2.tgz",
      "integrity": "sha512-c9h9dVVMigMPc4bwTvC5dxqtqJZwQPePsWjPlpSOnojbor6pGqdk541lfA7AqFQr5pB1BRdq0juY9db81BwyFw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/estree": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
      "integrity": "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/json-schema": {
      "version": "7.0.15",
      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/node": {
      "version": "22.18.6",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-22.18.6.tgz",
      "integrity": "sha512-r8uszLPpeIWbNKtvWRt/DbVi5zbqZyj1PTmhRMqBMvDnaz1QpmSKujUtJLrqGZeoM8v72MfYggDceY4K1itzWQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "undici-types": "~6.21.0"
      }
    },
    "node_modules/@types/prompts": {
      "version": "2.4.9",
      "resolved": "https://registry.npmjs.org/@types/prompts/-/prompts-2.4.9.tgz",
      "integrity": "sha512-qTxFi6Buiu8+50/+3DGIWLHM6QuWsEKugJnnP6iv2Mc4ncxE4A/OJkjuVOA+5X0X1S/nq5VJRa8Lu+nwcvbrKA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "kleur": "^3.0.3"
      }
    },
    "node_modules/@types/tinycolor2": {
      "version": "1.4.6",
      "resolved": "https://registry.npmjs.org/@types/tinycolor2/-/tinycolor2-1.4.6.tgz",
      "integrity": "sha512-iEN8J0BoMnsWBqjVbWH/c0G0Hh7O21lpR2/+PrvAVgWdzL7eexIFm4JN/Wn10PTcmNdtS6U67r499mlWMXOxNw==",
      "license": "MIT"
    },
    "node_modules/@typescript-eslint/eslint-plugin": {
      "version": "8.44.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-8.44.1.tgz",
      "integrity": "sha512-molgphGqOBT7t4YKCSkbasmu1tb1MgrZ2szGzHbclF7PNmOkSTQVHy+2jXOSnxvR3+Xe1yySHFZoqMpz3TfQsw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/regexpp": "^4.10.0",
        "@typescript-eslint/scope-manager": "8.44.1",
        "@typescript-eslint/type-utils": "8.44.1",
        "@typescript-eslint/utils": "8.44.1",
        "@typescript-eslint/visitor-keys": "8.44.1",
        "graphemer": "^1.4.0",
        "ignore": "^7.0.0",
        "natural-compare": "^1.4.0",
        "ts-api-utils": "^2.1.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "@typescript-eslint/parser": "^8.44.1",
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/eslint-plugin/node_modules/ignore": {
      "version": "7.0.5",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-7.0.5.tgz",
      "integrity": "sha512-Hs59xBNfUIunMFgWAbGX5cq6893IbWg4KnrjbYwX3tx0ztorVgTDA6B2sxf8ejHJ4wz8BqGUMYlnzNBer5NvGg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/@typescript-eslint/parser": {
      "version": "8.44.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-8.44.1.tgz",
      "integrity": "sha512-EHrrEsyhOhxYt8MTg4zTF+DJMuNBzWwgvvOYNj/zm1vnaD/IC5zCXFehZv94Piqa2cRFfXrTFxIvO95L7Qc/cw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/scope-manager": "8.44.1",
        "@typescript-eslint/types": "8.44.1",
        "@typescript-eslint/typescript-estree": "8.44.1",
        "@typescript-eslint/visitor-keys": "8.44.1",
        "debug": "^4.3.4"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/project-service": {
      "version": "8.44.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/project-service/-/project-service-8.44.1.tgz",
      "integrity": "sha512-ycSa60eGg8GWAkVsKV4E6Nz33h+HjTXbsDT4FILyL8Obk5/mx4tbvCNsLf9zret3ipSumAOG89UcCs/KRaKYrA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/tsconfig-utils": "^8.44.1",
        "@typescript-eslint/types": "^8.44.1",
        "debug": "^4.3.4"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/scope-manager": {
      "version": "8.44.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-8.44.1.tgz",
      "integrity": "sha512-NdhWHgmynpSvyhchGLXh+w12OMT308Gm25JoRIyTZqEbApiBiQHD/8xgb6LqCWCFcxFtWwaVdFsLPQI3jvhywg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "8.44.1",
        "@typescript-eslint/visitor-keys": "8.44.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/tsconfig-utils": {
      "version": "8.44.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/tsconfig-utils/-/tsconfig-utils-8.44.1.tgz",
      "integrity": "sha512-B5OyACouEjuIvof3o86lRMvyDsFwZm+4fBOqFHccIctYgBjqR3qT39FBYGN87khcgf0ExpdCBeGKpKRhSFTjKQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/type-utils": {
      "version": "8.44.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-8.44.1.tgz",
      "integrity": "sha512-KdEerZqHWXsRNKjF9NYswNISnFzXfXNDfPxoTh7tqohU/PRIbwTmsjGK6V9/RTYWau7NZvfo52lgVk+sJh0K3g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "8.44.1",
        "@typescript-eslint/typescript-estree": "8.44.1",
        "@typescript-eslint/utils": "8.44.1",
        "debug": "^4.3.4",
        "ts-api-utils": "^2.1.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/types": {
      "version": "8.44.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-8.44.1.tgz",
      "integrity": "sha512-Lk7uj7y9uQUOEguiDIDLYLJOrYHQa7oBiURYVFqIpGxclAFQ78f6VUOM8lI2XEuNOKNB7XuvM2+2cMXAoq4ALQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree": {
      "version": "8.44.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-8.44.1.tgz",
      "integrity": "sha512-qnQJ+mVa7szevdEyvfItbO5Vo+GfZ4/GZWWDRRLjrxYPkhM+6zYB2vRYwCsoJLzqFCdZT4mEqyJoyzkunsZ96A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/project-service": "8.44.1",
        "@typescript-eslint/tsconfig-utils": "8.44.1",
        "@typescript-eslint/types": "8.44.1",
        "@typescript-eslint/visitor-keys": "8.44.1",
        "debug": "^4.3.4",
        "fast-glob": "^3.3.2",
        "is-glob": "^4.0.3",
        "minimatch": "^9.0.4",
        "semver": "^7.6.0",
        "ts-api-utils": "^2.1.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/brace-expansion": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree/node_modules/minimatch": {
      "version": "9.0.5",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/@typescript-eslint/utils": {
      "version": "8.44.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-8.44.1.tgz",
      "integrity": "sha512-DpX5Fp6edTlocMCwA+mHY8Mra+pPjRZ0TfHkXI8QFelIKcbADQz1LUPNtzOFUriBB2UYqw4Pi9+xV4w9ZczHFg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.7.0",
        "@typescript-eslint/scope-manager": "8.44.1",
        "@typescript-eslint/types": "8.44.1",
        "@typescript-eslint/typescript-estree": "8.44.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/@typescript-eslint/visitor-keys": {
      "version": "8.44.1",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-8.44.1.tgz",
      "integrity": "sha512-576+u0QD+Jp3tZzvfRfxon0EA2lzcDt3lhUbsC6Lgzy9x2VR4E+JUiNyGHi5T8vk0TV+fpJ5GLG1JsJuWCaKhw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "8.44.1",
        "eslint-visitor-keys": "^4.2.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@vitest/coverage-v8": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/@vitest/coverage-v8/-/coverage-v8-3.2.4.tgz",
      "integrity": "sha512-EyF9SXU6kS5Ku/U82E259WSnvg6c8KTjppUncuNdm5QHpe17mwREHnjDzozC8x9MZ0xfBUFSaLkRv4TMA75ALQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@ampproject/remapping": "^2.3.0",
        "@bcoe/v8-coverage": "^1.0.2",
        "ast-v8-to-istanbul": "^0.3.3",
        "debug": "^4.4.1",
        "istanbul-lib-coverage": "^3.2.2",
        "istanbul-lib-report": "^3.0.1",
        "istanbul-lib-source-maps": "^5.0.6",
        "istanbul-reports": "^3.1.7",
        "magic-string": "^0.30.17",
        "magicast": "^0.3.5",
        "std-env": "^3.9.0",
        "test-exclude": "^7.0.1",
        "tinyrainbow": "^2.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/vitest"
      },
      "peerDependencies": {
        "@vitest/browser": "3.2.4",
        "vitest": "3.2.4"
      },
      "peerDependenciesMeta": {
        "@vitest/browser": {
          "optional": true
        }
      }
    },
    "node_modules/@vitest/expect": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/@vitest/expect/-/expect-3.2.4.tgz",
      "integrity": "sha512-Io0yyORnB6sikFlt8QW5K7slY4OjqNX9jmJQ02QDda8lyM6B5oNgVWoSoKPac8/kgnCUzuHQKrSLtu/uOqqrig==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/chai": "^5.2.2",
        "@vitest/spy": "3.2.4",
        "@vitest/utils": "3.2.4",
        "chai": "^5.2.0",
        "tinyrainbow": "^2.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/vitest"
      }
    },
    "node_modules/@vitest/mocker": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/@vitest/mocker/-/mocker-3.2.4.tgz",
      "integrity": "sha512-46ryTE9RZO/rfDd7pEqFl7etuyzekzEhUbTW3BvmeO/BcCMEgq59BKhek3dXDWgAj4oMK6OZi+vRr1wPW6qjEQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@vitest/spy": "3.2.4",
        "estree-walker": "^3.0.3",
        "magic-string": "^0.30.17"
      },
      "funding": {
        "url": "https://opencollective.com/vitest"
      },
      "peerDependencies": {
        "msw": "^2.4.9",
        "vite": "^5.0.0 || ^6.0.0 || ^7.0.0-0"
      },
      "peerDependenciesMeta": {
        "msw": {
          "optional": true
        },
        "vite": {
          "optional": true
        }
      }
    },
    "node_modules/@vitest/pretty-format": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/@vitest/pretty-format/-/pretty-format-3.2.4.tgz",
      "integrity": "sha512-IVNZik8IVRJRTr9fxlitMKeJeXFFFN0JaB9PHPGQ8NKQbGpfjlTx9zO4RefN8gp7eqjNy8nyK3NZmBzOPeIxtA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "tinyrainbow": "^2.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/vitest"
      }
    },
    "node_modules/@vitest/runner": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/@vitest/runner/-/runner-3.2.4.tgz",
      "integrity": "sha512-oukfKT9Mk41LreEW09vt45f8wx7DordoWUZMYdY/cyAk7w5TWkTRCNZYF7sX7n2wB7jyGAl74OxgwhPgKaqDMQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@vitest/utils": "3.2.4",
        "pathe": "^2.0.3",
        "strip-literal": "^3.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/vitest"
      }
    },
    "node_modules/@vitest/snapshot": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/@vitest/snapshot/-/snapshot-3.2.4.tgz",
      "integrity": "sha512-dEYtS7qQP2CjU27QBC5oUOxLE/v5eLkGqPE0ZKEIDGMs4vKWe7IjgLOeauHsR0D5YuuycGRO5oSRXnwnmA78fQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@vitest/pretty-format": "3.2.4",
        "magic-string": "^0.30.17",
        "pathe": "^2.0.3"
      },
      "funding": {
        "url": "https://opencollective.com/vitest"
      }
    },
    "node_modules/@vitest/spy": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/@vitest/spy/-/spy-3.2.4.tgz",
      "integrity": "sha512-vAfasCOe6AIK70iP5UD11Ac4siNUNJ9i/9PZ3NKx07sG6sUxeag1LWdNrMWeKKYBLlzuK+Gn65Yd5nyL6ds+nw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "tinyspy": "^4.0.3"
      },
      "funding": {
        "url": "https://opencollective.com/vitest"
      }
    },
    "node_modules/@vitest/utils": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/@vitest/utils/-/utils-3.2.4.tgz",
      "integrity": "sha512-fB2V0JFrQSMsCo9HiSq3Ezpdv4iYaXRG1Sx8edX3MwxfyNn83mKiGzOcH+Fkxt4MHxr3y42fQi1oeAInqgX2QA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@vitest/pretty-format": "3.2.4",
        "loupe": "^3.1.4",
        "tinyrainbow": "^2.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/vitest"
      }
    },
    "node_modules/acorn": {
      "version": "8.15.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
      "integrity": "sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-jsx": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/acorn-walk": {
      "version": "8.3.4",
      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.3.4.tgz",
      "integrity": "sha512-ueEepnujpqee2o5aIYnvHU6C0A42MNdsIDeqy5BydrkuC5R1ZuUFnm27EeFJGoEHJQgn3uleRvmTXaJgfXbt4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "acorn": "^8.11.0"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/ajv": {
      "version": "8.17.1",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.17.1.tgz",
      "integrity": "sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.3",
        "fast-uri": "^3.0.1",
        "json-schema-traverse": "^1.0.0",
        "require-from-string": "^2.0.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ansi-regex": {
      "version": "6.2.2",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.2.2.tgz",
      "integrity": "sha512-Bq3SmSpyFHaWjPk8If9yc6svM8c56dB5BAtW4Qbw5jHTwwXXcTLoRMkpDJp6VL0XzlWaCHTXrkFURMYmD0sLqg==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/arg": {
      "version": "4.1.3",
      "resolved": "https://registry.npmjs.org/arg/-/arg-4.1.3.tgz",
      "integrity": "sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "dev": true,
      "license": "Python-2.0"
    },
    "node_modules/assertion-error": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/assertion-error/-/assertion-error-2.0.1.tgz",
      "integrity": "sha512-Izi8RQcffqCeNVgFigKli1ssklIbpHnCYc6AknXGYoB6grJqyeby7jv12JUQgmTAnIDnbck1uxksT4dzN3PWBA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/ast-v8-to-istanbul": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/ast-v8-to-istanbul/-/ast-v8-to-istanbul-0.3.5.tgz",
      "integrity": "sha512-9SdXjNheSiE8bALAQCQQuT6fgQaoxJh7IRYrRGZ8/9nv8WhJeC1aXAwN8TbaOssGOukUvyvnkgD9+Yuykvl1aA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/trace-mapping": "^0.3.30",
        "estree-walker": "^3.0.3",
        "js-tokens": "^9.0.1"
      }
    },
    "node_modules/ast-v8-to-istanbul/node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.31",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.31.tgz",
      "integrity": "sha512-zzNR+SdQSDJzc8joaeP8QQoCQr8NuYx2dIIytl1QeBEZHJ9uW6hebsrYgbz8hJwUQao3TWCMtmfV8Nu1twOLAw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/atomic-sleep": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/atomic-sleep/-/atomic-sleep-1.0.0.tgz",
      "integrity": "sha512-kNOjDqAh7px0XWNI+4QbzoiR/nTkHAWNud2uvnJquD1/x5a7EQZMJT0AczqK0Qn67oY/TTQ1LbUKajZpp3I9tQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fill-range": "^7.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/cac": {
      "version": "6.7.14",
      "resolved": "https://registry.npmjs.org/cac/-/cac-6.7.14.tgz",
      "integrity": "sha512-b6Ilus+c3RrdDk+JhLKUAQfzzgLEPy6wcXqS7f/xe1EETvsDP6GORG7SFuOs6cID5YkqchW/LXZbX5bc8j7ZcQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/chai": {
      "version": "5.3.3",
      "resolved": "https://registry.npmjs.org/chai/-/chai-5.3.3.tgz",
      "integrity": "sha512-4zNhdJD/iOjSH0A05ea+Ke6MU5mmpQcbQsSOkgdaUMJ9zTlDTD/GYlwohmIE2u0gaxHYiVHEn1Fw9mZ/ktJWgw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "assertion-error": "^2.0.1",
        "check-error": "^2.1.1",
        "deep-eql": "^5.0.1",
        "loupe": "^3.1.0",
        "pathval": "^2.0.0"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/chalk": {
      "version": "5.6.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-5.6.2.tgz",
      "integrity": "sha512-7NzBL0rN6fMUW+f7A6Io4h40qQlG+xGmtMxfbnH/K7TAtt8JQWVQK+6g0UXKMeVJoyV5EkkNsErQ8pVD3bLHbA==",
      "license": "MIT",
      "engines": {
        "node": "^12.17.0 || ^14.13 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/check-error": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/check-error/-/check-error-2.1.1.tgz",
      "integrity": "sha512-OAlb+T7V4Op9OwdkjmguYRqncdlx5JiofwOAUkmTF+jNdHwzTaTs4sRAGpzLF3oOz5xAyDGrPgeIDFQmDOTiJw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 16"
      }
    },
    "node_modules/cli-cursor": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/cli-cursor/-/cli-cursor-5.0.0.tgz",
      "integrity": "sha512-aCj4O5wKyszjMmDT4tZj93kxyydN/K5zPWSCe6/0AV/AA1pqe5ZBIw0a2ZfPQV7lL5/yb5HsUreJ6UFAF1tEQw==",
      "license": "MIT",
      "dependencies": {
        "restore-cursor": "^5.0.0"
      },
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/cli-spinners": {
      "version": "2.9.2",
      "resolved": "https://registry.npmjs.org/cli-spinners/-/cli-spinners-2.9.2.tgz",
      "integrity": "sha512-ywqV+5MmyL4E7ybXgKys4DugZbX0FC6LnwrhjuykIjnK9k8OQacQ7axGKnjDXWNhns0xot3bZI5h55H8yo9cJg==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/colorette": {
      "version": "2.0.20",
      "resolved": "https://registry.npmjs.org/colorette/-/colorette-2.0.20.tgz",
      "integrity": "sha512-IfEDxwoWIjkeXL1eXcDiow4UbKjhLdq6/EuSVR9GMN7KVH3r9gQ83e73hsz1Nd1T3ijd5xv1wcWRYO+D6kCI2w==",
      "license": "MIT"
    },
    "node_modules/commander": {
      "version": "12.1.0",
      "resolved": "https://registry.npmjs.org/commander/-/commander-12.1.0.tgz",
      "integrity": "sha512-Vw8qHK3bZM9y/P10u3Vib8o/DdkvA2OtPtZvD871QKjy74Wj1WSKFILMPRPSdUSx5RFK1arlJzEtA4PkFgnbuA==",
      "license": "MIT",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/create-require": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/create-require/-/create-require-1.1.1.tgz",
      "integrity": "sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/cross-spawn": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/dateformat": {
      "version": "4.6.3",
      "resolved": "https://registry.npmjs.org/dateformat/-/dateformat-4.6.3.tgz",
      "integrity": "sha512-2P0p0pFGzHS5EMnhdxQi7aJN+iMheud0UhG4dlE1DLAlvL8JHjJJTX/CSm4JXwV0Ka5nGk3zC5mcb5bUQUxxMA==",
      "license": "MIT",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/debug": {
      "version": "4.4.3",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.3.tgz",
      "integrity": "sha512-RGwwWnwQvkVfavKVt22FGLw+xYSdzARwm0ru6DhTVA3umU5hZc28V3kO4stgYryrTlLpuvgI9GiijltAjNbcqA==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/deep-eql": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/deep-eql/-/deep-eql-5.0.2.tgz",
      "integrity": "sha512-h5k/5U50IJJFpzfL6nO9jaaumfjO/f2NjK/oYB2Djzm4p9L+3T9qWpZqZ2hAbLPuuYq9wrU08WQyBTL5GbPk5Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/deep-is": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/diff": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/diff/-/diff-5.2.0.tgz",
      "integrity": "sha512-uIFDxqpRZGZ6ThOk84hEfqWoHx2devRFvpTZcTHur85vImfaxUbTW9Ryh4CpCuDnToOP1CEtXKIgytHBPVff5A==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.3.1"
      }
    },
    "node_modules/diff-match-patch": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/diff-match-patch/-/diff-match-patch-1.0.5.tgz",
      "integrity": "sha512-IayShXAgj/QMXgB0IWmKx+rOPuGMhqm5w6jvFxmVenXKIzRqTAAsbBPT3kWQeGANj3jGgvcvv4yK6SxqYmikgw==",
      "license": "Apache-2.0"
    },
    "node_modules/diff3": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/diff3/-/diff3-0.0.3.tgz",
      "integrity": "sha512-iSq8ngPOt0K53A6eVr4d5Kn6GNrM2nQZtC740pzIriHtn4pOQ2lyzEXQMBeVcWERN0ye7fhBsk9PbLLQOnUx/g==",
      "license": "MIT"
    },
    "node_modules/dotenv": {
      "version": "16.6.1",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.6.1.tgz",
      "integrity": "sha512-uBq4egWHTcTt33a72vpSG0z3HnPuIl6NqYcTrKEg2azoEyl2hpW0zqlxysq2pK9HlDIHyHyakeYaYnSAwd8bow==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://dotenvx.com"
      }
    },
    "node_modules/eastasianwidth": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
      "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/emoji-regex": {
      "version": "9.2.2",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
      "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/end-of-stream": {
      "version": "1.4.5",
      "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.5.tgz",
      "integrity": "sha512-ooEGc6HP26xXq/N+GCGOT0JKCLDGrq2bQUZrQ7gyrJiZANJ/8YDTxTpQBXGMn+WbIQXNVpyWymm7KYVICQnyOg==",
      "license": "MIT",
      "dependencies": {
        "once": "^1.4.0"
      }
    },
    "node_modules/es-module-lexer": {
      "version": "1.7.0",
      "resolved": "https://registry.npmjs.org/es-module-lexer/-/es-module-lexer-1.7.0.tgz",
      "integrity": "sha512-jEQoCwk8hyb2AZziIOLhDqpm5+2ww5uIE6lkO/6jcOCusfk6LhMHpXXfBLXTZ7Ydyt0j4VoUQv6uGNYbdW+kBA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/esbuild": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.25.10.tgz",
      "integrity": "sha512-9RiGKvCwaqxO2owP61uQ4BgNborAQskMR6QusfWzQqv7AZOg5oGehdY2pRJMTKuwxd1IDBP4rSbI5lHzU7SMsQ==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=18"
      },
      "optionalDependencies": {
        "@esbuild/aix-ppc64": "0.25.10",
        "@esbuild/android-arm": "0.25.10",
        "@esbuild/android-arm64": "0.25.10",
        "@esbuild/android-x64": "0.25.10",
        "@esbuild/darwin-arm64": "0.25.10",
        "@esbuild/darwin-x64": "0.25.10",
        "@esbuild/freebsd-arm64": "0.25.10",
        "@esbuild/freebsd-x64": "0.25.10",
        "@esbuild/linux-arm": "0.25.10",
        "@esbuild/linux-arm64": "0.25.10",
        "@esbuild/linux-ia32": "0.25.10",
        "@esbuild/linux-loong64": "0.25.10",
        "@esbuild/linux-mips64el": "0.25.10",
        "@esbuild/linux-ppc64": "0.25.10",
        "@esbuild/linux-riscv64": "0.25.10",
        "@esbuild/linux-s390x": "0.25.10",
        "@esbuild/linux-x64": "0.25.10",
        "@esbuild/netbsd-arm64": "0.25.10",
        "@esbuild/netbsd-x64": "0.25.10",
        "@esbuild/openbsd-arm64": "0.25.10",
        "@esbuild/openbsd-x64": "0.25.10",
        "@esbuild/openharmony-arm64": "0.25.10",
        "@esbuild/sunos-x64": "0.25.10",
        "@esbuild/win32-arm64": "0.25.10",
        "@esbuild/win32-ia32": "0.25.10",
        "@esbuild/win32-x64": "0.25.10"
      }
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint": {
      "version": "9.36.0",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-9.36.0.tgz",
      "integrity": "sha512-hB4FIzXovouYzwzECDcUkJ4OcfOEkXTv2zRY6B9bkwjx/cprAq0uvm1nl7zvQ0/TsUk0zQiN4uPfJpB9m+rPMQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.8.0",
        "@eslint-community/regexpp": "^4.12.1",
        "@eslint/config-array": "^0.21.0",
        "@eslint/config-helpers": "^0.3.1",
        "@eslint/core": "^0.15.2",
        "@eslint/eslintrc": "^3.3.1",
        "@eslint/js": "9.36.0",
        "@eslint/plugin-kit": "^0.3.5",
        "@humanfs/node": "^0.16.6",
        "@humanwhocodes/module-importer": "^1.0.1",
        "@humanwhocodes/retry": "^0.4.2",
        "@types/estree": "^1.0.6",
        "@types/json-schema": "^7.0.15",
        "ajv": "^6.12.4",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.6",
        "debug": "^4.3.2",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^8.4.0",
        "eslint-visitor-keys": "^4.2.1",
        "espree": "^10.4.0",
        "esquery": "^1.5.0",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^8.0.0",
        "find-up": "^5.0.0",
        "glob-parent": "^6.0.2",
        "ignore": "^5.2.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.1.2",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.3"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://eslint.org/donate"
      },
      "peerDependencies": {
        "jiti": "*"
      },
      "peerDependenciesMeta": {
        "jiti": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-scope": {
      "version": "8.4.0",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.4.0.tgz",
      "integrity": "sha512-sNXOfKCn74rt8RICKMvJS7XKV/Xk9kA7DyJr8mJik3S7Cwgy3qlkkmyS2uQB3jiJg6VNdZd/pDBJu0nvG2NlTg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-visitor-keys": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-4.2.1.tgz",
      "integrity": "sha512-Uhdk5sfqcee/9H/rCOJikYz67o0a2Tw2hGRPOG2Y1R2dg7brRe1uG0yaNQDHu+TO/uQPF/5eCapvYSmHUjt7JQ==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint/node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/eslint/node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/eslint/node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/espree": {
      "version": "10.4.0",
      "resolved": "https://registry.npmjs.org/espree/-/espree-10.4.0.tgz",
      "integrity": "sha512-j6PAQ2uUr79PZhBjP5C5fhl8e39FmRnOjsD5lGnWrFU8i2G776tBK7+nP8KuQUTTyAZUwfQqXAgrVH5MbH9CYQ==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "acorn": "^8.15.0",
        "acorn-jsx": "^5.3.2",
        "eslint-visitor-keys": "^4.2.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/esquery": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "estraverse": "^5.1.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estree-walker": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/estree-walker/-/estree-walker-3.0.3.tgz",
      "integrity": "sha512-7RUKfXgSMMkzt6ZuXmqapOurLGPPfgj6l9uRZ7lRGolvk0y2yocc35LdcxKC5PQZdn2DMqioAQ2NoWcrTKmm6g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/estree": "^1.0.0"
      }
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/expect-type": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/expect-type/-/expect-type-1.2.2.tgz",
      "integrity": "sha512-JhFGDVJ7tmDJItKhYgJCGLOWjuK9vPxiXoUFLwLDc99NlmklilbiQJwoctZtt13+xMw91MCk/REan6MWHqDjyA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/fast-copy": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/fast-copy/-/fast-copy-3.0.2.tgz",
      "integrity": "sha512-dl0O9Vhju8IrcLndv2eU4ldt1ftXMqqfgN4H1cpmGV7P6jeB9FwpN9a2c8DPGE1Ys88rNUJVYDHq73CGAGOPfQ==",
      "license": "MIT"
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-glob": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.3.tgz",
      "integrity": "sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "^2.0.2",
        "@nodelib/fs.walk": "^1.2.3",
        "glob-parent": "^5.1.2",
        "merge2": "^1.3.0",
        "micromatch": "^4.0.8"
      },
      "engines": {
        "node": ">=8.6.0"
      }
    },
    "node_modules/fast-glob/node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-redact": {
      "version": "3.5.0",
      "resolved": "https://registry.npmjs.org/fast-redact/-/fast-redact-3.5.0.tgz",
      "integrity": "sha512-dwsoQlS7h9hMeYUq1W++23NDcBLV4KqONnITDV9DjfS3q1SgDGVrBdvvTLUotWtPSD7asWDV9/CmsZPy8Hf70A==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/fast-safe-stringify": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/fast-safe-stringify/-/fast-safe-stringify-2.1.1.tgz",
      "integrity": "sha512-W+KJc2dmILlPplD/H4K9l9LcAHAfPtP6BY84uVLXQ6Evcz9Lcg33Y2z1IVblT6xdY54PXYVHEv+0Wpq8Io6zkA==",
      "license": "MIT"
    },
    "node_modules/fast-uri": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/fast-uri/-/fast-uri-3.1.0.tgz",
      "integrity": "sha512-iPeeDKJSWf4IEOasVVrknXpaBV0IApz/gp7S2bb7Z4Lljbl2MGJRqInZiUrQwV16cpzw/D3S5j5Julj/gT52AA==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/fastify"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/fastify"
        }
      ],
      "license": "BSD-3-Clause"
    },
    "node_modules/fastq": {
      "version": "1.19.1",
      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.19.1.tgz",
      "integrity": "sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "reusify": "^1.0.4"
      }
    },
    "node_modules/figlet": {
      "version": "1.9.3",
      "resolved": "https://registry.npmjs.org/figlet/-/figlet-1.9.3.tgz",
      "integrity": "sha512-majPgOpVtrZN1iyNGbsUP6bOtZ6eaJgg5HHh0vFvm5DJhh8dc+FJpOC4GABvMZ/A7XHAJUuJujhgUY/2jPWgMA==",
      "license": "MIT",
      "dependencies": {
        "commander": "^14.0.0"
      },
      "bin": {
        "figlet": "bin/index.js"
      },
      "engines": {
        "node": ">= 17.0.0"
      }
    },
    "node_modules/figlet/node_modules/commander": {
      "version": "14.0.1",
      "resolved": "https://registry.npmjs.org/commander/-/commander-14.0.1.tgz",
      "integrity": "sha512-2JkV3gUZUVrbNA+1sjBOYLsMZ5cEEl8GTFP2a4AVz5hvasAMCQ1D2l2le/cX+pV4N6ZU17zjUahLpIXRrnWL8A==",
      "license": "MIT",
      "engines": {
        "node": ">=20"
      }
    },
    "node_modules/file-entry-cache": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-8.0.0.tgz",
      "integrity": "sha512-XXTUwCvisa5oacNGRP9SfNtYBNAMi+RPwBFmblZEF7N7swHYQS6/Zfk7SRwx4D5j3CH211YNRco1DEMNVfZCnQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flat-cache": "^4.0.0"
      },
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/fill-range": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/flat-cache": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-4.0.1.tgz",
      "integrity": "sha512-f7ccFPK3SXFHpx15UIGyRJ/FJQctuKZ0zVuN3frBo4HnK3cay9VEW0R6yPYFHC0AgqhukPzKjq22t5DmAyqGyw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "flatted": "^3.2.9",
        "keyv": "^4.5.4"
      },
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/flatted": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.3.tgz",
      "integrity": "sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/foreground-child": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-3.3.1.tgz",
      "integrity": "sha512-gIXjKqtFuWEgzFRJA9WCQeSJLZDjgJUOMCMzxtvFq/37KojM1BFGufqsCy0r4qSQmYLsZYMeyRqzIWOMup03sw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "cross-spawn": "^7.0.6",
        "signal-exit": "^4.0.1"
      },
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/get-east-asian-width": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/get-east-asian-width/-/get-east-asian-width-1.4.0.tgz",
      "integrity": "sha512-QZjmEOC+IT1uk6Rx0sX22V6uHWVwbdbxf1faPqJ1QhLdGgsRGCZoyaQBm/piRdJy/D2um6hM1UP7ZEeQ4EkP+Q==",
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/glob": {
      "version": "10.4.5",
      "resolved": "https://registry.npmjs.org/glob/-/glob-10.4.5.tgz",
      "integrity": "sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "foreground-child": "^3.1.0",
        "jackspeak": "^3.1.2",
        "minimatch": "^9.0.4",
        "minipass": "^7.1.2",
        "package-json-from-dist": "^1.0.0",
        "path-scurry": "^1.11.1"
      },
      "bin": {
        "glob": "dist/esm/bin.mjs"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/glob/node_modules/brace-expansion": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/glob/node_modules/minimatch": {
      "version": "9.0.5",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/globals": {
      "version": "14.0.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-14.0.0.tgz",
      "integrity": "sha512-oahGvuMGQlPw/ivIYBjVSrWAfWLBeku5tpPE2fOPLi+WHffIWbuh2tCjhyQhTBPMf5E9jDEH4FOmTYgYwbKwtQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/gradient-string": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/gradient-string/-/gradient-string-3.0.0.tgz",
      "integrity": "sha512-frdKI4Qi8Ihp4C6wZNB565de/THpIaw3DjP5ku87M+N9rNSGmPTjfkq61SdRXB7eCaL8O1hkKDvf6CDMtOzIAg==",
      "license": "MIT",
      "dependencies": {
        "chalk": "^5.3.0",
        "tinygradient": "^1.1.5"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/graphemer": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/graphemer/-/graphemer-1.4.0.tgz",
      "integrity": "sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/help-me": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/help-me/-/help-me-5.0.0.tgz",
      "integrity": "sha512-7xgomUX6ADmcYzFik0HzAxh/73YlKR9bmFzf51CZwR+b6YtzU2m0u49hQCqV6SvlqIqsaxovfwdvbnsw3b/zpg==",
      "license": "MIT"
    },
    "node_modules/html-escaper": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/html-escaper/-/html-escaper-2.0.2.tgz",
      "integrity": "sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/ignore": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/import-fresh": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
      "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-interactive": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/is-interactive/-/is-interactive-2.0.0.tgz",
      "integrity": "sha512-qP1vozQRI+BMOPcjFzrjXuQvdak2pHNUMZoeG2eRbiSqyvbEf/wQtEOTOX1guk6E3t36RkaqiSt8A/6YElNxLQ==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/is-unicode-supported": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-unicode-supported/-/is-unicode-supported-2.1.0.tgz",
      "integrity": "sha512-mE00Gnza5EEB3Ds0HfMyllZzbBrmLOX3vfWoj9A9PEnTfratQ/BcaJOuMhnkhjXvb2+FkY3VuHqtAGpTPmglFQ==",
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/istanbul-lib-coverage": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/istanbul-lib-coverage/-/istanbul-lib-coverage-3.2.2.tgz",
      "integrity": "sha512-O8dpsF+r0WV/8MNRKfnmrtCWhuKjxrq2w+jpzBL5UZKTi2LeVWnWOmWRxFlesJONmc+wLAGvKQZEOanko0LFTg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/istanbul-lib-report": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-report/-/istanbul-lib-report-3.0.1.tgz",
      "integrity": "sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "istanbul-lib-coverage": "^3.0.0",
        "make-dir": "^4.0.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-lib-source-maps": {
      "version": "5.0.6",
      "resolved": "https://registry.npmjs.org/istanbul-lib-source-maps/-/istanbul-lib-source-maps-5.0.6.tgz",
      "integrity": "sha512-yg2d+Em4KizZC5niWhQaIomgf5WlL4vOOjZ5xGCmF8SnPE/mDWWXgvRExdcpCgh9lLRRa1/fSYp2ymmbJ1pI+A==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "@jridgewell/trace-mapping": "^0.3.23",
        "debug": "^4.1.1",
        "istanbul-lib-coverage": "^3.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-lib-source-maps/node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.31",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.31.tgz",
      "integrity": "sha512-zzNR+SdQSDJzc8joaeP8QQoCQr8NuYx2dIIytl1QeBEZHJ9uW6hebsrYgbz8hJwUQao3TWCMtmfV8Nu1twOLAw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/istanbul-reports": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/istanbul-reports/-/istanbul-reports-3.2.0.tgz",
      "integrity": "sha512-HGYWWS/ehqTV3xN10i23tkPkpH46MLCIMFNCaaKNavAXTF1RkqxawEPtnjnGZ6XKSInBKkiOA5BKS+aZiY3AvA==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "html-escaper": "^2.0.0",
        "istanbul-lib-report": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jackspeak": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/jackspeak/-/jackspeak-3.4.3.tgz",
      "integrity": "sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==",
      "dev": true,
      "license": "BlueOak-1.0.0",
      "dependencies": {
        "@isaacs/cliui": "^8.0.2"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      },
      "optionalDependencies": {
        "@pkgjs/parseargs": "^0.11.0"
      }
    },
    "node_modules/joycon": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/joycon/-/joycon-3.1.1.tgz",
      "integrity": "sha512-34wB/Y7MW7bzjKRjUKTa46I2Z7eV62Rkhva+KkopW7Qvv/OSWBqvkSY7vusOPrNuZcUG3tApvdVgNB8POj3SPw==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/js-tokens": {
      "version": "9.0.1",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-9.0.1.tgz",
      "integrity": "sha512-mxa9E9ITFOt0ban3j6L5MpjwegGz6lBQmM1IJkWeBZGcMxto50+eWdjC/52xDbS2vy0k7vIMK0Fe2wfL9OQSpQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-schema-traverse": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/keyv": {
      "version": "4.5.4",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/kleur": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/kleur/-/kleur-3.0.3.tgz",
      "integrity": "sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/levn": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/log-symbols": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/log-symbols/-/log-symbols-6.0.0.tgz",
      "integrity": "sha512-i24m8rpwhmPIS4zscNzK6MSEhk0DUWa/8iYQWxhffV8jkI4Phvs3F+quL5xvS0gdQR0FyTCMMH33Y78dDTzzIw==",
      "license": "MIT",
      "dependencies": {
        "chalk": "^5.3.0",
        "is-unicode-supported": "^1.3.0"
      },
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/log-symbols/node_modules/is-unicode-supported": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/is-unicode-supported/-/is-unicode-supported-1.3.0.tgz",
      "integrity": "sha512-43r2mRvz+8JRIKnWJ+3j8JtjRKZ6GmjzfaE/qiBJnikNnYv/6bagRJ1kUhNk8R5EX/GkobD+r+sfxCPJsiKBLQ==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/loupe": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/loupe/-/loupe-3.2.1.tgz",
      "integrity": "sha512-CdzqowRJCeLU72bHvWqwRBBlLcMEtIvGrlvef74kMnV2AolS9Y8xUv1I0U/MNAWMhBlKIoyuEgoJ0t/bbwHbLQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/lru-cache": {
      "version": "10.4.3",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.4.3.tgz",
      "integrity": "sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/magic-string": {
      "version": "0.30.19",
      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.30.19.tgz",
      "integrity": "sha512-2N21sPY9Ws53PZvsEpVtNuSW+ScYbQdp4b9qUaL+9QkHUrGFKo56Lg9Emg5s9V/qrtNBmiR01sYhUOwu3H+VOw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.5.5"
      }
    },
    "node_modules/magicast": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/magicast/-/magicast-0.3.5.tgz",
      "integrity": "sha512-L0WhttDl+2BOsybvEOLK7fW3UA0OQ0IQ2d6Zl2x/a6vVRs3bAY0ECOSHHeL5jD+SbOpOCUEi0y1DgHEn9Qn1AQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.25.4",
        "@babel/types": "^7.25.4",
        "source-map-js": "^1.2.0"
      }
    },
    "node_modules/make-dir": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-4.0.0.tgz",
      "integrity": "sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "semver": "^7.5.3"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/make-error": {
      "version": "1.3.6",
      "resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz",
      "integrity": "sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/merge2": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/micromatch": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
      "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "braces": "^3.0.3",
        "picomatch": "^2.3.1"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/mimic-function": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/mimic-function/-/mimic-function-5.0.1.tgz",
      "integrity": "sha512-VP79XUPxV2CigYP3jWwAUFSku2aKqBH7uTAapFWCBqutsbmDo96KY5o8uh6U+/YSIn5OxJnXp73beVkpqMIGhA==",
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minimist": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
      "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/minipass": {
      "version": "7.1.2",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
      "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": ">=16 || 14 >=14.17"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/nanoid": {
      "version": "3.3.11",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/on-exit-leak-free": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/on-exit-leak-free/-/on-exit-leak-free-2.1.2.tgz",
      "integrity": "sha512-0eJJY6hXLGf1udHwfNftBqH+g73EU4B504nZeKpz1sYRKafAghwxEJunB2O7rDZkL4PGfsMVnTXZ2EjibbqcsA==",
      "license": "MIT",
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "license": "ISC",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/onetime": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/onetime/-/onetime-7.0.0.tgz",
      "integrity": "sha512-VXJjc87FScF88uafS3JllDgvAm+c/Slfz06lorj2uAY34rlUu0Nt+v8wreiImcrgAjjIHp1rXpTDlLOGw29WwQ==",
      "license": "MIT",
      "dependencies": {
        "mimic-function": "^5.0.0"
      },
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/optionator": {
      "version": "0.9.4",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/ora": {
      "version": "8.2.0",
      "resolved": "https://registry.npmjs.org/ora/-/ora-8.2.0.tgz",
      "integrity": "sha512-weP+BZ8MVNnlCm8c0Qdc1WSWq4Qn7I+9CJGm7Qali6g44e/PUzbjNqJX5NJ9ljlNMosfJvg1fKEGILklK9cwnw==",
      "license": "MIT",
      "dependencies": {
        "chalk": "^5.3.0",
        "cli-cursor": "^5.0.0",
        "cli-spinners": "^2.9.2",
        "is-interactive": "^2.0.0",
        "is-unicode-supported": "^2.0.0",
        "log-symbols": "^6.0.0",
        "stdin-discarder": "^0.2.2",
        "string-width": "^7.2.0",
        "strip-ansi": "^7.1.0"
      },
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/ora/node_modules/emoji-regex": {
      "version": "10.5.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-10.5.0.tgz",
      "integrity": "sha512-lb49vf1Xzfx080OKA0o6l8DQQpV+6Vg95zyCJX9VB/BqKYlhG7N4wgROUUHRA+ZPUefLnteQOad7z1kT2bV7bg==",
      "license": "MIT"
    },
    "node_modules/ora/node_modules/string-width": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-7.2.0.tgz",
      "integrity": "sha512-tsaTIkKW9b4N+AEj+SVA+WhJzV7/zMhcSu78mLKWSk7cXMOSHsBKFWUs0fWwq8QyK3MgJBQRX6Gbi4kYbdvGkQ==",
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^10.3.0",
        "get-east-asian-width": "^1.0.0",
        "strip-ansi": "^7.1.0"
      },
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/package-json-from-dist": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/package-json-from-dist/-/package-json-from-dist-1.0.1.tgz",
      "integrity": "sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==",
      "dev": true,
      "license": "BlueOak-1.0.0"
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-scurry": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/path-scurry/-/path-scurry-1.11.1.tgz",
      "integrity": "sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==",
      "dev": true,
      "license": "BlueOak-1.0.0",
      "dependencies": {
        "lru-cache": "^10.2.0",
        "minipass": "^5.0.0 || ^6.0.2 || ^7.0.0"
      },
      "engines": {
        "node": ">=16 || 14 >=14.18"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/pathe": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/pathe/-/pathe-2.0.3.tgz",
      "integrity": "sha512-WUjGcAqP1gQacoQe+OBJsFA7Ld4DyXuUIjZ5cc75cLHvJ7dtNsTugphxIADwspS+AraAUePCKrSVtPLFj/F88w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/pathval": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/pathval/-/pathval-2.0.1.tgz",
      "integrity": "sha512-//nshmD55c46FuFw26xV/xFAaB5HF9Xdap7HJBBnrKdAd6/GxDBaNA1870O79+9ueg61cZLSVc+OaFlfmObYVQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 14.16"
      }
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/pino": {
      "version": "9.11.0",
      "resolved": "https://registry.npmjs.org/pino/-/pino-9.11.0.tgz",
      "integrity": "sha512-+YIodBB9sxcWeR8PrXC2K3gEDyfkUuVEITOcbqrfcj+z5QW4ioIcqZfYFbrLTYLsmAwunbS7nfU/dpBB6PZc1g==",
      "license": "MIT",
      "dependencies": {
        "atomic-sleep": "^1.0.0",
        "fast-redact": "^3.1.1",
        "on-exit-leak-free": "^2.1.0",
        "pino-abstract-transport": "^2.0.0",
        "pino-std-serializers": "^7.0.0",
        "process-warning": "^5.0.0",
        "quick-format-unescaped": "^4.0.3",
        "real-require": "^0.2.0",
        "safe-stable-stringify": "^2.3.1",
        "sonic-boom": "^4.0.1",
        "thread-stream": "^3.0.0"
      },
      "bin": {
        "pino": "bin.js"
      }
    },
    "node_modules/pino-abstract-transport": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/pino-abstract-transport/-/pino-abstract-transport-2.0.0.tgz",
      "integrity": "sha512-F63x5tizV6WCh4R6RHyi2Ml+M70DNRXt/+HANowMflpgGFMAym/VKm6G7ZOQRjqN7XbGxK1Lg9t6ZrtzOaivMw==",
      "license": "MIT",
      "dependencies": {
        "split2": "^4.0.0"
      }
    },
    "node_modules/pino-pretty": {
      "version": "13.1.1",
      "resolved": "https://registry.npmjs.org/pino-pretty/-/pino-pretty-13.1.1.tgz",
      "integrity": "sha512-TNNEOg0eA0u+/WuqH0MH0Xui7uqVk9D74ESOpjtebSQYbNWJk/dIxCXIxFsNfeN53JmtWqYHP2OrIZjT/CBEnA==",
      "license": "MIT",
      "dependencies": {
        "colorette": "^2.0.7",
        "dateformat": "^4.6.3",
        "fast-copy": "^3.0.2",
        "fast-safe-stringify": "^2.1.1",
        "help-me": "^5.0.0",
        "joycon": "^3.1.1",
        "minimist": "^1.2.6",
        "on-exit-leak-free": "^2.1.0",
        "pino-abstract-transport": "^2.0.0",
        "pump": "^3.0.0",
        "secure-json-parse": "^4.0.0",
        "sonic-boom": "^4.0.1",
        "strip-json-comments": "^5.0.2"
      },
      "bin": {
        "pino-pretty": "bin.js"
      }
    },
    "node_modules/pino-pretty/node_modules/strip-json-comments": {
      "version": "5.0.3",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-5.0.3.tgz",
      "integrity": "sha512-1tB5mhVo7U+ETBKNf92xT4hrQa3pm0MZ0PQvuDnWgAAGHDsfp4lPSpiS6psrSiet87wyGPh9ft6wmhOMQ0hDiw==",
      "license": "MIT",
      "engines": {
        "node": ">=14.16"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/pino-std-serializers": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/pino-std-serializers/-/pino-std-serializers-7.0.0.tgz",
      "integrity": "sha512-e906FRY0+tV27iq4juKzSYPbUj2do2X2JX4EzSca1631EB2QJQUqGbDuERal7LCtOpxl6x3+nvo9NPZcmjkiFA==",
      "license": "MIT"
    },
    "node_modules/postcss": {
      "version": "8.5.6",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.6.tgz",
      "integrity": "sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.11",
        "picocolors": "^1.1.1",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/prelude-ls": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/prettier": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/prettier/-/prettier-3.6.2.tgz",
      "integrity": "sha512-I7AIg5boAr5R0FFtJ6rCfD+LFsWHp81dolrFD8S79U9tb8Az2nGrJncnMSnys+bpQJfRUzqs9hnA81OAA3hCuQ==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "prettier": "bin/prettier.cjs"
      },
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/prettier/prettier?sponsor=1"
      }
    },
    "node_modules/process-warning": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/process-warning/-/process-warning-5.0.0.tgz",
      "integrity": "sha512-a39t9ApHNx2L4+HBnQKqxxHNs1r7KF+Intd8Q/g1bUh6q0WIp9voPXJ/x0j+ZL45KF1pJd9+q2jLIRMfvEshkA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/fastify"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/fastify"
        }
      ],
      "license": "MIT"
    },
    "node_modules/prompts": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/prompts/-/prompts-2.4.2.tgz",
      "integrity": "sha512-NxNv/kLguCA7p3jE8oL2aEBsrJWgAakBpgmgK6lpPWV+WuOmY6r2/zbAVnP+T8bQlA0nzHXSJSJW0Hq7ylaD2Q==",
      "license": "MIT",
      "dependencies": {
        "kleur": "^3.0.3",
        "sisteransi": "^1.0.5"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/pump": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/pump/-/pump-3.0.3.tgz",
      "integrity": "sha512-todwxLMY7/heScKmntwQG8CXVkWUOdYxIvY2s0VWAAMh/nd8SoYiRaKjlr7+iCs984f2P8zvrfWcDDYVb73NfA==",
      "license": "MIT",
      "dependencies": {
        "end-of-stream": "^1.1.0",
        "once": "^1.3.1"
      }
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/queue-microtask": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/quick-format-unescaped": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/quick-format-unescaped/-/quick-format-unescaped-4.0.4.tgz",
      "integrity": "sha512-tYC1Q1hgyRuHgloV/YXs2w15unPVh8qfu/qCTfhTYamaw7fyhumKa2yGpdSo87vY32rIclj+4fWYQXUMs9EHvg==",
      "license": "MIT"
    },
    "node_modules/real-require": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/real-require/-/real-require-0.2.0.tgz",
      "integrity": "sha512-57frrGM/OCTLqLOAh0mhVA9VBMHd+9U7Zb2THMGdBUoZVOtGbJzjxsYGDJ3A9AYYCP4hn6y1TVbaOfzWtm5GFg==",
      "license": "MIT",
      "engines": {
        "node": ">= 12.13.0"
      }
    },
    "node_modules/require-from-string": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/require-from-string/-/require-from-string-2.0.2.tgz",
      "integrity": "sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/restore-cursor": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/restore-cursor/-/restore-cursor-5.1.0.tgz",
      "integrity": "sha512-oMA2dcrw6u0YfxJQXm342bFKX/E4sG9rbTzO9ptUcR/e8A33cHuvStiYOwH7fszkZlZ1z/ta9AAoPk2F4qIOHA==",
      "license": "MIT",
      "dependencies": {
        "onetime": "^7.0.0",
        "signal-exit": "^4.1.0"
      },
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/reusify": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.1.0.tgz",
      "integrity": "sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "iojs": ">=1.0.0",
        "node": ">=0.10.0"
      }
    },
    "node_modules/rollup": {
      "version": "4.52.3",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.52.3.tgz",
      "integrity": "sha512-RIDh866U8agLgiIcdpB+COKnlCreHJLfIhWC3LVflku5YHfpnsIKigRZeFfMfCc4dVcqNVfQQ5gO/afOck064A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/estree": "1.0.8"
      },
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
      },
      "optionalDependencies": {
        "@rollup/rollup-android-arm-eabi": "4.52.3",
        "@rollup/rollup-android-arm64": "4.52.3",
        "@rollup/rollup-darwin-arm64": "4.52.3",
        "@rollup/rollup-darwin-x64": "4.52.3",
        "@rollup/rollup-freebsd-arm64": "4.52.3",
        "@rollup/rollup-freebsd-x64": "4.52.3",
        "@rollup/rollup-linux-arm-gnueabihf": "4.52.3",
        "@rollup/rollup-linux-arm-musleabihf": "4.52.3",
        "@rollup/rollup-linux-arm64-gnu": "4.52.3",
        "@rollup/rollup-linux-arm64-musl": "4.52.3",
        "@rollup/rollup-linux-loong64-gnu": "4.52.3",
        "@rollup/rollup-linux-ppc64-gnu": "4.52.3",
        "@rollup/rollup-linux-riscv64-gnu": "4.52.3",
        "@rollup/rollup-linux-riscv64-musl": "4.52.3",
        "@rollup/rollup-linux-s390x-gnu": "4.52.3",
        "@rollup/rollup-linux-x64-gnu": "4.52.3",
        "@rollup/rollup-linux-x64-musl": "4.52.3",
        "@rollup/rollup-openharmony-arm64": "4.52.3",
        "@rollup/rollup-win32-arm64-msvc": "4.52.3",
        "@rollup/rollup-win32-ia32-msvc": "4.52.3",
        "@rollup/rollup-win32-x64-gnu": "4.52.3",
        "@rollup/rollup-win32-x64-msvc": "4.52.3",
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/run-parallel": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "queue-microtask": "^1.2.2"
      }
    },
    "node_modules/safe-stable-stringify": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/safe-stable-stringify/-/safe-stable-stringify-2.5.0.tgz",
      "integrity": "sha512-b3rppTKm9T+PsVCBEOUR46GWI7fdOs00VKZ1+9c1EWDaDMvjQc6tUwuFyIprgGgTcWoVHSKrU8H31ZHA2e0RHA==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/secure-json-parse": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/secure-json-parse/-/secure-json-parse-4.0.0.tgz",
      "integrity": "sha512-dxtLJO6sc35jWidmLxo7ij+Eg48PM/kleBsxpC8QJE0qJICe+KawkDQmvCMZUr9u7WKVHgMW6vy3fQ7zMiFZMA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/fastify"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/fastify"
        }
      ],
      "license": "BSD-3-Clause"
    },
    "node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/siginfo": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/siginfo/-/siginfo-2.0.0.tgz",
      "integrity": "sha512-ybx0WO1/8bSBLEWXZvEd7gMW3Sn3JFlW3TvX1nREbDLRNQNaeNN8WK0meBwPdAaOI7TtRRRJn/Es1zhrrCHu7g==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/signal-exit": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
      "integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
      "license": "ISC",
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/simple-git": {
      "version": "3.28.0",
      "resolved": "https://registry.npmjs.org/simple-git/-/simple-git-3.28.0.tgz",
      "integrity": "sha512-Rs/vQRwsn1ILH1oBUy8NucJlXmnnLeLCfcvbSehkPzbv3wwoFWIdtfd6Ndo6ZPhlPsCZ60CPI4rxurnwAa+a2w==",
      "license": "MIT",
      "dependencies": {
        "@kwsites/file-exists": "^1.1.1",
        "@kwsites/promise-deferred": "^1.1.1",
        "debug": "^4.4.0"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/steveukx/git-js?sponsor=1"
      }
    },
    "node_modules/sisteransi": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/sisteransi/-/sisteransi-1.0.5.tgz",
      "integrity": "sha512-bLGGlR1QxBcynn2d5YmDX4MGjlZvy2MRBDRNHLJ8VI6l6+9FUiyTFNJ0IveOSP0bcXgVDPRcfGqA0pjaqUpfVg==",
      "license": "MIT"
    },
    "node_modules/sonic-boom": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/sonic-boom/-/sonic-boom-4.2.0.tgz",
      "integrity": "sha512-INb7TM37/mAcsGmc9hyyI6+QR3rR1zVRu36B0NeGXKnOOLiZOfER5SA+N7X7k3yUYRzLWafduTDvJAfDswwEww==",
      "license": "MIT",
      "dependencies": {
        "atomic-sleep": "^1.0.0"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/split2": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/split2/-/split2-4.2.0.tgz",
      "integrity": "sha512-UcjcJOWknrNkF6PLX83qcHM6KHgVKNkV62Y8a5uYDVv9ydGQVwAHMKqHdJje1VTWpljG0WYpCDhrCdAOYH4TWg==",
      "license": "ISC",
      "engines": {
        "node": ">= 10.x"
      }
    },
    "node_modules/stackback": {
      "version": "0.0.2",
      "resolved": "https://registry.npmjs.org/stackback/-/stackback-0.0.2.tgz",
      "integrity": "sha512-1XMJE5fQo1jGH6Y/7ebnwPOBEkIEnT4QF32d5R1+VXdXveM0IBMJt8zfaxX1P3QhVwrYe+576+jkANtSS2mBbw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/std-env": {
      "version": "3.9.0",
      "resolved": "https://registry.npmjs.org/std-env/-/std-env-3.9.0.tgz",
      "integrity": "sha512-UGvjygr6F6tpH7o2qyqR6QYpwraIjKSdtzyBdyytFOHmPZY917kwdwLG0RbOjWOnKmnm3PeHjaoLLMie7kPLQw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/stdin-discarder": {
      "version": "0.2.2",
      "resolved": "https://registry.npmjs.org/stdin-discarder/-/stdin-discarder-0.2.2.tgz",
      "integrity": "sha512-UhDfHmA92YAlNnCfhmq0VeNL5bDbiZGg7sZ2IvPsXubGkiNa9EC+tUTsjBRsYUAz87btI6/1wf4XoVvQ3uRnmQ==",
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/string-width": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
      "integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eastasianwidth": "^0.2.0",
        "emoji-regex": "^9.2.2",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/string-width-cjs": {
      "name": "string-width",
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/string-width-cjs/node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/string-width-cjs/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/string-width-cjs/node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi": {
      "version": "7.1.2",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.2.tgz",
      "integrity": "sha512-gmBGslpoQJtgnMAvOVqGZpEz9dyoKTCzy2nfz/n8aIFhN/jCE/rCmcxabB6jOOHV+0WNnylOxaxBQPSvcWklhA==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^6.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
      }
    },
    "node_modules/strip-ansi-cjs": {
      "name": "strip-ansi",
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi-cjs/node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/strip-literal": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/strip-literal/-/strip-literal-3.1.0.tgz",
      "integrity": "sha512-8r3mkIM/2+PpjHoOtiAW8Rg3jJLHaV7xPwG+YRGrv6FP0wwk/toTpATxWYOW0BKdWwl82VT2tFYi5DlROa0Mxg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "js-tokens": "^9.0.1"
      },
      "funding": {
        "url": "https://github.com/sponsors/antfu"
      }
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/test-exclude": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/test-exclude/-/test-exclude-7.0.1.tgz",
      "integrity": "sha512-pFYqmTw68LXVjeWJMST4+borgQP2AyMNbg1BpZh9LbyhUeNkeaPF9gzfPGUAnSMV3qPYdWUwDIjjCLiSDOl7vg==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "@istanbuljs/schema": "^0.1.2",
        "glob": "^10.4.1",
        "minimatch": "^9.0.4"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/test-exclude/node_modules/brace-expansion": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/test-exclude/node_modules/minimatch": {
      "version": "9.0.5",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/thread-stream": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/thread-stream/-/thread-stream-3.1.0.tgz",
      "integrity": "sha512-OqyPZ9u96VohAyMfJykzmivOrY2wfMSf3C5TtFJVgN+Hm6aj+voFhlK+kZEIv2FBh1X6Xp3DlnCOfEQ3B2J86A==",
      "license": "MIT",
      "dependencies": {
        "real-require": "^0.2.0"
      }
    },
    "node_modules/tinybench": {
      "version": "2.9.0",
      "resolved": "https://registry.npmjs.org/tinybench/-/tinybench-2.9.0.tgz",
      "integrity": "sha512-0+DUvqWMValLmha6lr4kD8iAMK1HzV0/aKnCtWb9v9641TnP/MFb7Pc2bxoxQjTXAErryXVgUOfv2YqNllqGeg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/tinycolor2": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/tinycolor2/-/tinycolor2-1.6.0.tgz",
      "integrity": "sha512-XPaBkWQJdsf3pLKJV9p4qN/S+fm2Oj8AIPo1BTUhg5oxkvm9+SVEGFdhyOz7tTdUTfvxMiAs4sp6/eZO2Ew+pw==",
      "license": "MIT"
    },
    "node_modules/tinyexec": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/tinyexec/-/tinyexec-0.3.2.tgz",
      "integrity": "sha512-KQQR9yN7R5+OSwaK0XQoj22pwHoTlgYqmUscPYoknOoWCWfj/5/ABTMRi69FrKU5ffPVh5QcFikpWJI/P1ocHA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/tinyglobby": {
      "version": "0.2.15",
      "resolved": "https://registry.npmjs.org/tinyglobby/-/tinyglobby-0.2.15.tgz",
      "integrity": "sha512-j2Zq4NyQYG5XMST4cbs02Ak8iJUdxRM0XI5QyxXuZOzKOINmWurp3smXu3y5wDcJrptwpSjgXHzIQxR0omXljQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fdir": "^6.5.0",
        "picomatch": "^4.0.3"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/SuperchupuDev"
      }
    },
    "node_modules/tinyglobby/node_modules/fdir": {
      "version": "6.5.0",
      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.5.0.tgz",
      "integrity": "sha512-tIbYtZbucOs0BRGqPJkshJUYdL+SDH7dVM8gjy+ERp3WAUjLEFJE+02kanyHtwjWOnwrKYBiwAmM0p4kLJAnXg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12.0.0"
      },
      "peerDependencies": {
        "picomatch": "^3 || ^4"
      },
      "peerDependenciesMeta": {
        "picomatch": {
          "optional": true
        }
      }
    },
    "node_modules/tinyglobby/node_modules/picomatch": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.3.tgz",
      "integrity": "sha512-5gTmgEY/sqK6gFXLIsQNH19lWb4ebPDLA4SdLP7dsWkIXHWlG66oPuVvXSGFPppYZz8ZDZq0dYYrbHfBCVUb1Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/tinygradient": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/tinygradient/-/tinygradient-1.1.5.tgz",
      "integrity": "sha512-8nIfc2vgQ4TeLnk2lFj4tRLvvJwEfQuabdsmvDdQPT0xlk9TaNtpGd6nNRxXoK6vQhN6RSzj+Cnp5tTQmpxmbw==",
      "license": "MIT",
      "dependencies": {
        "@types/tinycolor2": "^1.4.0",
        "tinycolor2": "^1.0.0"
      }
    },
    "node_modules/tinypool": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/tinypool/-/tinypool-1.1.1.tgz",
      "integrity": "sha512-Zba82s87IFq9A9XmjiX5uZA/ARWDrB03OHlq+Vw1fSdt0I+4/Kutwy8BP4Y/y/aORMo61FQ0vIb5j44vSo5Pkg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.0.0 || >=20.0.0"
      }
    },
    "node_modules/tinyrainbow": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/tinyrainbow/-/tinyrainbow-2.0.0.tgz",
      "integrity": "sha512-op4nsTR47R6p0vMUUoYl/a+ljLFVtlfaXkLQmqfLR1qHma1h/ysYk4hEXZ880bf2CYgTskvTa/e196Vd5dDQXw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/tinyspy": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/tinyspy/-/tinyspy-4.0.4.tgz",
      "integrity": "sha512-azl+t0z7pw/z958Gy9svOTuzqIk6xq+NSheJzn5MMWtWTFywIacg2wUlzKFGtt3cthx0r2SxMK0yzJOR0IES7Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/ts-api-utils": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/ts-api-utils/-/ts-api-utils-2.1.0.tgz",
      "integrity": "sha512-CUgTZL1irw8u29bzrOD/nH85jqyc74D6SshFgujOIA7osm2Rz7dYH77agkx7H4FBNxDq7Cjf+IjaX/8zwFW+ZQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18.12"
      },
      "peerDependencies": {
        "typescript": ">=4.8.4"
      }
    },
    "node_modules/ts-node": {
      "version": "10.9.2",
      "resolved": "https://registry.npmjs.org/ts-node/-/ts-node-10.9.2.tgz",
      "integrity": "sha512-f0FFpIdcHgn8zcPSbf1dRevwt047YMnaiJM3u2w2RewrB+fob/zePZcrOyQoLMMO7aBIddLcQIEK5dYjkLnGrQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@cspotcode/source-map-support": "^0.8.0",
        "@tsconfig/node10": "^1.0.7",
        "@tsconfig/node12": "^1.0.7",
        "@tsconfig/node14": "^1.0.0",
        "@tsconfig/node16": "^1.0.2",
        "acorn": "^8.4.1",
        "acorn-walk": "^8.1.1",
        "arg": "^4.1.0",
        "create-require": "^1.1.0",
        "diff": "^4.0.1",
        "make-error": "^1.1.1",
        "v8-compile-cache-lib": "^3.0.1",
        "yn": "3.1.1"
      },
      "bin": {
        "ts-node": "dist/bin.js",
        "ts-node-cwd": "dist/bin-cwd.js",
        "ts-node-esm": "dist/bin-esm.js",
        "ts-node-script": "dist/bin-script.js",
        "ts-node-transpile-only": "dist/bin-transpile.js",
        "ts-script": "dist/bin-script-deprecated.js"
      },
      "peerDependencies": {
        "@swc/core": ">=1.2.50",
        "@swc/wasm": ">=1.2.50",
        "@types/node": "*",
        "typescript": ">=2.7"
      },
      "peerDependenciesMeta": {
        "@swc/core": {
          "optional": true
        },
        "@swc/wasm": {
          "optional": true
        }
      }
    },
    "node_modules/ts-node/node_modules/diff": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/diff/-/diff-4.0.2.tgz",
      "integrity": "sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.3.1"
      }
    },
    "node_modules/type-check": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/typescript": {
      "version": "5.9.2",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.9.2.tgz",
      "integrity": "sha512-CWBzXQrc/qOkhidw1OzBTQuYRbfyxDXJMVJ1XNwUHGROVmuaeiEm3OslpZ1RV96d7SKKjZKrSJu3+t/xlw3R9A==",
      "dev": true,
      "license": "Apache-2.0",
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/typescript-eslint": {
      "version": "8.44.1",
      "resolved": "https://registry.npmjs.org/typescript-eslint/-/typescript-eslint-8.44.1.tgz",
      "integrity": "sha512-0ws8uWGrUVTjEeN2OM4K1pLKHK/4NiNP/vz6ns+LjT/6sqpaYzIVFajZb1fj/IDwpsrrHb3Jy0Qm5u9CPcKaeg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/eslint-plugin": "8.44.1",
        "@typescript-eslint/parser": "8.44.1",
        "@typescript-eslint/typescript-estree": "8.44.1",
        "@typescript-eslint/utils": "8.44.1"
      },
      "engines": {
        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^8.57.0 || ^9.0.0",
        "typescript": ">=4.8.4 <6.0.0"
      }
    },
    "node_modules/undici-types": {
      "version": "6.21.0",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.21.0.tgz",
      "integrity": "sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/v8-compile-cache-lib": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.1.tgz",
      "integrity": "sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/vite": {
      "version": "7.1.7",
      "resolved": "https://registry.npmjs.org/vite/-/vite-7.1.7.tgz",
      "integrity": "sha512-VbA8ScMvAISJNJVbRDTJdCwqQoAareR/wutevKanhR2/1EkoXVZVkkORaYm/tNVCjP/UDTKtcw3bAkwOUdedmA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "esbuild": "^0.25.0",
        "fdir": "^6.5.0",
        "picomatch": "^4.0.3",
        "postcss": "^8.5.6",
        "rollup": "^4.43.0",
        "tinyglobby": "^0.2.15"
      },
      "bin": {
        "vite": "bin/vite.js"
      },
      "engines": {
        "node": "^20.19.0 || >=22.12.0"
      },
      "funding": {
        "url": "https://github.com/vitejs/vite?sponsor=1"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.3"
      },
      "peerDependencies": {
        "@types/node": "^20.19.0 || >=22.12.0",
        "jiti": ">=1.21.0",
        "less": "^4.0.0",
        "lightningcss": "^1.21.0",
        "sass": "^1.70.0",
        "sass-embedded": "^1.70.0",
        "stylus": ">=0.54.8",
        "sugarss": "^5.0.0",
        "terser": "^5.16.0",
        "tsx": "^4.8.1",
        "yaml": "^2.4.2"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "jiti": {
          "optional": true
        },
        "less": {
          "optional": true
        },
        "lightningcss": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "sass-embedded": {
          "optional": true
        },
        "stylus": {
          "optional": true
        },
        "sugarss": {
          "optional": true
        },
        "terser": {
          "optional": true
        },
        "tsx": {
          "optional": true
        },
        "yaml": {
          "optional": true
        }
      }
    },
    "node_modules/vite-node": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/vite-node/-/vite-node-3.2.4.tgz",
      "integrity": "sha512-EbKSKh+bh1E1IFxeO0pg1n4dvoOTt0UDiXMd/qn++r98+jPO1xtJilvXldeuQ8giIB5IkpjCgMleHMNEsGH6pg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "cac": "^6.7.14",
        "debug": "^4.4.1",
        "es-module-lexer": "^1.7.0",
        "pathe": "^2.0.3",
        "vite": "^5.0.0 || ^6.0.0 || ^7.0.0-0"
      },
      "bin": {
        "vite-node": "vite-node.mjs"
      },
      "engines": {
        "node": "^18.0.0 || ^20.0.0 || >=22.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/vitest"
      }
    },
    "node_modules/vite/node_modules/fdir": {
      "version": "6.5.0",
      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.5.0.tgz",
      "integrity": "sha512-tIbYtZbucOs0BRGqPJkshJUYdL+SDH7dVM8gjy+ERp3WAUjLEFJE+02kanyHtwjWOnwrKYBiwAmM0p4kLJAnXg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12.0.0"
      },
      "peerDependencies": {
        "picomatch": "^3 || ^4"
      },
      "peerDependenciesMeta": {
        "picomatch": {
          "optional": true
        }
      }
    },
    "node_modules/vite/node_modules/picomatch": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.3.tgz",
      "integrity": "sha512-5gTmgEY/sqK6gFXLIsQNH19lWb4ebPDLA4SdLP7dsWkIXHWlG66oPuVvXSGFPppYZz8ZDZq0dYYrbHfBCVUb1Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/vitest": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/vitest/-/vitest-3.2.4.tgz",
      "integrity": "sha512-LUCP5ev3GURDysTWiP47wRRUpLKMOfPh+yKTx3kVIEiu5KOMeqzpnYNsKyOoVrULivR8tLcks4+lga33Whn90A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/chai": "^5.2.2",
        "@vitest/expect": "3.2.4",
        "@vitest/mocker": "3.2.4",
        "@vitest/pretty-format": "^3.2.4",
        "@vitest/runner": "3.2.4",
        "@vitest/snapshot": "3.2.4",
        "@vitest/spy": "3.2.4",
        "@vitest/utils": "3.2.4",
        "chai": "^5.2.0",
        "debug": "^4.4.1",
        "expect-type": "^1.2.1",
        "magic-string": "^0.30.17",
        "pathe": "^2.0.3",
        "picomatch": "^4.0.2",
        "std-env": "^3.9.0",
        "tinybench": "^2.9.0",
        "tinyexec": "^0.3.2",
        "tinyglobby": "^0.2.14",
        "tinypool": "^1.1.1",
        "tinyrainbow": "^2.0.0",
        "vite": "^5.0.0 || ^6.0.0 || ^7.0.0-0",
        "vite-node": "3.2.4",
        "why-is-node-running": "^2.3.0"
      },
      "bin": {
        "vitest": "vitest.mjs"
      },
      "engines": {
        "node": "^18.0.0 || ^20.0.0 || >=22.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/vitest"
      },
      "peerDependencies": {
        "@edge-runtime/vm": "*",
        "@types/debug": "^4.1.12",
        "@types/node": "^18.0.0 || ^20.0.0 || >=22.0.0",
        "@vitest/browser": "3.2.4",
        "@vitest/ui": "3.2.4",
        "happy-dom": "*",
        "jsdom": "*"
      },
      "peerDependenciesMeta": {
        "@edge-runtime/vm": {
          "optional": true
        },
        "@types/debug": {
          "optional": true
        },
        "@types/node": {
          "optional": true
        },
        "@vitest/browser": {
          "optional": true
        },
        "@vitest/ui": {
          "optional": true
        },
        "happy-dom": {
          "optional": true
        },
        "jsdom": {
          "optional": true
        }
      }
    },
    "node_modules/vitest/node_modules/picomatch": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.3.tgz",
      "integrity": "sha512-5gTmgEY/sqK6gFXLIsQNH19lWb4ebPDLA4SdLP7dsWkIXHWlG66oPuVvXSGFPppYZz8ZDZq0dYYrbHfBCVUb1Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/why-is-node-running": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/why-is-node-running/-/why-is-node-running-2.3.0.tgz",
      "integrity": "sha512-hUrmaWBdVDcxvYqnyh09zunKzROWjbZTiNy8dBEjkS7ehEDQibXJ7XvlmtbwuTclUiIyN+CyXQD4Vmko8fNm8w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "siginfo": "^2.0.0",
        "stackback": "0.0.2"
      },
      "bin": {
        "why-is-node-running": "cli.js"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/wrap-ansi": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.1.0.tgz",
      "integrity": "sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^6.1.0",
        "string-width": "^5.0.1",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrap-ansi-cjs": {
      "name": "wrap-ansi",
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrap-ansi-cjs/node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/wrap-ansi-cjs/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/wrap-ansi-cjs/node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/wrap-ansi-cjs/node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/wrap-ansi/node_modules/ansi-styles": {
      "version": "6.2.3",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.3.tgz",
      "integrity": "sha512-4Dj6M28JB+oAH8kFkTLUo+a2jwOFkuqb3yucU0CANcRRUbxS0cP0nZYCGjcc3BNXwRIsUVmDGgzawme7zvJHvg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
      "license": "ISC"
    },
    "node_modules/yn": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yn/-/yn-3.1.1.tgz",
      "integrity": "sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/zod": {
      "version": "3.25.76",
      "resolved": "https://registry.npmjs.org/zod/-/zod-3.25.76.tgz",
      "integrity": "sha512-gzUt/qt81nXsFGKIFcC3YnfEAx5NkunCfnDlvuBSSFS02bcXu4Lmea0AFIUwbLWxWPx3d9p8S5QoaujKcNQxcQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/colinhacks"
      }
    }
  }
}

// ── FILE: package.json
{
  "name": "forge",
  "version": "0.1.0",
  "description": "Forge CLI - AI coding assistant powered by xAI Grok",
  "type": "module",
  "bin": {
    "forge": "bin/forge"
  },
  "scripts": {
    "build": "tsc",
    "start": "node dist/cli.js",
    "lint": "eslint . --ext .ts,.tsx,.js,.cjs,.mjs",
    "test": "vitest",
    "test:run": "vitest run",
    "test:coverage": "vitest run --coverage",
    "test:watch": "vitest --watch",
    "release": "npm publish"
  },
  "devDependencies": {
    "@eslint/js": "^9.36.0",
    "@types/node": "^22.0.0",
    "@types/prompts": "^2.4.9",
    "@vitest/coverage-v8": "^3.2.4",
    "ajv": "^8.17.1",
    "eslint": "^9.36.0",
    "prettier": "^3.3.0",
    "ts-node": "^10.9.2",
    "typescript": "^5.4.0",
    "typescript-eslint": "^8.44.1",
    "vitest": "^3.2.4"
  },
  "dependencies": {
    "chalk": "^5.3.0",
    "cli-spinners": "^2.9.2",
    "commander": "^12.1.0",
    "diff": "^5.2.0",
    "diff-match-patch": "^1.0.5",
    "diff3": "^0.0.3",
    "dotenv": "^16.6.1",
    "figlet": "^1.7.0",
    "gradient-string": "^3.0.0",
    "ora": "^8.0.1",
    "pino": "^9.0.0",
    "pino-pretty": "^13.1.1",
    "prompts": "^2.4.2",
    "simple-git": "^3.25.0",
    "zod": "^3.23.8"
  }
}

// ── FILE: README.md
# Forge CLI

A powerful AI coding assistant powered by xAI Grok, designed to help developers with code analysis, generation, and automation.

## Features

- 🤖 **AI-Powered Code Assistance**: Uses xAI Grok for intelligent code analysis and generation
- 🛠️ **Tool Integration**: Built-in tools for file operations, git, command execution, and more
- 🔒 **Safety First**: Multi-level approval system with intelligent heuristics
- 📝 **Session Persistence**: Automatic logging of all interactions for audit and debugging
- 🧪 **Verification**: Built-in linting and testing integration
- ⚡ **Fast & Efficient**: Optimized for developer workflows

## Installation

### Prerequisites

- Node.js 18+ 
- Git (for version control operations)
- xAI API key or OpenRouter API key

### Install from npm

```bash
npm install -g @savant-ai/forge
```

### Install from source

```bash
git clone https://github.com/savant-ai/forge.git
cd forge
npm install
npm run build
npm link
```

## Quick Start

### 1. Authentication

Set up your API key using the built-in auth command:

```bash
# For xAI (recommended)
forge auth login

# Or set environment variables
export XAI_API_KEY="your-api-key"
export FORGE_PROVIDER="xai"
```

### 2. Basic Usage

```bash
# Interactive chat session
forge chat

# One-shot question
forge ask "explain this code" --verify lint

# Summarize changes
forge changes

# Check environment
forge env doctor
```

## Commands

### `forge chat`

Start an interactive chat session with the AI assistant.

**Options:**
- `--trace <level>`: Set reasoning visibility (`none`, `plan`, `verbose`)
- `--verify <mode>`: Enable verification (`none`, `lint`, `test`, `both`)
- `--auto`: Auto-approve all tool actions
- `--safe`: Require approval for all writes and commands

**Example:**
```bash
forge chat --trace verbose --verify both
```

### `forge ask <prompt>`

Ask a one-shot question to the AI assistant.

**Options:** Same as `forge chat`

**Example:**
```bash
forge ask "refactor this function to use async/await" --verify lint
```

### `forge changes`

Summarize code changes from your current working tree.

**Options:**
- `--trace <level>`: Set reasoning visibility

**Example:**
```bash
forge changes --trace plan
```

### `forge env doctor`

Check your environment configuration and test API connectivity.

**Example:**
```bash
forge env doctor
```

### `forge auth`

Manage authentication credentials.

**Subcommands:**
- `login`: Log in with an API key
- `logout`: Remove stored credentials
- `info`: Show current authentication status

**Example:**
```bash
forge auth login
forge auth info
```

## Configuration

Forge uses a hierarchical configuration system:

1. **Environment Variables** (highest priority)
2. **`.forge/config.json`** (project-specific)
3. **Default values** (lowest priority)

### Environment Variables

```bash
# Provider configuration
export FORGE_PROVIDER="xai"  # or "openrouter"
export XAI_API_KEY="your-xai-key"
export OPENROUTER_API_KEY="your-openrouter-key"

# Model configuration
export GROK_MODEL_ID="grok-code-fast-1"
export GROK_BASE_URL="https://api.x.ai/v1"

# Tool configuration
export FORGE_CMD_TIMEOUT_MS="300000"  # 5 minutes
export FORGE_TOOL_STDIO_LIMIT="1000000"  # 1MB

# Logging
export LOG_LEVEL="info"  # trace, debug, info, warn, error, fatal
```

### Configuration File

Create `.forge/config.json` in your project root:

```json
{
  "provider": "xai",
  "model": "grok-code-fast-1",
  "baseUrl": "https://api.x.ai/v1",
  "apiKey": "your-api-key",
  "tokensPanel": true,
  "defaultTrace": "plan",
  "render": {
    "mode": "append"
  }
}
```

## Safety & Security

Forge implements multiple safety layers:

### Approval Levels

- **`safe`**: Require approval for all file writes and command execution
- **`balanced`**: Require approval for potentially destructive operations
- **`auto`**: Automatically approve all operations (use with caution)

### Input Validation

- All file paths are validated to prevent directory traversal
- Git commands use proper argument passing to prevent injection
- File sizes are limited to prevent resource exhaustion
- API keys and sensitive data are masked in logs

### Verification

- **Linting**: Automatically runs ESLint when available
- **Testing**: Runs test suites when configured
- **Both**: Runs both linting and testing

## Tools

Forge includes several built-in tools:

### File Operations
- `open_file`: Read file contents with truncation for large files
- `write_file`: Write files with automatic directory creation
- `apply_patch`: Apply unified diff patches using git

### Git Operations
- `git commit`: Create commits with message validation
- `git create_branch`: Create new branches with name validation

### Command Execution
- `run`: Execute shell commands with timeout and output limits

## Session Logging

All interactions are automatically logged to `.forge/sessions/` for:
- **Audit trails**: Track what the AI did
- **Debugging**: Understand tool execution
- **Learning**: Improve future interactions

Logs are stored in JSONL format with timestamps and metadata.

## Development

### Running Tests

```bash
# Run all tests
npm test

# Run tests with coverage
npm run test:coverage

# Watch mode
npm run test:watch
```

### Building

```bash
npm run build
```

### Linting

```bash
npm run lint
```

## Troubleshooting

### Common Issues

**"API key not found"**
- Run `forge auth login` to set up authentication
- Check environment variables with `forge env doctor`

**"Command execution failed"**
- Ensure you have the required tools installed (git, etc.)
- Check file permissions
- Try running with `--safe` mode for more control

**"File not found"**
- Verify file paths are correct
- Check if files exist in the current working directory
- Use relative paths from the project root

### Debug Mode

Enable debug logging for more detailed output:

```bash
export LOG_LEVEL="debug"
forge chat
```

### Getting Help

- Check the logs in `.forge/sessions/`
- Run `forge env doctor` to verify configuration
- Use `--trace verbose` for detailed AI reasoning

## Contributing

We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.

### Development Setup

1. Fork the repository
2. Clone your fork
3. Install dependencies: `npm install`
4. Run tests: `npm test`
5. Make your changes
6. Submit a pull request

## License

MIT License - see [LICENSE](LICENSE) for details.

## Support

- **Issues**: [GitHub Issues](https://github.com/savant-ai/forge/issues)
- **Discussions**: [GitHub Discussions](https://github.com/savant-ai/forge/discussions)
- **Documentation**: [GitHub Wiki](https://github.com/savant-ai/forge/wiki)

---

Made with ❤️ by the Savant AI team

// ── FILE: scripts\smoke.sh
# scripts/smoke.sh
set -euo pipefail
npm ci
npm run build

echo "== env/auth =="
npx forge env doctor
npx forge auth test

echo "== memory =="
mkdir -p .forge
echo "TAG: SENTINEL42" >> .forge/MEMORY.md
npm run build
node -e "import('./dist/core/prompts/system.js').then(m=>{const ok=m.systemPrompt('plan').includes('SENTINEL42'); if(!ok) process.exit(2); console.log('MEMORY_OK');});"

echo "== chat/create file =="
rm -f test.txt
printf "you ... create a file named test.txt\n" | npx forge chat --verify both --trace plan
test -f test.txt

echo "== changes summarizer =="
echo "// tweak" >> test.txt
npx forge changes

echo "== lint =="
npm run lint

echo "ALL GREEN"

// ── FILE: src\cli.ts
#!/usr/bin/env node
import { Command } from "commander";
import prompts from "prompts";
import * as fs from "node:fs";
import * as path from "node:path";

import { env } from "./config/env.js";
import { ensureConfigDir, loadProfile } from "./config/profile.js";
import { Agent } from "./core/agent.js";
import { GrokProvider } from "./providers/grok.js";
import { summarizeChangesWithModel } from "./core/flows/summarize_changes.js";
import { renderTokensPanel, renderWelcomeBanner, renderUserPrompt, renderAssistantResponse, renderSeparator } from "./ui/render.js";
import { startThinkingAnimation, startProcessingAnimation, stopAnimation, succeedAnimation, failAnimation } from "./ui/animations.js";
import { registerAuthXaiCommands } from "./commands/auth-xai.js";
import { registerPluginCommands } from "./commands/plugins.js";
import { log, setLogLevel } from "./core/logger.js";
import { bundleProject } from "./core/tools/bundle.js";
import { createPullRequest } from "./core/tools/pr.js";

const program = new Command();
program.name("forge").description("Grok-powered engineering copilot");

/** chat (interactive) */
program
  .command("chat")
  .description("Interactive chat session with the model")
  .option("--trace <level>", "reasoning visibility: none|plan|verbose", "plan")
  .option("--verify <mode>", "none|lint|test|both", "none")
  .option("--auto", "auto-approve tool actions", false)
  .option("--safe", "require approval for writes & commands", false)
  .option("--log", "enable detailed logging", false)
  .option("--plan", "plan first, then confirm and execute", false)
  .action(async (opts) => {
    // Set logging level based on --log flag
    if (opts.log) {
      setLogLevel("debug");
    } else {
      setLogLevel("warn"); // Only show warnings and errors by default
    }
    
    log.info("Starting interactive chat session", { options: opts });
    ensureConfigDir();
    const agent = new Agent({
      trace: opts.trace,
      approvalLevel: opts.auto ? "auto" : opts.safe ? "safe" : "balanced",
      verifyMode: opts.verify,
      execute: true, // Enable execution by default
      planFirst: !!opts.plan,
    });

    // Show welcome banner with startup animation
    console.log(renderWelcomeBanner());
    
    // Add a brief startup animation
    startProcessingAnimation();
    await new Promise(resolve => setTimeout(resolve, 1500)); // 1.5 second delay
    stopAnimation();
    succeedAnimation("Ready to assist!");

    const onInput = async () => {
      const { msg } = await prompts({
        type: "text",
        name: "msg",
        message: "💬 ",
      });
      const s = (msg ?? "").toString();
      if (s.trim().startsWith("/config")) {
        const cfg = loadProfile();
        console.log("\nCurrent config:");
        console.log(`- provider: ${cfg.provider}`);
        console.log(`- baseUrl: ${cfg.baseUrl ?? "(default)"}`);
        console.log(`- model: ${cfg.model}`);
        console.log(`- tokensPanel: ${cfg.tokensPanel ? "on" : "off"}`);
        console.log(`- defaultTrace: ${cfg.defaultTrace ?? "plan"}`);
        console.log("");
        return ""; // skip sending to agent
      }
      return s;
    };

    try {
      await agent.chatInteractive(onInput);
      log.info("Chat session ended");
    } catch (error) {
      // Keep the process alive; report the error and return to shell without crash
      log.error("Chat session failed", { error: error instanceof Error ? error.message : String(error) });
    }
  });

/** ask (one-shot) */
program
  .command("ask <prompt...>")
  .description("One-shot question (optionally verify after edits)")
  .option("--trace <level>", "reasoning visibility: none|plan|verbose", "plan")
  .option("--verify <mode>", "none|lint|test|both", "none")
  .option("--auto", "auto-approve tool actions", false)
  .option("--safe", "require approval for writes & commands", false)
  .option("--log", "enable detailed logging", false)
  .option("--plan", "plan first, then confirm and execute", false)
  .action(async (parts, opts) => {
    // Set logging level based on --log flag
    if (opts.log) {
      setLogLevel("debug");
    } else {
      setLogLevel("warn"); // Only show warnings and errors by default
    }
    
    const prompt = Array.isArray(parts) ? parts.join(" ") : String(parts);
    log.info("Starting oneshot query", { prompt: prompt.slice(0, 100) + (prompt.length > 100 ? "..." : ""), options: opts });
    
    ensureConfigDir();
    const agent = new Agent({
      trace: opts.trace,
      approvalLevel: opts.auto ? "auto" : opts.safe ? "safe" : "balanced",
      verifyMode: opts.verify,
      execute: true, // Enable execution by default
      planFirst: !!opts.plan,
    });
    
    try {
      await agent.oneshot(prompt);
      log.info("Oneshot query completed");
    } catch (error) {
      // Do not crash; report and continue
      log.error("Oneshot query failed", { error: error instanceof Error ? error.message : String(error) });
    }
  });

/* --------------------------- Environment diagnostics ------------------------- */
const envCmd = program.command("env").description("environment utilities");
envCmd
  .command("doctor")
  .description("print environment diagnostics for forge")
  .action(async () => {
    ensureConfigDir();
    const cfg = loadProfile();

    console.log("## Environment");
    console.log(`- loaded: ${(env.LOADED_ENV_FILES || []).join(", ") || "(none)"}`);
    console.log(`- provider: ${cfg.provider}`);
    console.log(`- baseUrl: ${cfg.baseUrl ?? "(default)"}`);
    console.log(`- model: ${cfg.model}`);

    // quick ping to provider
    try {
      const llm = new GrokProvider(cfg);
      const res = (await llm.chat(
        [
          { role: "system", content: "You are a diagnostic assistant." },
          { role: "user", content: "Reply with: pong" },
        ],
        { stream: false, temperature: 0 },
      )) as { text: string; usage?: any };

      console.log("\nresponse:", (res.text || "").slice(0, 200));
      if (res.usage) process.stdout.write(renderTokensPanel(res.usage));
    } catch (e: any) {
      console.error("Ping failed:", e?.message || e);
    }
  });

/** summarize working tree diffs using the model */
program
  .command("changes")
  .description("summarize code changes from current working tree diffs")
  .option("--trace <level>", "reasoning visibility: none|plan|verbose", "plan")
  .action(async (opts) => {
    ensureConfigDir();
    const llm = new GrokProvider();
    const md = await summarizeChangesWithModel(llm, { trace: opts.trace });
    process.stdout.write(md + "\n");
  });

  program
  .command("bundle")
  .description("Bundle project into a single labeled file")
  .option("--out <file>", "Output file", "project_bundle.txt")
  .action(async (opts) => {
    const out = await bundleProject({ outFile: opts.out });
    console.log(`\n✅ Bundle created at: ${out}\n`);
  });

  program
  .command("pr")
  .description("Create a GitHub pull request via gh")
  .option("--title <title>", "PR title")
  .option("--body <body>", "PR body", "Automated changes from forge")
  .option("--draft", "Create as draft", false)
  .action(async (opts) => {
    const { url, stdout, stderr, code } = await createPullRequest({ title: opts.title, body: opts.body, draft: !!opts.draft });
    if (code === 0) console.log(`\n✅ PR created: ${url}\n`);
    else console.error(`\n❌ gh failed (${code})\n${stderr || stdout}`);
  });

/** auth (xAI) */
registerAuthXaiCommands(program);

/** plugins */
registerPluginCommands(program);

/** parse CLI */
program.parseAsync(process.argv).catch((err) => {
  // Do not crash; log and exit with non-zero code
  const msg = err?.message || String(err);
  console.error("Error:", msg);
  if (process.env.DEBUG) {
    console.error(err?.stack || "(no stack)");
  }
  process.exit(1);
});

// ── FILE: src\commands\auth-xai.ts
import { Command } from "commander";
import prompts from "prompts";
import { setXaiAuth, clearAuthForProvider, maskKey, readStoredKey } from "../config/store.js";

/** Minimal ping against xAI Chat Completions to validate a key. */
async function pingXaiKey(key: string): Promise<{ ok: boolean; text?: string; status: number }> {
  const res = await fetch("https://api.x.ai/v1/chat/completions", {
    method: "POST",
    headers: { "Content-Type": "application/json", Authorization: `Bearer ${key}` },
    body: JSON.stringify({
      model: "grok-code-fast-1",
      messages: [{ role: "user", content: "Reply with: pong" }],
      max_tokens: 4,
    }),
  });
  if (!res.ok) return { ok: false, status: res.status, text: await res.text().catch(() => "") };
  const json = (await res.json()) as any;
  const text: string | undefined = json?.choices?.[0]?.message?.content ?? json?.choices?.[0]?.delta?.content;
  const ok = typeof text === "string" ? /pong/i.test(text) : true;
  return { ok, text, status: res.status };
}

export function registerAuthXaiCommands(program: Command) {
  const auth = program.command("auth").description("Authentication helpers (xAI)");

  auth
    .command("login")
    .description("Log in with an xAI API key (saves to .env and sets provider to xai)")
    .option("--key <value>", "Provide the API key via flag (non-interactive)")
    .action(async (opts: { key?: string }) => {
      let key = opts.key;

      if (!key) {
        const ans = await prompts({
          type: "password",
          name: "key",
          message:
            "Paste your xAI API key (xAI Console → API Keys). We will validate it and write XAI_API_KEY to .env:",
          validate: (v: string) => (v?.trim()?.length ? true : "API key cannot be empty"),
        });
        key = ans.key?.trim();
        if (!key) {
          console.error("Aborted: no key provided.");
          process.exitCode = 1;
          return;
        }
      }

      process.stdout.write("Validating key against xAI… ");
      const pong = await pingXaiKey(key);
      if (!pong.ok) {
        console.error(`\n❌ Key validation failed (HTTP ${pong.status}).`);
        if (pong.text) console.error(pong.text.slice(0, 400));
        process.exitCode = 1;
        return;
      }
      console.log("ok.");

      const { envPath, configPath } = await setXaiAuth(key);
      const masked = maskKey(key);
      console.log(
        [
          "",
          "✅ xAI auth configured!",
          `- Saved key to: ${envPath} (XAI_API_KEY=${masked})`,
          `- Updated: ${configPath} → { provider: "xai", baseUrl: "https://api.x.ai/v1", model: "grok-code-fast-1" }`,
          "",
          "Test with:",
          "  $ npx forge env doctor",
          "  $ npx forge auth info",
          "",
        ].join("\n"),
      );
    });

  auth
    .command("logout")
    .description("Remove the stored xAI key from .env")
    .action(async () => {
      await clearAuthForProvider("xai");
      console.log("Removed XAI_API_KEY from .env");
    });

  auth
    .command("info")
    .description("Show (masked) stored xAI key from .env if present")
    .action(async () => {
      const key = await readStoredKey("xai");
      console.log(`xAI key: ${maskKey(key)}`);
    });
}

// ── FILE: src\commands\plugins.ts
import { Command } from "commander";
import prompts from "prompts";
import * as path from "node:path";
import { 
  registerPlugin, 
  unregisterPlugin, 
  getAllPlugins, 
  getAvailablePluginTools,
  getToolInfo,
  type Plugin 
} from "../core/plugins.js";
import { log } from "../core/logger.js";

export function registerPluginCommands(program: Command) {
  const pluginCmd = program.command("plugins").description("Plugin management");

  pluginCmd
    .command("list")
    .description("List all registered plugins and their tools")
    .action(async () => {
      try {
        const plugins = getAllPlugins();
        const tools = getAvailablePluginTools();
        
        console.log("## Registered Plugins");
        if (plugins.length === 0) {
          console.log("No plugins registered.");
          return;
        }
        
        for (const plugin of plugins) {
          console.log(`\n### ${plugin.name} v${plugin.version}`);
          console.log(`Description: ${plugin.description}`);
          console.log("Tools:");
          
          const pluginTools = tools.filter(tool => {
            const toolInfo = getToolInfo(tool);
            return toolInfo && plugin.tools.includes(toolInfo);
          });
          
          for (const toolName of pluginTools) {
            const toolInfo = getToolInfo(toolName);
            if (toolInfo) {
              console.log(`  - ${toolName}: ${toolInfo.description}`);
            }
          }
        }
        
        log.info("Listed plugins", { pluginCount: plugins.length, toolCount: tools.length });
      } catch (error) {
        log.error("Failed to list plugins", { error: error instanceof Error ? error.message : String(error) });
        console.error("Failed to list plugins:", error instanceof Error ? error.message : String(error));
        process.exit(1);
      }
    });

  pluginCmd
    .command("info <plugin>")
    .description("Show detailed information about a plugin")
    .action(async (pluginName: string) => {
      try {
        const plugins = getAllPlugins();
        const plugin = plugins.find(p => p.name === pluginName);
        
        if (!plugin) {
          console.error(`Plugin '${pluginName}' not found.`);
          process.exit(1);
        }
        
        console.log(`## ${plugin.name} v${plugin.version}`);
        console.log(`Description: ${plugin.description}`);
        console.log(`Tools: ${plugin.tools.length}`);
        
        for (const tool of plugin.tools) {
          console.log(`\n### ${tool.name}`);
          console.log(`Description: ${tool.description}`);
          if (tool.schema) {
            console.log("Schema:", JSON.stringify(tool.schema, null, 2));
          }
        }
        
        log.info("Showed plugin info", { plugin: pluginName });
      } catch (error) {
        log.error("Failed to show plugin info", { 
          plugin: pluginName, 
          error: error instanceof Error ? error.message : String(error) 
        });
        console.error("Failed to show plugin info:", error instanceof Error ? error.message : String(error));
        process.exit(1);
      }
    });

  pluginCmd
    .command("register")
    .description("Register a new plugin interactively")
    .option("--file <path>", "Load plugin from file")
    .action(async (opts: { file?: string }) => {
      try {
        let plugin: Plugin;
        
        if (opts.file) {
          // Load plugin from file
          const pluginModule = await import(path.resolve(opts.file));
          plugin = pluginModule.default || pluginModule;
        } else {
          // Interactive plugin creation
          const answers = await prompts([
            {
              type: "text",
              name: "name",
              message: "Plugin name:",
              validate: (value: string) => value.trim().length > 0 || "Name is required"
            },
            {
              type: "text",
              name: "version",
              message: "Plugin version:",
              initial: "1.0.0",
              validate: (value: string) => value.trim().length > 0 || "Version is required"
            },
            {
              type: "text",
              name: "description",
              message: "Plugin description:",
              validate: (value: string) => value.trim().length > 0 || "Description is required"
            }
          ]);
          
          if (!answers.name || !answers.version || !answers.description) {
            console.error("Plugin registration cancelled.");
            process.exit(1);
          }
          
          // For now, create a simple plugin with no tools
          // In a real implementation, you'd want more sophisticated plugin creation
          plugin = {
            name: answers.name,
            version: answers.version,
            description: answers.description,
            tools: []
          };
        }
        
        await registerPlugin(plugin);
        console.log(`✅ Plugin '${plugin.name}' registered successfully.`);
        
        log.info("Registered plugin", { name: plugin.name, version: plugin.version });
      } catch (error) {
        log.error("Failed to register plugin", { error: error instanceof Error ? error.message : String(error) });
        console.error("Failed to register plugin:", error instanceof Error ? error.message : String(error));
        process.exit(1);
      }
    });

  pluginCmd
    .command("unregister <plugin>")
    .description("Unregister a plugin")
    .action(async (pluginName: string) => {
      try {
        const { confirmed } = await prompts({
          type: "confirm",
          name: "confirmed",
          message: `Are you sure you want to unregister plugin '${pluginName}'?`,
          initial: false
        });
        
        if (!confirmed) {
          console.log("Plugin unregistration cancelled.");
          return;
        }
        
        await unregisterPlugin(pluginName);
        console.log(`✅ Plugin '${pluginName}' unregistered successfully.`);
        
        log.info("Unregistered plugin", { name: pluginName });
      } catch (error) {
        log.error("Failed to unregister plugin", { 
          plugin: pluginName, 
          error: error instanceof Error ? error.message : String(error) 
        });
        console.error("Failed to unregister plugin:", error instanceof Error ? error.message : String(error));
        process.exit(1);
      }
    });

  pluginCmd
    .command("tools")
    .description("List all available tools (built-in and plugin)")
    .action(async () => {
      try {
        const pluginTools = getAvailablePluginTools();
        
        console.log("## Available Tools");
        console.log("\n### Built-in Tools");
        console.log("- open_file: Read file contents");
        console.log("- write_file: Write files");
        console.log("- apply_patch: Apply unified diff patches");
        console.log("- run: Execute shell commands");
        console.log("- git: Git operations (commit, create_branch)");
        console.log("- npm: NPM operations (install, run, list, outdated)");
        console.log("- docker: Docker operations (build, run, ps, stop, remove)");
        console.log("- search: Search operations (files, find)");
        
        if (pluginTools.length > 0) {
          console.log("\n### Plugin Tools");
          for (const toolName of pluginTools) {
            const toolInfo = getToolInfo(toolName);
            if (toolInfo) {
              console.log(`- ${toolName}: ${toolInfo.description}`);
            }
          }
        } else {
          console.log("\n### Plugin Tools");
          console.log("No plugin tools registered.");
        }
        
        log.info("Listed all tools", { pluginToolCount: pluginTools.length });
      } catch (error) {
        log.error("Failed to list tools", { error: error instanceof Error ? error.message : String(error) });
        console.error("Failed to list tools:", error instanceof Error ? error.message : String(error));
        process.exit(1);
      }
    });
}

// ── FILE: src\config\env.ts
import * as fs from "node:fs";
import * as path from "node:path";
import * as dotenv from "dotenv";

type Boolish = boolean | undefined;

function loadEnvFiles(): string[] {
  const loaded: string[] = [];
  const cwd = process.cwd();
  const candidates = [".env.local", ".env"];
  for (const file of candidates) {
    const p = path.join(cwd, file);
    if (fs.existsSync(p)) {
      dotenv.config({ path: p });
      loaded.push(p);
    }
  }
  return loaded;
}

const LOADED_ENV_FILES = loadEnvFiles();

export interface Env {
  readonly GROK_API_KEY: string | undefined;
  readonly GROK_MODEL_ID: string | undefined; // default in profile.ts
  readonly GROK_BASE_URL: string | undefined;

  readonly OPENROUTER_API_KEY: string | undefined;

  readonly FORGE_PROVIDER: "xai" | "openrouter" | "mock" | undefined;

  readonly FORGE_ALLOW_DANGEROUS: Boolish;
  readonly FORGE_CMD_TIMEOUT_MS: number | undefined;
  readonly FORGE_TOOL_STDIO_LIMIT: number | undefined;

  readonly LOADED_ENV_FILES: string[];
}

function toBool(v: string | undefined): boolean | undefined {
  if (v === undefined) return undefined;
  return ["1", "true", "yes", "on"].includes(v.toLowerCase());
}

function toInt(v: string | undefined): number | undefined {
  if (v === undefined || v === "") return undefined;
  const n = Number(v);
  return Number.isFinite(n) ? n : undefined;
}

export const env: Env = {
  GROK_API_KEY: process.env.GROK_API_KEY ?? process.env.XAI_API_KEY, // tolerate legacy
  GROK_MODEL_ID: process.env.GROK_MODEL_ID ?? "x-ai/grok-code-fast-1",
  GROK_BASE_URL: process.env.GROK_BASE_URL, // if calling x.ai directly

  OPENROUTER_API_KEY: process.env.OPENROUTER_API_KEY,

  FORGE_PROVIDER: (process.env.FORGE_PROVIDER as Env["FORGE_PROVIDER"]) ?? "openrouter",

  FORGE_ALLOW_DANGEROUS: toBool(process.env.FORGE_ALLOW_DANGEROUS),
  FORGE_CMD_TIMEOUT_MS: toInt(process.env.FORGE_CMD_TIMEOUT_MS),
  FORGE_TOOL_STDIO_LIMIT: toInt(process.env.FORGE_TOOL_STDIO_LIMIT),

  LOADED_ENV_FILES,
};

// ── FILE: src\config\profile.ts
// ── FILE: src/config/profile.ts
import * as fs from "node:fs";
import * as path from "node:path";
import os from "node:os";
import { env } from "./env.js";
import { Validator, Patterns } from "../core/validation.js";

export interface Profile {
  provider: "xai" | "openrouter" | "mock";
  model: string;
  baseUrl?: string;
  apiKey?: string;
  tokensPanel?: boolean;
  defaultTrace?: "none" | "plan" | "verbose";
  render?: { mode: "append" | "refresh" };
}

const PROJECT_DIR = path.join(process.cwd(), ".forge");
const PROJECT_CFG = path.join(PROJECT_DIR, "config.json");
const HOME_DIR = path.join(os.homedir(), ".forge");
const HOME_CFG = path.join(HOME_DIR, "config.json");

function readJsonIfExists<T>(p: string): Partial<T> {
  try {
    if (fs.existsSync(p)) return JSON.parse(fs.readFileSync(p, "utf8")) as T;
  } catch {}
  return {};
}

function writeProfile(p: string, profile: Profile): void {
  ensureConfigDir(p === HOME_CFG ? "global" : "project");
  fs.writeFileSync(p, JSON.stringify(profile, null, 2));
}

export function ensureConfigDir(scope: "project" | "global" = "project") {
  const dir = scope === "global" ? HOME_DIR : PROJECT_DIR;
  if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
}

export function loadProfile(): Profile {
  // precedence: ENV > project config > home config > defaults
  const home = readJsonIfExists<Profile>(HOME_CFG);
  const proj = readJsonIfExists<Profile>(PROJECT_CFG);

  const provider =
    (proj.provider as Profile["provider"]) ??
    (env.FORGE_PROVIDER as Profile["provider"]) ??
    "openrouter";

  // sensible defaults per provider
  const model =
    proj.model ??
    (provider === "openrouter" ? env.GROK_MODEL_ID ?? "x-ai/grok-code-fast-1" : "grok-code-fast-1");

  const apiKey =
    proj.apiKey ?? env.GROK_API_KEY ?? env.OPENROUTER_API_KEY ?? process.env.OPENAI_API_KEY;

  const baseUrl =
    proj.baseUrl ??
    env.GROK_BASE_URL ??
    proj.baseUrl ??
    home.baseUrl ??
    (provider === "openrouter" ? "https://openrouter.ai/api/v1" : "https://api.x.ai/v1");

  const tokensPanel = proj.tokensPanel ?? true;
  const defaultTrace = proj.defaultTrace ?? "plan";
  const renderMode = proj.render?.mode ?? "append";

  const profile: Profile = {
    provider,
    model,
    baseUrl,
    apiKey,
    tokensPanel,
    defaultTrace,
    render: { mode: renderMode },
  };

  // Validate the profile
  const validator = new Validator();
  validator
    .validateString(profile.provider, "provider", {
      required: true,
      pattern: /^(xai|openrouter|mock)$/,
      patternMessage: "must be one of: xai, openrouter, mock"
    })
    .validateString(profile.model, "model", {
      required: true,
      minLength: 1,
      maxLength: 100
    })
    .validateString(profile.baseUrl, "baseUrl", {
      pattern: Patterns.url,
      patternMessage: "must be a valid URL"
    })
    .validateString(profile.apiKey, "apiKey", {
      minLength: 10,
      maxLength: 200
    })
    .validateString(profile.defaultTrace, "defaultTrace", {
      pattern: /^(none|plan|verbose)$/,
      patternMessage: "must be one of: none, plan, verbose"
    });

  validator.throwIfInvalid();

  return profile;
}

export function clearApiKey(scope: "project" | "global" = "project"): Profile {
  ensureConfigDir(scope);
  const base = scope === "global" ? readJsonIfExists<Profile>(HOME_CFG) : readJsonIfExists<Profile>(PROJECT_CFG);
  const next: Profile = {
    provider: (base.provider ?? "openrouter") as Profile["provider"],
    model: base.model ?? "x-ai/grok-code-fast-1",
    baseUrl: base.baseUrl,
    apiKey: undefined,
    tokensPanel: base.tokensPanel ?? true,
    defaultTrace: base.defaultTrace ?? "plan",
    render: { mode: base.render?.mode ?? "append" },
  };
  writeProfile(scope === "global" ? HOME_CFG : PROJECT_CFG, next);
  return next;
}

// ── FILE: src\config\store.ts
import * as fsp from "node:fs/promises";
import * as fs from "node:fs";
import * as path from "node:path";
import type { Profile } from "./profile.js";
import { ensureConfigDir } from "./profile.js";

const CWD = process.cwd();
const ENV_PATH = path.join(CWD, ".env");
const CONFIG_DIR = path.join(CWD, ".forge");
const CONFIG_PATH = path.join(CONFIG_DIR, "config.json");

async function readMaybe(p: string): Promise<string> {
  try {
    return await fsp.readFile(p, "utf8");
  } catch {
    return "";
  }
}

export async function upsertEnvVar(key: string, value?: string): Promise<void> {
  const src = await readMaybe(ENV_PATH);
  const lines = src ? src.split(/\r?\n/) : [];
  let found = false;

  const next = lines
    .map((ln) => {
      if (!ln || ln.trim().startsWith("#")) return ln;
      const idx = ln.indexOf("=");
      if (idx === -1) return ln;
      const k = ln.slice(0, idx).trim();
      if (k === key) {
        found = true;
        return value === undefined ? null : `${key}=${value}`;
      }
      return ln;
    })
    .filter((ln) => ln !== null) as string[];

  if (!found && value !== undefined) next.push(`${key}=${value}`);

  await fsp.writeFile(ENV_PATH, next.join("\n") + "\n", "utf8");
}

export async function removeEnvVar(key: string): Promise<void> {
  await upsertEnvVar(key, undefined);
}

export function maskKey(key?: string): string {
  if (!key) return "(none)";
  if (key.length <= 8) return "*".repeat(key.length);
  return `${key.slice(0, 4)}…${key.slice(-4)}`;
}

export async function readStoredKey(provider: "xai" | "openrouter"): Promise<string | undefined> {
  const src = await readMaybe(ENV_PATH);
  const lines = src ? src.split(/\r?\n/) : [];
  const prefer = provider === "xai" ? "XAI_API_KEY" : "OPENROUTER_API_KEY";

  for (const ln of lines) {
    if (ln?.startsWith(prefer + "=")) return ln.slice(prefer.length + 1).trim();
  }
  return process.env[prefer];
}

export async function updateProfileConfig(patch: Partial<Profile>): Promise<void> {
  await ensureConfigDir();
  let current: Partial<Profile> = {};
  try {
    const raw = await fsp.readFile(CONFIG_PATH, "utf8");
    current = JSON.parse(raw);
  } catch {}
  const next = { ...current, ...patch };
  await fsp.writeFile(CONFIG_PATH, JSON.stringify(next, null, 2) + "\n", "utf8");
}

export async function setXaiAuth(apiKey: string): Promise<{ envPath: string; configPath: string }> {
  await upsertEnvVar("XAI_API_KEY", apiKey);
  await updateProfileConfig({
    provider: "xai",
    baseUrl: "https://api.x.ai/v1",
    model: "grok-code-fast-1",
  } as Partial<Profile>);
  return { envPath: ENV_PATH, configPath: CONFIG_PATH };
}

export async function clearAuthForProvider(provider: "xai" | "openrouter"): Promise<void> {
  if (provider === "xai") await removeEnvVar("XAI_API_KEY");
  else await removeEnvVar("OPENROUTER_API_KEY");
}

// ── FILE: src\core\agent.ts
import { GrokProvider } from "../providers/grok.js";
import { systemPrompt } from "./prompts/system.js";
import type { TraceLevel } from "./prompts/system.js";
import { parseModelJSON } from "./contracts.js";
import type { ModelJSONT } from "./contracts.js";
import { AppendOnlyStream, renderPlan, renderUserPrompt, renderAssistantResponse, renderSeparator, renderTokensPanel, renderContextPanel } from "../ui/render.js";
import chalk from "chalk";
import { startThinkingAnimation, startProcessingAnimation, stopAnimation, succeedAnimation, failAnimation } from "../ui/animations.js";
import { summarizeChangesWithModel, summarizeCodebaseWithModel } from "./flows/summarize_changes.js";
import { planOnly } from "./flows/plan_only.js";
import { executeTool } from "./tools/registry.js";
import {
  requiresApprovalForRun,
  requiresApprovalForWrite,
  type ApprovalLevel,
} from "./safety.js";
import { confirmYN } from "../ui/confirm.js";
import { runVerification, type VerifyMode } from "./verify.js";
import { inferToolCallsFromUser } from "./heuristics.js";
import { ForgeError, getErrorDisplayMessage, logError } from "./errors.js";
import { SessionLog, type Turn } from "../state/history.js";
import { log } from "./logger.js";

export interface AgentOptions {
  trace?: TraceLevel;
  appendOnly?: boolean;
  temperature?: number;
  execute?: boolean;
  approvalLevel?: ApprovalLevel; // safe | balanced | auto
  verifyMode?: VerifyMode; // none | lint | test | both
  sessionLogging?: boolean; // enable/disable session logging
  planFirst?: boolean; // plan → confirm → execute
}

type Observation = { title: string; body: string };
type ChatRole = "system" | "user" | "assistant";
type ChatMessage = { role: ChatRole; content: string };

export class Agent {
  private llm = new GrokProvider();
  private sessionLog?: SessionLog;
  private filesReadCount = 0;
  private bytesReadCount = 0;
  private totalInputTokens = 0;
  private totalOutputTokens = 0;
  private totalCostUSD = 0;
  private currentModel = "";
  
  constructor(private opts: AgentOptions = {}) {
    // Initialize session logging if enabled
    if (this.opts.sessionLogging !== false) {
      this.sessionLog = SessionLog.create();
    }
  }

  private logTurn(role: Turn["role"], content: string, meta?: Record<string, unknown>): void {
    if (!this.sessionLog) return;
    
    this.sessionLog.append({
      ts: new Date().toISOString(),
      role,
      content,
      meta
    });
  }

  private logUserInput(input: string): void {
    this.logTurn("user", input);
    log.user(input);
  }

  private logAssistantResponse(response: string, actions?: any[]): void {
    this.logTurn("assistant", response, { actions });
    log.assistant(response, actions);
  }

  private logToolExecution(tool: string, args: any, result: any, error?: any): void {
    this.logTurn("tool", `Executed ${tool}`, {
      tool,
      args,
      result,
      error: error ? { message: error.message, code: error.code } : undefined
    });
    log.tool(tool, args, result, error);
  }

  private logObservation(observation: Observation): void {
    this.logTurn("meta", `Observation: ${observation.title}`, {
      observation
    });
  }

  getSessionLogPath(): string | undefined {
    return this.sessionLog?.path();
  }

  private showContextPanel(out: AppendOnlyStream) {
    const totalTokens = this.totalInputTokens + this.totalOutputTokens;
    const contextTokens = Math.floor(this.bytesReadCount / 4); // rough estimate
    const contextPercentage = totalTokens > 0 ? Math.round((contextTokens / totalTokens) * 100) : 0;
    
    out.write(renderContextPanel({
      filesRead: this.filesReadCount,
      bytesRead: this.bytesReadCount,
      approxTokens: contextTokens,
    }));
    
    // Show actual token usage from Grok API
    if (totalTokens > 0) {
      out.write(renderTokensPanel({
        inputTokens: this.totalInputTokens,
        outputTokens: this.totalOutputTokens,
        costUSD: this.totalCostUSD,
        model: this.currentModel,
      }));
      
      out.write(chalk.gray(`Context usage: ${contextPercentage}% of total tokens\n\n`));
    }
  }

  async chatInteractive(getUserInput: () => Promise<string>) {
    const out = new AppendOnlyStream();

    while (true) {
      let user: string;
      try {
        user = await getUserInput();
      } catch (err: any) {
        out.write(`\n⚠️  Input failed: ${err?.message || String(err)}\n`);
        continue;
      }
      if (!user || user.trim().toLowerCase() === "/exit") {
        if (user?.trim().toLowerCase() === "/exit") {
          out.write(renderSeparator() + "\n");
          out.write("👋 Goodbye! Thanks for using Forge CLI.\n");
          out.write(renderSeparator() + "\n");
        }
        break;
      }
      
      this.logUserInput(user);
      
      // Display user input with enhanced formatting
      out.write(renderUserPrompt(user));

      const sys = systemPrompt(this.opts.trace ?? "plan");
      const baseMessages: ChatMessage[] = [
        { role: "system", content: sys },
        { role: "user", content: user },
      ];

      let messages: ChatMessage[] = [...baseMessages];
      let passesRemaining = 2;

      while (passesRemaining-- > 0) {
        // Start thinking animation
        startThinkingAnimation();
        
        let collected = "";
        let reasoning = "";
        try {
          const maybeStream = this.llm.chat(messages, {
            stream: true,
            temperature: this.opts.temperature ?? 0.3,
            reasoning: (this.opts.trace ?? "plan") !== "none",
          }) as unknown;

          const stream = (await maybeStream) as AsyncIterable<{ content: string; reasoning?: string }>;
          
          // Stop thinking animation and start processing
          stopAnimation();
          startProcessingAnimation();
          
          for await (const chunk of stream) {
            collected += chunk.content;
            if (chunk.reasoning) {
              reasoning = chunk.reasoning;
            }
          }
          
          // Estimate tokens for streaming (approximate)
          this.totalInputTokens += Math.floor(messages.map(m => String(m.content).length).reduce((a, b) => a + b, 0) / 4);
          this.totalOutputTokens += Math.floor(collected.length / 4);
        } catch (err: any) {
          stopAnimation();
          const msg = err?.message || String(err);
          const observation = { title: "model stream error", body: msg } as Observation;
          out.write(`\n⚠️  Model stream failed: ${msg}\n`);
          this.logObservation(observation);
          messages = [...messages, { role: "assistant", content: `OBSERVATIONS:\n\n### model stream error\n${msg}` }];
          continue;
        }
        
        // Stop processing animation
        stopAnimation();

        let parsed: ModelJSONT | undefined;
        try {
          parsed = parseModelJSON(collected);
        } catch (err: any) {
          const msg = err?.message || String(err);
          this.logObservation({ title: "parse error", body: msg });
        }

        // Display thinking/reasoning if available and trace level allows it
        if (reasoning && (this.opts.trace ?? "plan") === "verbose") {
          out.write("\n" + renderSeparator() + "\n");
          out.write("💭 Thinking:\n");
          out.write("```\n" + reasoning + "\n```\n");
          out.write(renderSeparator() + "\n");
        }

        // For summary tasks, don't show raw plan/rationale - process intelligently
        if (inferSummarizeIntent(user)) {
          if (parsed) {
            // Just show a brief status, don't display the full plan
            out.write("🔍 Analyzing codebase structure and gathering information...\n");
            this.logAssistantResponse(collected, parsed.actions);
          } else {
            // Model didn't send contract JSON — show whatever text it sent.
            if (collected.trim()) {
              out.write(renderAssistantResponse(collected));
              this.logAssistantResponse(collected);
            }
          }
        } else {
          // Always render plan/rationale if we have them for non-summary tasks.
          if (parsed) {
            out.write(renderPlan({ plan: parsed.plan, rationale: parsed.rationale }));
            this.logAssistantResponse(collected, parsed.actions);
          } else {
            // Model didn't send contract JSON — show whatever text it sent.
            if (collected.trim()) {
              out.write(renderAssistantResponse(collected));
              this.logAssistantResponse(collected);
            }
          }
        }

        // Decide what actions to run:
        //  1) model-provided actions
        //  2) else: heuristic fallback from the last user message
        const modelActions = parsed?.actions ?? [];
        const fallbackActions =
          modelActions.length === 0 ? inferToolCallsFromUser(user) : [];
        const actionsToRun = modelActions.length ? modelActions : fallbackActions;

        const observations: Observation[] = [];
        let madeEdits = false;

        if (this.opts.execute && actionsToRun.length) {
          // If actions are from heuristics, note it for visibility.
          if (fallbackActions.length) {
            out.write("\n🧭 No actions from the model; applying a safe fallback intent.\n");
          }

          for (const action of actionsToRun) {
            const tool = (action as any).tool as string;

            if (tool === "open_file") {
              const { path } = action as any;
              // silent read with subtle animation
              startProcessingAnimation();
              try {
                const res = await executeTool({ tool: "open_file", args: { path } });
                stopAnimation();
                // track context silently
                this.filesReadCount += 1;
                this.bytesReadCount += res.content ? Buffer.byteLength(res.content, "utf8") : 0;
                
                // do not print content; optionally log observation
                const fileSize = res.content ? res.content.length : 0;
                const lines = res.content ? res.content.split('\n').length : 0;
                
                const observation = {
                  title: `open_file ${path}`,
                  body: `Read ${path} (${lines} lines, ${fileSize} chars${res.truncated ? ', truncated' : ''})`,
                };
                observations.push(observation);
                this.logToolExecution("open_file", { path }, res);
                this.logObservation(observation);
              } catch (err: any) {
                stopAnimation();
                const error = err instanceof ForgeError ? err : new ForgeError(err.message, "TOOL_ERROR");
                const displayMessage = getErrorDisplayMessage(error);
                out.write(`⚠️  open_file failed: ${displayMessage}\n`);
                logError(error);
                this.logToolExecution("open_file", { path }, null, error);
              }
              continue;
            }
            if (tool === "run") {
              const { cmd } = action as any;
              
              // Convert Unix commands to Windows equivalents for better compatibility
              let windowsCmd = cmd;
              if (process.platform === 'win32') {
                if (cmd.includes('find . -type f')) {
                  windowsCmd = 'dir /s /b *.ts *.js *.json *.md';
                } else if (cmd.includes('head -20')) {
                  windowsCmd = cmd.replace('head -20', 'more');
                } else if (cmd.includes('cat')) {
                  windowsCmd = cmd.replace('cat', 'type');
                } else if (cmd.includes('ls -la')) {
                  windowsCmd = cmd.replace('ls -la', 'dir');
                }
              }
              
              const needsApproval = requiresApprovalForRun(
                windowsCmd,
                this.opts.approvalLevel ?? "balanced"
              );
              if (needsApproval) {
                out.write(`\n⚠️  run requires approval: ${windowsCmd}\n`);
                const ok = await confirmYN(`Allow RUN: ${windowsCmd}?`, false);
                if (!ok) {
                  out.write(`🚫 Skipped RUN: ${windowsCmd}\n`);
                  continue;
                }
              }
              out.write(`\n$ ${windowsCmd}\n`);
              try {
                const res = await executeTool({ tool: "run", args: { cmd: windowsCmd } });
                const body = (res.stdout || res.stderr || "").trim();
                
                // For summary tasks, don't show raw output - just indicate execution
                if (inferSummarizeIntent(user)) {
                  const lines = body.split('\n').filter((line: string) => line.trim());
                  out.write(`✓ Command executed (${lines.length} lines of output)\n`);
                } else {
                  out.write(
                    "```text\n" + (body.length ? body : "(no output)") + "\n```\n"
                  );
                }
                
                observations.push({
                  title: `run ${windowsCmd}`,
                  body: `exit=${res.code} | stdout=${(res.stdout || "").slice(
                    -2000
                  )} | stderr=${(res.stderr || "").slice(-2000)}`,
                });
              } catch (err: any) {
                const error = err instanceof ForgeError ? err : new ForgeError(err.message, "TOOL_ERROR");
                const displayMessage = getErrorDisplayMessage(error);
                out.write(`⚠️  run failed: ${displayMessage}\n`);
                out.write("```text\n" + (err?.stderr || err?.stdout || displayMessage) + "\n```\n");
                logError(error);
                // Feed observation back in to allow model to adjust command
                observations.push({ title: "run error", body: displayMessage });
              }
              continue;
            }

            if (tool === "apply_patch") {
              const { patch } = action as any;
              const needsApproval = requiresApprovalForWrite(
                this.opts.approvalLevel ?? "balanced",
                /*unknown*/ undefined
              );
              if (needsApproval) {
                out.write(`\n⚠️  apply_patch requires approval\n`);
                const ok = await confirmYN(`Apply PATCH provided by model?`, false);
                if (!ok) {
                  out.write(`🚫 Skipped APPLY PATCH\n`);
                  continue;
                }
              }
              try {
                const res = await executeTool({
                  tool: "apply_patch",
                  args: { patch },
                });
                out.write(
                  `\n🩹 apply_patch: ${res.ok ? "applied" : "failed"}\n`
                );
                if (!res.ok) {
                  out.write(
                    "```text\n" + [`attempted:`, ...res.attempted].join("\n") + "\n```\n"
                  );
                } else {
                  madeEdits = true;
                }
                observations.push({
                  title: "apply_patch",
                  body: res.ok
                    ? "Patch applied successfully."
                    : "Patch failed to apply.",
                });
              } catch (err: any) {
                const error = err instanceof ForgeError ? err : new ForgeError(err.message, "TOOL_ERROR");
                const displayMessage = getErrorDisplayMessage(error);
                out.write(`⚠️  apply_patch failed: ${displayMessage}\n`);
                logError(error);
              }
              continue;
            }

            if (tool === "write_file") {
              const { path, content } = action as any;
              const bytes = Buffer.byteLength(content ?? "", "utf8");
              const needsApproval = requiresApprovalForWrite(
                this.opts.approvalLevel ?? "balanced",
                bytes
              );
              if (needsApproval) {
                out.write(
                  `\n⚠️  write_file requires approval (${bytes} bytes): ${path}\n`
                );
                const ok = await confirmYN(
                  `Write ${path}? (bytes: ${bytes})`,
                  false
                );
                if (!ok) {
                  out.write(`🚫 Skipped WRITE ${path}\n`);
                  continue;
                }
              }
              try {
                const res = await executeTool({
                  tool: "write_file",
                  args: { path, content },
                });
                out.write(`\n✍️  write_file: ${path} (${res.bytes} bytes)\n`);
                madeEdits = true;
                observations.push({
                  title: `write_file ${path}`,
                  body: `Wrote ${res.bytes} bytes.`,
                });
              } catch (err: any) {
                const error = err instanceof ForgeError ? err : new ForgeError(err.message, "TOOL_ERROR");
                const displayMessage = getErrorDisplayMessage(error);
                out.write(`⚠️  write_file failed: ${displayMessage}\n`);
                logError(error);
              }
              continue;
            }

            if (tool === "git") {
              const { subtool, args } = action as any;
              if (subtool === "commit") {
                const needsApproval = requiresApprovalForWrite(
                  this.opts.approvalLevel ?? "balanced",
                  /*unknown*/ undefined
                );
                const msg =
                  String(args?.message ?? "").trim() || "chore: update";
                if (needsApproval) {
                  out.write(
                    `\n⚠️  git commit requires approval: "${msg}"\n`
                  );
                  const ok = await confirmYN(
                    `Create commit with message: "${msg}" ?`,
                    false
                  );
                  if (!ok) {
                    out.write(`🚫 Skipped GIT COMMIT\n`);
                    continue;
                  }
                }
                try {
                  const res = await executeTool({
                    tool: "git",
                    args: { subtool: "commit", message: msg },
                  });
                  out.write(`\n🌿 git commit: ${res.ok ? "created" : "failed"}\n`);
                  observations.push({ title: "git commit", body: res.output || (res.ok ? "commit created" : "failed") });
                } catch (err: any) {
                  const error = err instanceof ForgeError ? err : new ForgeError(err.message, "TOOL_ERROR");
                  const displayMessage = getErrorDisplayMessage(error);
                  out.write(`⚠️  git commit failed: ${displayMessage}\n`);
                  observations.push({ title: "git commit error", body: displayMessage });
                  logError(error);
                }
                continue;
              }
              if (subtool === "create_branch") {
                const name = String(args?.name ?? "").trim();
                if (!name) {
                  out.write(`\n⚠️  git create_branch missing name\n`);
                  continue;
                }
                const res = await executeTool({
                  tool: "git",
                  args: { subtool: "create_branch", name },
                });
                out.write(
                  `\n🌱 git branch: ${res.ok ? `created ${name}` : "failed"}\n`
                );
                observations.push({
                  title: "git create_branch",
                  body: res.output || "",
                });
                continue;
              }
              out.write(`\nℹ️  git subtool '${subtool}' not implemented.\n`);
              continue;
            }

            out.write(`\nℹ️  Unknown action '${tool}' — skipping.\n`);
          }
        }

        if (parsed?.message_markdown) {
          out.write("\n" + parsed.message_markdown + "\n");
        }

        if (madeEdits && (this.opts.verifyMode ?? "none") !== "none") {
          const { summary, ok } = await runVerification(
            this.opts.verifyMode ?? "none"
          );
          observations.push({
            title: `verify (${this.opts.verifyMode})`,
            body: summary,
          });
          out.write(
            `\n🧪 verify[${this.opts.verifyMode}]: ${ok ? "OK" : "Issues found"}\n`
          );
          out.write("```text\n" + summary + "\n```\n");
        }

        if (observations.length) {
          const obsMd = observations
            .map((o) => `### ${o.title}\n${o.body}`)
            .join("\n\n");
          messages = [
            ...messages,
            { role: "assistant", content: `OBSERVATIONS:\n\n${obsMd}` },
          ];
          // Show enhanced context panel after observations
          this.showContextPanel(out);
          continue;
        }

        break;
      }

      // Show context panel at end of turn
      this.showContextPanel(out);

      if (inferSummarizeIntent(user)) {
        // Check if this is a codebase summary (not just changes)
        const isCodebaseSummary = user.toLowerCase().includes("entire") || 
                                 user.toLowerCase().includes("whole") || 
                                 user.toLowerCase().includes("codebase");
        
        if (isCodebaseSummary) {
          out.write("\n🔍 Analyzing codebase structure and key files...\n");
          const md = await summarizeCodebaseWithModel(this.llm, {
            trace: this.opts.trace ?? "plan",
            temperature: 0.3,
            maxChars: 180_000,
          });
          out.write("\n" + (md || "_No codebase summary produced._") + "\n");
        } else {
          const md = await summarizeChangesWithModel(this.llm, {
            trace: this.opts.trace ?? "plan",
            temperature: 0.2,
            maxChars: 180_000,
          });
          out.write("\n" + (md || "_No summary produced._") + "\n");
        }
      }
    }
  }

  async oneshot(prompt: string) {
    this.logUserInput(prompt);
    
    // Display user input with enhanced formatting
    const out = new AppendOnlyStream();
    out.write(renderUserPrompt(prompt));
    
    // If plan-first mode, propose plan and confirm before execution
    if (this.opts.planFirst) {
      const plan = await planOnly(this.llm as any, prompt, { trace: this.opts.trace });
      out.write(renderPlan({ plan: plan.plan, rationale: plan.rationale }));
      const ok = await confirmYN("Proceed to execute this plan?", false);
      if (!ok) {
        out.write("🚫 Cancelled by user.\n");
        return;
      }
    }

    // Start thinking animation
    startThinkingAnimation();
    
    const sys = systemPrompt(this.opts.trace ?? "plan");
    const messages: ChatMessage[] = [
      { role: "system", content: sys },
      { role: "user", content: prompt },
    ];
    const res = (await this.llm.chat(messages, {
      stream: false,
      temperature: this.opts.temperature ?? 0.3,
      reasoning: (this.opts.trace ?? "plan") !== "none",
    })) as { text: string; usage?: any; reasoning?: string };

    // Stop thinking animation
    stopAnimation();
    
    // Track actual usage from Grok API
    if (res.usage) {
      this.totalInputTokens += res.usage.inputTokens || 0;
      this.totalOutputTokens += res.usage.outputTokens || 0;
      this.totalCostUSD += res.usage.costUSD || 0;
      this.currentModel = res.usage.model || this.currentModel;
    }

    this.logAssistantResponse(res.text);
    
    // Display thinking/reasoning if available and trace level allows it
    if (res.reasoning && (this.opts.trace ?? "plan") === "verbose") {
      out.write(renderSeparator() + "\n");
      out.write("💭 Thinking:\n");
      out.write("```\n" + res.reasoning + "\n```\n");
      out.write(renderSeparator() + "\n");
    }
    
    out.write(renderAssistantResponse(res.text));
    
    // Show context panel at end
    this.showContextPanel(out);

    if (inferSummarizeIntent(prompt)) {
      // Check if this is a codebase summary (not just changes)
      const isCodebaseSummary = prompt.toLowerCase().includes("entire") || 
                               prompt.toLowerCase().includes("whole") || 
                               prompt.toLowerCase().includes("codebase");
      
      if (isCodebaseSummary) {
        out.write("\n🔍 Analyzing codebase structure and key files...\n");
        const md = await summarizeCodebaseWithModel(this.llm, {
          trace: this.opts.trace ?? "plan",
          temperature: 0.3,
          maxChars: 180_000,
        });
        out.write("\n" + (md || "_No codebase summary produced._") + "\n");
      } else {
        const md = await summarizeChangesWithModel(this.llm, {
          trace: this.opts.trace ?? "plan",
          temperature: 0.2,
          maxChars: 180_000,
        });
        out.write("\n" + (md || "_No summary produced._") + "\n");
      }
    }
  }
}

function inferSummarizeIntent(text: string): boolean {
  const t = text.toLowerCase();
  return (
    (t.includes("summarize") ||
      t.includes("summary") ||
      t.includes("what changed") ||
      t.includes("changes") ||
      t.includes("overview") ||
      t.includes("describe") ||
      t.includes("explain") ||
      t.includes("analyze")) &&
    (t.includes("code") ||
      t.includes("codebase") ||
      t.includes("project") ||
      t.includes("diff") ||
      t.includes("repo") ||
      t.includes("repository") ||
      t.includes("entire") ||
      t.includes("whole"))
  );
}

// ── FILE: src\core\contracts.ts
import { z } from "zod";

/** Discriminated union for tool actions the model can request. */
export const Action = z.discriminatedUnion("tool", [
  z.object({ tool: z.literal("open_file"), path: z.string() }),
  z.object({
    tool: z.literal("run"),
    cmd: z.string(),
    timeoutSec: z.number().int().positive().optional(),
  }),
  z.object({
    tool: z.literal("apply_patch"),
    path: z.string(),
    patch: z.string(),
  }),
  z.object({
    tool: z.literal("write_file"),
    path: z.string(),
    content: z.string(),
  }),
  z.object({
    tool: z.literal("git"),
    subtool: z.string(),
    args: z.record(z.any()).optional(),
  }),
  z.object({
    tool: z.literal("npm"),
    subtool: z.string(),
    args: z.record(z.any()).optional(),
  }),
  z.object({
    tool: z.literal("docker"),
    subtool: z.string(),
    args: z.record(z.any()).optional(),
  }),
  z.object({
    tool: z.literal("search"),
    subtool: z.string(),
    args: z.record(z.any()).optional(),
  }),
]);

/** Contract the model streams back (optionally inside ```json fences). */
export const ModelJSON = z.object({
  plan: z.array(z.string()).default([]),
  rationale: z.string().optional(),
  actions: z.array(Action).default([]),
  message_markdown: z.string().optional(),
});

export type ModelJSONT = z.infer<typeof ModelJSON>;

/** Parse the model output into the structured contract, with helpful errors. */
export function parseModelJSON(input: string): ModelJSONT {
  const json = extractJsonObject(input);
  const parsed = ModelJSON.safeParse(json);
  if (!parsed.success) {
    const err = parsed.error.issues.map(i => `${i.path.join(".")}: ${i.message}`).join("; ");
    throw new Error(`Model JSON did not match schema: ${err}`);
  }
  return parsed.data;
}

/** Accept raw JSON or a fenced ```json block; choose the last well-formed object. */
export function extractJsonObject(text: string): unknown {
  const fenceMatch = Array.from(text.matchAll(/```json\s*([\s\S]*?)\s*```/g)).map(m => m[1]);
  const candidates = fenceMatch.length ? fenceMatch : [text];
  let lastGood: unknown = {};
  for (const c of candidates) {
    try {
      lastGood = JSON.parse(c);
    } catch {
      // ignore malformed candidates
    }
  }
  return lastGood;
}

// ── FILE: src\core\errors.ts
export class ForgeError extends Error {
  constructor(
    message: string,
    public code: string,
    public context?: Record<string, unknown>
  ) {
    super(message);
    this.name = "ForgeError";
  }
}

export class ToolError extends ForgeError {
  constructor(
    tool: string,
    message: string,
    context?: Record<string, unknown>
  ) {
    super(message, `TOOL_${tool.toUpperCase()}_ERROR`, { tool, ...context });
    this.name = "ToolError";
  }
}

export class ValidationError extends ForgeError {
  constructor(
    message: string,
    field?: string,
    context?: Record<string, unknown>
  ) {
    super(message, "VALIDATION_ERROR", { field, ...context });
    this.name = "ValidationError";
  }
}

export class NetworkError extends ForgeError {
  constructor(
    message: string,
    statusCode?: number,
    context?: Record<string, unknown>
  ) {
    super(message, "NETWORK_ERROR", { statusCode, ...context });
    this.name = "NetworkError";
  }
}

export class ConfigurationError extends ForgeError {
  constructor(
    message: string,
    configKey?: string,
    context?: Record<string, unknown>
  ) {
    super(message, "CONFIGURATION_ERROR", { configKey, ...context });
    this.name = "ConfigurationError";
  }
}

export class ExecutionError extends ForgeError {
  constructor(
    message: string,
    command?: string,
    exitCode?: number,
    context?: Record<string, unknown>
  ) {
    super(message, "EXECUTION_ERROR", { command, exitCode, ...context });
    this.name = "ExecutionError";
  }
}

// Error handling utilities
export function handleError(error: unknown): ForgeError {
  if (error instanceof ForgeError) {
    return error;
  }

  if (error instanceof Error) {
    // Check for common error patterns
    if (error.message.includes("ENOENT")) {
      return new ForgeError(
        `File or directory not found: ${error.message}`,
        "FILE_NOT_FOUND",
        { originalError: error.message }
      );
    }

    if (error.message.includes("EACCES")) {
      return new ForgeError(
        `Permission denied: ${error.message}`,
        "PERMISSION_DENIED",
        { originalError: error.message }
      );
    }

    if (error.message.includes("ECONNREFUSED")) {
      return new NetworkError(
        `Connection refused: ${error.message}`,
        undefined,
        { originalError: error.message }
      );
    }

    if (error.message.toLowerCase().includes("timeout") || error.message.toLowerCase().includes("timed out")) {
      return new ExecutionError(
        `Operation timed out: ${error.message}`,
        undefined,
        undefined,
        { originalError: error.message }
      );
    }

    // Generic error wrapper
    return new ForgeError(
      error.message,
      "UNKNOWN_ERROR",
      { originalError: error.message, stack: error.stack }
    );
  }

  // Non-Error objects
  return new ForgeError(
    `Unknown error: ${String(error)}`,
    "UNKNOWN_ERROR",
    { originalError: error }
  );
}

export function isRetryableError(error: ForgeError): boolean {
  // Check for specific retryable conditions first
  if (error.code === "NETWORK_ERROR" && error.context?.statusCode) {
    const statusCode = error.context.statusCode as number;
    return statusCode >= 500 || statusCode === 429; // Server errors or rate limiting
  }

  if (error.code === "EXECUTION_ERROR") {
    return error.message.toLowerCase().includes("timeout") || error.message.toLowerCase().includes("timed out");
  }

  // Check general retryable codes
  const retryableCodes = [
    "NETWORK_ERROR",
    "EXECUTION_ERROR", // if it's a timeout
  ];

  if (retryableCodes.includes(error.code)) {
    return true;
  }

  return false;
}

export function getErrorDisplayMessage(error: ForgeError): string {
  const context = error.context || {};
  
  switch (error.code) {
    case "VALIDATION_ERROR":
      return `Validation failed: ${error.message}`;
    
    case "TOOL_OPEN_FILE_ERROR":
      return `Failed to open file: ${error.message}`;
    
    case "TOOL_WRITE_FILE_ERROR":
      return `Failed to write file: ${error.message}`;
    
    case "TOOL_GIT_ERROR":
      return `Git operation failed: ${error.message}`;
    
    case "TOOL_RUN_ERROR":
      return `Command execution failed: ${error.message}`;
    
    case "NETWORK_ERROR":
      const statusCode = context.statusCode as number;
      return `Network error${statusCode ? ` (${statusCode})` : ""}: ${error.message}`;
    
    case "CONFIGURATION_ERROR":
      return `Configuration error: ${error.message}`;
    
    case "EXECUTION_ERROR":
      const command = context.command as string;
      const exitCode = context.exitCode as number;
      return `Execution failed${command ? ` (${command})` : ""}${exitCode ? ` [exit code: ${exitCode}]` : ""}: ${error.message}`;
    
    default:
      return error.message;
  }
}

export function logError(error: ForgeError, logger?: (message: string) => void): void {
  const logFn = logger || console.error;
  
  logFn(`[${error.code}] ${getErrorDisplayMessage(error)}`);
  
  if (error.context && Object.keys(error.context).length > 0) {
    logFn("Context:", error.context);
  }
  
  if (error.stack) {
    logFn("Stack trace:", error.stack);
  }
}

// ── FILE: src\core\flows\plan_only.ts
import type { ChatMessage } from "../../providers/types.js";
import type { UsageMeta } from "../usage.js";
import type { LLM } from "../../providers/types.js";
import { systemPrompt, type TraceLevel } from "../prompts/system.js";
import { parseModelJSON } from "../contracts.js";

export interface PlanOnlyResult {
  plan: string[];
  rationale?: string;
  message_markdown?: string;
  usage?: UsageMeta;
  raw: string;
}

/**
 * Ask the model for a concise plan only (no actions executed).
 * Returns plan, optional rationale, optional human-facing markdown, and usage when available.
 */
export async function planOnly(
  llm: LLM,
  input: string,
  opts: { trace?: TraceLevel; temperature?: number } = {}
): Promise<PlanOnlyResult> {
  const sys = systemPrompt(opts.trace ?? "plan");
  const messages: ChatMessage[] = [
    { role: "system", content: sys },
    {
      role: "user",
      content:
        "PLAN ONLY: Provide a concise high-level plan and brief rationale. Do NOT include actions. Respond with valid JSON.",
    },
    { role: "user", content: input },
  ];

  // LLM interface: non-streaming call (no extra options beyond 'stream')
  const res = await llm.chat(messages);

  const raw = res.text ?? "";
  const json = parseModelJSON(raw);
  return {
    plan: json.plan ?? [],
    rationale: json.rationale,
    message_markdown: json.message_markdown,
    usage: res.usage,
    raw,
  };
}

// ── FILE: src\core\flows\summarize_changes.ts
import type { TraceLevel } from "../prompts/system.js";
import { runCommand } from "../tools/run.js";
import { GrokProvider } from "../../providers/grok.js";

/**
 * Collect staged & unstaged diffs (patch text) suitable for LLM review.
 * Returns a combined string; large outputs are truncated from the middle to fit caps.
 */
export async function collectWorkingDiffs(opts: {
  cwd?: string;
  maxChars?: number; // hard cap on total diff text we pass to the model
} = {}): Promise<{ text: string; truncated: boolean }> {
  const cwd = opts.cwd ?? process.cwd();
  const cap = opts.maxChars ?? 180_000; // ~180k chars (~90-120k tokens chars ≈ conservative)

  // Plain patch diffs; --no-color ensures clean text; -U3 keeps minimal context.
  const { stdout: unstaged } = await runCommand("git diff -U3 --no-color", { cwd, stdioCapBytes: cap * 2 });
  const { stdout: staged } = await runCommand("git diff --cached -U3 --no-color", { cwd, stdioCapBytes: cap * 2 });

  const parts: string[] = [];
  if (unstaged.trim().length) {
    parts.push("## Unstaged\n```diff\n" + unstaged.trim() + "\n```");
  }
  if (staged.trim().length) {
    parts.push("## Staged\n```diff\n" + staged.trim() + "\n```");
  }

  let combined = parts.join("\n\n");
  if (!combined) {
    combined = "_No uncommitted changes detected (staged or unstaged)._";
    return { text: combined, truncated: false };
  }

  // Truncate from the middle if necessary (keep head & tail for context).
  if (combined.length > cap) {
    const head = combined.slice(0, Math.floor(cap * 0.65));
    const tail = combined.slice(-Math.floor(cap * 0.35));
    combined = `${head}\n\n…\n\n${tail}\n\n<!-- truncated diff: ${(combined.length - cap)} chars removed -->`;
    return { text: combined, truncated: true };
  }
  return { text: combined, truncated: false };
}

/**
 * Ask Grok to summarize code changes from diffs only (no commit history).
 * Returns the model’s markdown summary.
 */
export async function summarizeChangesWithModel(llm: GrokProvider, opts: {
  cwd?: string;
  trace?: TraceLevel;
  temperature?: number;
  maxChars?: number;
} = {}): Promise<string> {
  const { text: diffs, truncated } = await collectWorkingDiffs({
    cwd: opts.cwd,
    maxChars: opts.maxChars ?? 180_000,
  });

  const system = [
    "You are an expert code-review assistant.",
    "Summarize the CODE CHANGES present in the provided DIFFS.",
    "STRICT REQUIREMENTS:",
    "- Do NOT mention commit messages, commit history, or `git log`.",
    "- Base your summary ONLY on the diff content (staged + unstaged).",
    "- Keep it concise and actionable for an engineer scanning changes.",
    "- Prefer categories: Features, Fixes, Refactors, Tests, Docs, Chore.",
    "- Note any breaking changes, migrations, risky areas, or follow-ups.",
    "- Output plain Markdown. No JSON. No preface. No concluding fluff."
  ].join("\n");

  const user = [
    "### Diffs to review",
    diffs,
    truncated ? "\n\n_Note: diffs were truncated for length; summarize from what is shown._" : "",
  ].join("\n");

  const res = await llm.chat(
    [
      { role: "system", content: system },
      { role: "user", content: user },
    ],
    {
      stream: false,
      temperature: opts.temperature ?? 0.2,
      reasoning: (opts.trace ?? "plan") !== "none",
      maxTokens: 1024,
    }
  ) as { text: string };

  return (res.text ?? "").trim();
}

/**
 * Generate a comprehensive codebase summary by analyzing the project structure and key files.
 * This is different from diff summaries - it analyzes the entire codebase.
 */
export async function summarizeCodebaseWithModel(llm: GrokProvider, opts: {
  cwd?: string;
  trace?: TraceLevel;
  temperature?: number;
  maxChars?: number;
} = {}): Promise<string> {
  const cwd = opts.cwd ?? process.cwd();
  
  // Collect key information about the codebase
  const info = await collectCodebaseInfo(cwd);
  
  const system = [
    "You are an expert software architect and code reviewer.",
    "Analyze the provided codebase information and create a comprehensive summary.",
    "STRICT REQUIREMENTS:",
    "- Focus on architecture, key technologies, and main functionality",
    "- Identify the project type, framework, and primary purpose",
    "- Highlight key files, dependencies, and project structure",
    "- Note any patterns, conventions, or architectural decisions",
    "- Keep it professional and concise for senior engineers",
    "- Output structured Markdown with clear sections",
    "- Do NOT include raw file contents - only analysis and insights",
    "- Provide actionable insights about the codebase structure and design",
    "- Identify potential areas for improvement or notable architectural patterns",
    "- Focus on what makes this codebase unique or well-designed"
  ].join("\n");

  const user = [
    "### Codebase Analysis Request",
    "Please analyze this codebase and provide a comprehensive summary:",
    "",
    "**Project Structure:**",
    info.structure,
    "",
    "**Key Files:**",
    info.keyFiles,
    "",
    "**Dependencies:**",
    info.dependencies,
    "",
    "**Configuration:**",
    info.configuration,
    "",
    "Please provide a senior-level analysis of this codebase."
  ].join("\n");

  const res = await llm.chat(
    [
      { role: "system", content: system },
      { role: "user", content: user },
    ],
    {
      stream: false,
      temperature: opts.temperature ?? 0.3,
      reasoning: (opts.trace ?? "plan") !== "none",
      maxTokens: 2048,
    }
  ) as { text: string };

  return (res.text ?? "").trim();
}

/**
 * Collect key information about the codebase structure and files
 */
async function collectCodebaseInfo(cwd: string): Promise<{
  structure: string;
  keyFiles: string;
  dependencies: string;
  configuration: string;
}> {
  const { runCommand } = await import("../tools/run.js");
  
  // Get project structure - analyze and categorize files
  let structure = "Unable to determine structure";
  try {
    if (process.platform === 'win32') {
      const { stdout } = await runCommand("dir /s /b /a-d", { cwd, stdioCapBytes: 15000 });
      const files = stdout.split('\n').filter(f => f.trim());
      
      // Categorize files by type and directory
      const categorized = categorizeFiles(files);
      structure = formatFileStructure(categorized);
    } else {
      const { stdout } = await runCommand("find . -type f | head -100", { cwd, stdioCapBytes: 15000 });
      const files = stdout.split('\n').filter(f => f.trim());
      const categorized = categorizeFiles(files);
      structure = formatFileStructure(categorized);
    }
  } catch (e) {
    structure = "Error reading directory structure";
  }

  // Get key files
  let keyFiles = "Unable to determine key files";
  try {
    const keyFilePatterns = ['package.json', 'README.md', 'tsconfig.json', 'next.config.js', 'tailwind.config.js'];
    const foundFiles: string[] = [];
    
    for (const pattern of keyFilePatterns) {
      try {
        if (process.platform === 'win32') {
          const { stdout } = await runCommand(`dir /s /b ${pattern}`, { cwd, stdioCapBytes: 1000 });
          if (stdout.trim()) foundFiles.push(stdout.trim());
        } else {
          const { stdout } = await runCommand(`find . -name "${pattern}"`, { cwd, stdioCapBytes: 1000 });
          if (stdout.trim()) foundFiles.push(stdout.trim());
        }
      } catch (e) {
        // Ignore individual file errors
      }
    }
    keyFiles = foundFiles.join('\n') || "No key files found";
  } catch (e) {
    keyFiles = "Error finding key files";
  }

  // Get dependencies from package.json
  let dependencies = "Unable to read dependencies";
  try {
    const { readFile } = await import("node:fs/promises");
    const packageJson = JSON.parse(await readFile(`${cwd}/package.json`, 'utf-8'));
    const deps = {
      dependencies: packageJson.dependencies || {},
      devDependencies: packageJson.devDependencies || {},
      scripts: packageJson.scripts || {}
    };
    dependencies = JSON.stringify(deps, null, 2);
  } catch (e) {
    dependencies = "Error reading package.json";
  }

  // Get configuration files
  let configuration = "Unable to read configuration";
  try {
    const configFiles = ['tsconfig.json', 'next.config.js', 'tailwind.config.js', 'eslint.config.js'];
    const configs: string[] = [];
    
    for (const file of configFiles) {
      try {
        const { readFile } = await import("node:fs/promises");
        const content = await readFile(`${cwd}/${file}`, 'utf-8');
        configs.push(`**${file}:**\n${content.slice(0, 500)}${content.length > 500 ? '...' : ''}`);
      } catch (e) {
        // File doesn't exist or can't be read
      }
    }
    configuration = configs.join('\n\n') || "No configuration files found";
  } catch (e) {
    configuration = "Error reading configuration files";
  }

  return { structure, keyFiles, dependencies, configuration };
}

/**
 * Categorize files by type and directory structure
 */
function categorizeFiles(files: string[]): {
  sourceFiles: string[];
  configFiles: string[];
  testFiles: string[];
  docsFiles: string[];
  otherFiles: string[];
  directories: string[];
} {
  const sourceFiles: string[] = [];
  const configFiles: string[] = [];
  const testFiles: string[] = [];
  const docsFiles: string[] = [];
  const otherFiles: string[] = [];
  const directories: string[] = [];

  for (const file of files) {
    const fileName = file.toLowerCase();
    const ext = fileName.split('.').pop() || '';
    
    // Extract directory structure
    const pathParts = file.split(/[\\\/]/);
    if (pathParts.length > 1) {
      const dir = pathParts.slice(0, -1).join('/');
      if (!directories.includes(dir)) {
        directories.push(dir);
      }
    }
    
    // Categorize by file type
    if (['ts', 'tsx', 'js', 'jsx'].includes(ext)) {
      if (fileName.includes('test') || fileName.includes('spec') || fileName.includes('__tests__')) {
        testFiles.push(file);
      } else {
        sourceFiles.push(file);
      }
    } else if (['json', 'js', 'ts', 'yaml', 'yml', 'toml', 'ini'].includes(ext) && 
               (fileName.includes('config') || fileName.includes('package') || fileName.includes('tsconfig'))) {
      configFiles.push(file);
    } else if (['md', 'txt', 'rst'].includes(ext)) {
      docsFiles.push(file);
    } else {
      otherFiles.push(file);
    }
  }

  return { sourceFiles, configFiles, testFiles, docsFiles, otherFiles, directories };
}

/**
 * Format file structure in a readable way
 */
function formatFileStructure(categorized: {
  sourceFiles: string[];
  configFiles: string[];
  testFiles: string[];
  docsFiles: string[];
  otherFiles: string[];
  directories: string[];
}): string {
  const { sourceFiles, configFiles, testFiles, docsFiles, otherFiles, directories } = categorized;
  
  let result = "## Project Structure\n\n";
  
  // Show directory structure
  if (directories.length > 0) {
    result += "**Key Directories:**\n";
    const sortedDirs = directories.sort();
    for (const dir of sortedDirs.slice(0, 20)) { // Limit to first 20 directories
      result += `- ${dir}\n`;
    }
    if (directories.length > 20) {
      result += `- ... and ${directories.length - 20} more directories\n`;
    }
    result += "\n";
  }
  
  // Show file counts by category
  result += "**File Distribution:**\n";
  result += `- Source files: ${sourceFiles.length} (TypeScript/JavaScript)\n`;
  result += `- Test files: ${testFiles.length}\n`;
  result += `- Config files: ${configFiles.length}\n`;
  result += `- Documentation: ${docsFiles.length}\n`;
  result += `- Other files: ${otherFiles.length}\n\n`;
  
  // Show key source files (limit to most important)
  if (sourceFiles.length > 0) {
    result += "**Key Source Files:**\n";
    const importantFiles = sourceFiles.filter(f => 
      f.includes('app/') || f.includes('pages/') || f.includes('components/') || 
      f.includes('lib/') || f.includes('utils/') || f.includes('hooks/')
    ).slice(0, 15);
    
    for (const file of importantFiles) {
      result += `- ${file}\n`;
    }
    if (sourceFiles.length > 15) {
      result += `- ... and ${sourceFiles.length - 15} more source files\n`;
    }
  }
  
  return result;
}

// ── FILE: src\core\heuristics.ts
// Minimal, conservative intent heuristics for obvious user asks.
// Only triggers when the model produced no actions.
// We intentionally support a tiny surface area to avoid surprises.

import type { ToolCall } from "./tools/registry.js";

function extractFileName(text: string): string | undefined {
  // Matches:
  // - create a file named test.txt
  // - create new file "test.txt"
  // - make file 'test.txt'
  // - touch file test.txt
  const rx =
    /\b(?:create|make|touch)\s+(?:a|an|the)?\s*(?:new\s+)?file(?:\s+(?:named|called))?\s+(?:"([^"]+)"|'([^']+)'|([^\s"']+))/i;
  const m = text.match(rx);
  if (!m) return undefined;
  return m[1] || m[2] || m[3];
}

function extractInlineContent(text: string): string | undefined {
  // Matches:
  // - with content "hello"
  // - with text 'hello'
  // - containing "hello world"
  const rx =
    /\b(?:with\s+(?:content|text)|containing)\s+(?:"([^"]+)"|'([^']+)'|(.+))$/i;
  const m = text.match(rx);
  if (!m) return undefined;
  const raw = m[1] || m[2] || m[3];
  return (raw ?? "").trim();
}

export function inferToolCallsFromUser(text: string): ToolCall[] {
  const t = text.trim();
  const name = extractFileName(t);
  if (name) {
    const content = extractInlineContent(t) ?? "";
    return [
      {
        tool: "write_file",
        args: { path: name, content },
      },
    ];
  }
  return [];
}

// ── FILE: src\core\logger.ts
import pino from "pino";

export type LogLevel = "trace" | "debug" | "info" | "warn" | "error" | "fatal";

export interface LoggerConfig {
  level?: LogLevel;
  pretty?: boolean;
  destination?: string;
}

class Logger {
  private pino: pino.Logger;
  private context: Record<string, unknown> = {};

  constructor(config: LoggerConfig = {}) {
    const { level = "info", pretty = false, destination } = config;

    const pinoConfig: pino.LoggerOptions = {
      level
    };

    // Add pretty transport if pretty is true
    if (pretty) {
      pinoConfig.transport = {
        target: "pino-pretty",
        options: {
          colorize: true,
          translateTime: "SYS:standard",
          ignore: "pid,hostname"
        }
      };
    }

    this.pino = destination 
      ? pino(pinoConfig, pino.destination(destination))
      : pino(pinoConfig);
  }

  setContext(context: Record<string, unknown>): void {
    this.context = { ...this.context, ...context };
  }

  clearContext(): void {
    this.context = {};
  }

  private mergeContext(extra?: Record<string, unknown>): Record<string, unknown> {
    return { ...this.context, ...extra };
  }

  trace(message: string, extra?: Record<string, unknown>): void {
    this.pino.trace(this.mergeContext(extra), message);
  }

  debug(message: string, extra?: Record<string, unknown>): void {
    this.pino.debug(this.mergeContext(extra), message);
  }

  info(message: string, extra?: Record<string, unknown>): void {
    this.pino.info(this.mergeContext(extra), message);
  }

  warn(message: string, extra?: Record<string, unknown>): void {
    this.pino.warn(this.mergeContext(extra), message);
  }

  error(message: string, extra?: Record<string, unknown>): void {
    this.pino.error(this.mergeContext(extra), message);
  }

  fatal(message: string, extra?: Record<string, unknown>): void {
    this.pino.fatal(this.mergeContext(extra), message);
  }

  // Convenience methods for common patterns
  logToolExecution(tool: string, args: any, result?: any, error?: any): void {
    this.info(`Tool execution: ${tool}`, {
      tool,
      args,
      result,
      error: error ? { message: error.message, code: error.code } : undefined
    });
  }

  logUserInput(input: string): void {
    this.info("User input", { input: input.slice(0, 200) + (input.length > 200 ? "..." : "") });
  }

  logAssistantResponse(response: string, actions?: any[]): void {
    this.info("Assistant response", { 
      response: response.slice(0, 200) + (response.length > 200 ? "..." : ""),
      actions: actions?.length || 0
    });
  }

  logError(error: Error, context?: Record<string, unknown>): void {
    this.error("Error occurred", {
      error: {
        message: error.message,
        name: error.name,
        stack: error.stack
      },
      ...context
    });
  }

  logPerformance(operation: string, duration: number, extra?: Record<string, unknown>): void {
    this.info(`Performance: ${operation}`, {
      operation,
      duration,
      ...extra
    });
  }
}

// Global logger instance
let globalLogger: Logger | null = null;

export function createLogger(config?: LoggerConfig): Logger {
  return new Logger(config);
}

export function getLogger(): Logger {
  if (!globalLogger) {
    globalLogger = createLogger({
      level: (process.env.LOG_LEVEL as LogLevel) || "info",
      pretty: process.env.NODE_ENV !== "production"
    });
  }
  return globalLogger;
}

export function setLogLevel(level: LogLevel): void {
  if (globalLogger) {
    globalLogger = createLogger({
      level,
      pretty: process.env.NODE_ENV !== "production"
    });
  } else {
    process.env.LOG_LEVEL = level;
  }
}

export function setGlobalLogger(logger: Logger): void {
  globalLogger = logger;
}

// Convenience functions that use the global logger
export const log = {
  trace: (message: string, extra?: Record<string, unknown>) => getLogger().trace(message, extra),
  debug: (message: string, extra?: Record<string, unknown>) => getLogger().debug(message, extra),
  info: (message: string, extra?: Record<string, unknown>) => getLogger().info(message, extra),
  warn: (message: string, extra?: Record<string, unknown>) => getLogger().warn(message, extra),
  error: (message: string, extra?: Record<string, unknown>) => getLogger().error(message, extra),
  fatal: (message: string, extra?: Record<string, unknown>) => getLogger().fatal(message, extra),
  
  tool: (tool: string, args: any, result?: any, error?: any) => getLogger().logToolExecution(tool, args, result, error),
  user: (input: string) => getLogger().logUserInput(input),
  assistant: (response: string, actions?: any[]) => getLogger().logAssistantResponse(response, actions),
  performance: (operation: string, duration: number, extra?: Record<string, unknown>) => getLogger().logPerformance(operation, duration, extra)
};

// ── FILE: src\core\plugins.ts
import { ToolError } from "./errors.js";
import { log } from "./logger.js";

export interface PluginTool {
  name: string;
  description: string;
  execute: (args: Record<string, any>) => Promise<any>;
  validate?: (args: Record<string, any>) => void;
  schema?: {
    required?: string[];
    properties?: Record<string, any>;
  };
}

export interface Plugin {
  name: string;
  version: string;
  description: string;
  tools: PluginTool[];
  init?: () => Promise<void> | void;
  cleanup?: () => Promise<void> | void;
}

export class PluginManager {
  private plugins: Map<string, Plugin> = new Map();
  private tools: Map<string, PluginTool> = new Map();
  private initialized = false;

  async registerPlugin(plugin: Plugin): Promise<void> {
    try {
      log.info("Registering plugin", { name: plugin.name, version: plugin.version });
      
      // Validate plugin
      this.validatePlugin(plugin);
      
      // Check for conflicts
      if (this.plugins.has(plugin.name)) {
        throw new Error(`Plugin '${plugin.name}' is already registered`);
      }
      
      // Check for tool name conflicts
      for (const tool of plugin.tools) {
        if (this.tools.has(tool.name)) {
          throw new Error(`Tool '${tool.name}' is already registered by another plugin`);
        }
      }
      
      // Register plugin
      this.plugins.set(plugin.name, plugin);
      
      // Register tools
      for (const tool of plugin.tools) {
        this.tools.set(tool.name, tool);
        log.debug("Registered tool", { tool: tool.name, plugin: plugin.name });
      }
      
      // Initialize plugin if it has an init function
      if (plugin.init) {
        await plugin.init();
        log.debug("Initialized plugin", { name: plugin.name });
      }
      
      log.info("Plugin registered successfully", { name: plugin.name, toolCount: plugin.tools.length });
    } catch (error) {
      log.error("Failed to register plugin", { 
        name: plugin.name, 
        error: error instanceof Error ? error.message : String(error) 
      });
      throw error;
    }
  }

  async unregisterPlugin(pluginName: string): Promise<void> {
    try {
      const plugin = this.plugins.get(pluginName);
      if (!plugin) {
        throw new Error(`Plugin '${pluginName}' is not registered`);
      }
      
      log.info("Unregistering plugin", { name: pluginName });
      
      // Cleanup plugin if it has a cleanup function
      if (plugin.cleanup) {
        await plugin.cleanup();
        log.debug("Cleaned up plugin", { name: pluginName });
      }
      
      // Remove tools
      for (const tool of plugin.tools) {
        this.tools.delete(tool.name);
        log.debug("Unregistered tool", { tool: tool.name, plugin: pluginName });
      }
      
      // Remove plugin
      this.plugins.delete(pluginName);
      
      log.info("Plugin unregistered successfully", { name: pluginName });
    } catch (error) {
      log.error("Failed to unregister plugin", { 
        name: pluginName, 
        error: error instanceof Error ? error.message : String(error) 
      });
      throw error;
    }
  }

  async executeTool(toolName: string, args: Record<string, any>): Promise<any> {
    const tool = this.tools.get(toolName);
    if (!tool) {
      throw new ToolError("plugin", `Tool '${toolName}' not found`, { toolName });
    }
    
    try {
      // Validate arguments if tool has validation
      if (tool.validate) {
        tool.validate(args);
      }
      
      log.debug("Executing plugin tool", { tool: toolName, args });
      
      // Execute tool
      const result = await tool.execute(args);
      
      log.debug("Plugin tool executed successfully", { tool: toolName });
      return result;
    } catch (error) {
      const forgeError = error instanceof Error ? error : new Error(String(error));
      log.error("Plugin tool execution failed", { 
        tool: toolName, 
        error: forgeError.message 
      });
      throw new ToolError("plugin", forgeError.message, { 
        tool: toolName, 
        args,
        originalError: forgeError 
      });
    }
  }

  getAvailableTools(): string[] {
    return Array.from(this.tools.keys());
  }

  getPluginInfo(pluginName: string): Plugin | undefined {
    return this.plugins.get(pluginName);
  }

  getAllPlugins(): Plugin[] {
    return Array.from(this.plugins.values());
  }

  getToolInfo(toolName: string): PluginTool | undefined {
    return this.tools.get(toolName);
  }

  private validatePlugin(plugin: Plugin): void {
    if (!plugin.name || typeof plugin.name !== "string") {
      throw new Error("Plugin must have a valid name");
    }
    
    if (!plugin.version || typeof plugin.version !== "string") {
      throw new Error("Plugin must have a valid version");
    }
    
    if (!plugin.description || typeof plugin.description !== "string") {
      throw new Error("Plugin must have a valid description");
    }
    
    if (!Array.isArray(plugin.tools) || plugin.tools.length === 0) {
      throw new Error("Plugin must have at least one tool");
    }
    
    for (const tool of plugin.tools) {
      this.validateTool(tool);
    }
  }

  private validateTool(tool: PluginTool): void {
    if (!tool.name || typeof tool.name !== "string") {
      throw new Error("Tool must have a valid name");
    }
    
    if (!tool.description || typeof tool.description !== "string") {
      throw new Error("Tool must have a valid description");
    }
    
    if (typeof tool.execute !== "function") {
      throw new Error("Tool must have an execute function");
    }
    
    if (tool.validate && typeof tool.validate !== "function") {
      throw new Error("Tool validate must be a function");
    }
  }
}

// Global plugin manager instance
let globalPluginManager: PluginManager | null = null;

export function getPluginManager(): PluginManager {
  if (!globalPluginManager) {
    globalPluginManager = new PluginManager();
  }
  return globalPluginManager;
}

export function setPluginManager(manager: PluginManager): void {
  globalPluginManager = manager;
}

// Convenience functions
export async function registerPlugin(plugin: Plugin): Promise<void> {
  return getPluginManager().registerPlugin(plugin);
}

export async function unregisterPlugin(pluginName: string): Promise<void> {
  return getPluginManager().unregisterPlugin(pluginName);
}

export async function executePluginTool(toolName: string, args: Record<string, any>): Promise<any> {
  return getPluginManager().executeTool(toolName, args);
}

export function getAvailablePluginTools(): string[] {
  return getPluginManager().getAvailableTools();
}

export function getPluginInfo(pluginName: string): Plugin | undefined {
  return getPluginManager().getPluginInfo(pluginName);
}

export function getAllPlugins(): Plugin[] {
  return getPluginManager().getAllPlugins();
}

export function getToolInfo(toolName: string): PluginTool | undefined {
  return getPluginManager().getToolInfo(toolName);
}

// ── FILE: src\core\prompts\system.ts
// src/core/prompts/system.ts
export type TraceLevel = "none" | "plan" | "verbose";

import { loadMemory } from "../../state/memory.js";

/**
 * Builds the core system prompt. If `memory` is undefined, this function will
 * automatically attempt to load .forge/MEMORY.md and append it as "PROJECT MEMORY".
 */
export function systemPrompt(trace: TraceLevel = "plan", memory?: string): string {
  const traceInstructions =
    trace === "none"
      ? `Do not include "rationale".`
      : trace === "plan"
      ? `Include a concise "rationale" (<= 2 short sentences).`
      : `Include a concise "rationale" (<= 3 short sentences). Avoid private or hidden chain-of-thought; summarize only.`;

  // Auto-load project memory if caller didn't provide it
  const mem = typeof memory === "string" ? memory : loadMemory();

  return [
    `You are a senior software engineer & careful AI agent working in a live repository.`,
    `You can request files, propose patches (unified diff), and run commands via the host tools.`,
    `CRITICAL OUTPUT CONTRACT: respond ONLY with a single JSON object matching the schema.`,
    traceInstructions,
    `SCHEMA:`,
    `{
  "plan": [ "short step", "short step", "."],
  "rationale": "short summary of why these steps",
  "actions": [
    { "tool": "open_file", "path": "path/to/file" },
    { "tool": "run", "cmd": "npm test --silent", "timeoutSec": 120 },
    { "tool": "apply_patch", "path": "src/x.ts", "patch": "UNIFIED_DIFF" },
    { "tool": "write_file", "path": "README.md", "content": "." },
    { "tool": "git", "subtool": "commit", "args": { "message": "fix: ." } }
  ],
  "message_markdown": "human-facing notes (optional)"
}`,
    `Rules:
- Never output explanations or markdown outside the JSON.
- Prefer small, safe changes; ask for missing info by adding an action that requests it.
- Use unified diff for edits.
- Keep "plan" high-level. Keep "rationale" brief; do not reveal raw chain-of-thought.`,
    mem ? `\nPROJECT MEMORY:\n${mem}\n` : "",
  ].join("\n");
}

// ── FILE: src\core\safety.ts
export type ApprovalLevel = "safe" | "balanced" | "auto";

function isObviouslyDestructive(cmd: string): boolean {
  const t = cmd.replace(/\s+/g, " ").trim().toLowerCase();
  const bad = [
    /\brm\s+-rf\b/, /\brmdir\b/, /\bmkfs\b/, /\bdrop\s+database\b/,
    /\bshutdown\b/, /\breboot\b/, /\bsystemctl\b/,
    /\bnpm\s+publish\b/, /\byarn\s+publish\b/, /\bpnpm\s+publish\b/,
    /\bgit\s+push\b/, /\bgit\s+reset\b/, /\bgit\s+rebase\b/,
    /\bdocker\s+push\b/, /\bkubectl\s+apply\b/,
    /curl\s+.*\|\s*sh/, /wget\s+.*\|\s*sh/
  ];
  if (bad.some(rx => rx.test(t))) return true;
  if (/[;&|]{1,2}/.test(t)) return true;
  return false;
}

export function requiresApprovalForRun(cmd: string, level: ApprovalLevel): boolean {
  if (level === "auto") return false;
  if (level === "safe") return true;
  // balanced: destructive or multi-step commands require approval
  return isObviouslyDestructive(cmd);
}

/**
 * For writes we consider size:
 *  - auto: never prompt
 *  - safe: always prompt
 *  - balanced: prompt for unknown size (patches) or > 8KB; otherwise auto-approve
 */
export function requiresApprovalForWrite(level: ApprovalLevel, sizeBytes?: number): boolean {
  if (level === "auto") return false;
  if (level === "safe") return true;
  if (sizeBytes == null) return true; // patches / unknown sizes
  return sizeBytes > 8 * 1024;
}

// ── FILE: src\core\tools\apply_patch.ts
import { spawn } from "node:child_process";

export interface ApplyPatchResult {
  ok: boolean;
  stdout: string;
  stderr: string;
  attempted: string[];
}

/**
 * Apply a unified diff using git's 3-way merge machinery for resilience.
 * Requires `git` in PATH and running inside a git repo.
 */
export async function applyPatch(patchText: string): Promise<ApplyPatchResult> {
  const attempted: string[] = [];
  // Try: git apply -3 --index --reject -
  const tryApply = (args: string[]) =>
    new Promise<{ ok: boolean; stdout: string; stderr: string }>((resolve) => {
      const child = spawn("git", ["apply", ...args, "-"], { shell: false });
      let stdout = "";
      let stderr = "";
      child.stdout.on("data", (b) => (stdout += b.toString("utf8")));
      child.stderr.on("data", (b) => (stderr += b.toString("utf8")));
      child.on("close", (code) => resolve({ ok: code === 0, stdout, stderr }));
      child.stdin.write(patchText);
      child.stdin.end();
    });

  // Attempt sequence
  const attempts: string[][] = [
    ["-3", "--index", "--reject", "--whitespace=nowarn"],
    ["-3", "--reject", "--whitespace=nowarn"],
    ["--reject", "--whitespace=nowarn"],
  ];

  for (const args of attempts) {
    attempted.push(`git apply ${args.join(" ")} -`);
    const res = await tryApply(args);
    if (res.ok) return { ok: true, stdout: res.stdout, stderr: res.stderr, attempted };
    // keep trying
  }
  // Failed
  return { ok: false, stdout: "", stderr: "git apply failed; see attempted strategies", attempted };
}

// ── FILE: src\core\tools\bundle.ts
// src/core/tools/bundle.ts
// One-file project bundler with per-file labels.
// Safe defaults: skips node_modules, dist, .git, large/binary files.

import { promises as fs } from "node:fs";
import path from "node:path";

export interface BundleOptions {
  rootDir?: string;          // project root (default: process.cwd())
  outFile?: string;          // output path (default: "project_bundle.txt")
  include?: string[];        // extensions to include
  excludeDirs?: string[];    // directories to skip
  maxFileBytes?: number;     // skip files larger than this (default: 512 KiB)
}

const DEFAULT_EXTS = [
  ".ts", ".tsx", ".js", ".jsx", ".cjs", ".mjs",
  ".json", ".md", ".yml", ".yaml",
  ".sh", ".bash", ".zsh",
  ".css", ".scss",
  ".toml", ".ini",
  ".d.ts"
];

const DEFAULT_EXCLUDE_DIRS = [
  "node_modules", ".git", "dist", "build", "out", ".next", ".turbo", ".cache", ".vercel"
];

const MAX_FILE_BYTES_DEFAULT = 512 * 1024; // 512 KiB

function isProbablyText(ext: string) {
  // Best-effort: treat known source/doc extensions as text.
  return DEFAULT_EXTS.includes(ext.toLowerCase());
}

// Explicitly annotate async generator type so TS doesn't complain under --strict.
// Yields absolute file paths.
async function* walk(
  dir: string,
  excludeDirs: Set<string>
): AsyncGenerator<string, void, unknown> {
  const entries = await fs.readdir(dir, { withFileTypes: true });
  for (const e of entries) {
    const full = path.join(dir, e.name);
    if (e.isDirectory()) {
      if (excludeDirs.has(e.name)) continue;
      yield* walk(full, excludeDirs);
    } else if (e.isFile()) {
      yield full;
    }
  }
}

function labelFor(fileRel: string) {
  const line = `// ── FILE: ${fileRel}`;
  return `${line}\n`;
}

// Discriminated union so narrowing works after checking `skip`.
type ReadSafeResult =
  | { skip: true; reason: string }
  | { skip: false; content: string };

async function readSafe(file: string, maxBytes: number): Promise<ReadSafeResult> {
  const stat = await fs.stat(file);
  if (stat.size > maxBytes) {
    return { skip: true, reason: `> ${maxBytes} bytes` };
  }
  const buf = await fs.readFile(file);
  return { skip: false, content: buf.toString("utf8") };
}

export async function bundleProject(opts: BundleOptions = {}) {
  const rootDir = path.resolve(opts.rootDir || process.cwd());
  const outFile = path.resolve(rootDir, opts.outFile || "project_bundle.txt");
  const include = (opts.include && opts.include.length > 0)
    ? opts.include.map(e => e.toLowerCase())
    : DEFAULT_EXTS;
  const excludeDirs = new Set(
    (opts.excludeDirs && opts.excludeDirs.length > 0)
      ? opts.excludeDirs
      : DEFAULT_EXCLUDE_DIRS
  );
  const maxBytes = opts.maxFileBytes ?? MAX_FILE_BYTES_DEFAULT;

  const chunks: string[] = [];
  chunks.push("// Project Bundle\n");
  chunks.push(`// Root: ${rootDir}\n`);
  chunks.push("// NOTE: Each section below is labeled with its file path.\n\n");

  for await (const abs of walk(rootDir, excludeDirs)) {
    const rel = path.relative(rootDir, abs);
    // skip output file if bundling in place
    if (path.resolve(abs) === outFile) continue;

    const ext = path.extname(abs).toLowerCase();
    if (!include.includes(ext) && !isProbablyText(ext)) continue;

    try {
      const res = await readSafe(abs, maxBytes);

      if (res.skip) {
        chunks.push(labelFor(rel));
        chunks.push(`// (skipped — ${res.reason})\n\n`);
        continue;
      }

      // res is now { skip: false, content: string } thanks to narrowing.
      chunks.push(labelFor(rel));
      chunks.push(res.content.endsWith("\n") ? res.content : res.content + "\n");
      chunks.push("\n");
    } catch (err: any) {
      chunks.push(labelFor(rel));
      chunks.push(`// (error reading file) ${String(err?.message || err)}\n\n`);
    }
  }

  const output = chunks.join("");
  await fs.writeFile(outFile, output, "utf8");
  return outFile;
}

// Optional tiny CLI for manual use (node dist/core/tools/bundle.js --out project_bundle.txt)
if (import.meta.url === `file://${process.argv[1]}`) {
  (async () => {
    const getArg = (flag: string) => {
      const i = process.argv.indexOf(flag);
      return i >= 0 ? process.argv[i + 1] : undefined;
    };
    const out = getArg("--out");
    const root = getArg("--root");
    const outPath = await bundleProject({ outFile: out, rootDir: root });
    console.log(`Bundle written to: ${outPath}`);
  })().catch((e) => {
    console.error(e);
    process.exit(1);
  });
}

// ── FILE: src\core\tools\docker.ts
import { runCommand } from "./run.js";
import { ToolError, handleError } from "../errors.js";
import { Validator } from "../validation.js";

export interface DockerBuildOptions {
  tag?: string;
  file?: string;
  context?: string;
  args?: Record<string, string>;
}

export interface DockerRunOptions {
  image: string;
  name?: string;
  ports?: string[];
  volumes?: string[];
  environment?: Record<string, string>;
  detach?: boolean;
  interactive?: boolean;
  tty?: boolean;
}

export async function dockerBuild(options: DockerBuildOptions) {
  try {
    const validator = new Validator();
    validator.validateString(options.tag, "tag", { required: true });
    validator.throwIfInvalid();

    const { tag, file, context = ".", args = {} } = options;
    
    const dockerArgs = ["build"];
    if (file) dockerArgs.push("--file", file);
    if (tag) dockerArgs.push("--tag", tag);
    
    // Add build args
    for (const [key, value] of Object.entries(args)) {
      dockerArgs.push("--build-arg", `${key}=${value}`);
    }
    
    dockerArgs.push(context);

    const result = await runCommand("docker", { args: dockerArgs });
    
    if (result.code !== 0) {
      throw new Error(`Docker build failed: ${result.stderr || result.stdout}`);
    }

    return {
      ok: true,
      output: result.stdout,
      tag
    };
  } catch (error) {
    const forgeError = handleError(error);
    throw new ToolError("docker", forgeError.message, {
      operation: "build",
      options,
      originalError: forgeError
    });
  }
}

export async function dockerRun(options: DockerRunOptions) {
  try {
    const validator = new Validator();
    validator.validateString(options.image, "image", { required: true });
    validator.throwIfInvalid();

    const { image, name, ports = [], volumes = [], environment = {}, detach = false, interactive = false, tty = false } = options;
    
    const dockerArgs = ["run"];
    
    if (name) dockerArgs.push("--name", name);
    if (detach) dockerArgs.push("--detach");
    if (interactive) dockerArgs.push("--interactive");
    if (tty) dockerArgs.push("--tty");
    
    // Add port mappings
    for (const port of ports) {
      dockerArgs.push("--publish", port);
    }
    
    // Add volume mappings
    for (const volume of volumes) {
      dockerArgs.push("--volume", volume);
    }
    
    // Add environment variables
    for (const [key, value] of Object.entries(environment)) {
      dockerArgs.push("--env", `${key}=${value}`);
    }
    
    dockerArgs.push(image);

    const result = await runCommand("docker", { args: dockerArgs });
    
    return {
      ok: result.code === 0,
      output: result.stdout,
      error: result.stderr,
      exitCode: result.code,
      image
    };
  } catch (error) {
    const forgeError = handleError(error);
    throw new ToolError("docker", forgeError.message, {
      operation: "run",
      options,
      originalError: forgeError
    });
  }
}

export async function dockerPs(options: { all?: boolean } = {}) {
  try {
    const { all = false } = options;
    
    const args = ["ps"];
    if (all) args.push("--all");

    const result = await runCommand("docker", { args });
    
    return {
      ok: true,
      output: result.stdout,
      containers: result.stdout.split('\n').length - 1 // Subtract header
    };
  } catch (error) {
    const forgeError = handleError(error);
    throw new ToolError("docker", forgeError.message, {
      operation: "ps",
      options,
      originalError: forgeError
    });
  }
}

export async function dockerStop(container: string) {
  try {
    const validator = new Validator();
    validator.validateString(container, "container", { required: true });
    validator.throwIfInvalid();

    const result = await runCommand("docker", { args: ["stop", container] });
    
    return {
      ok: result.code === 0,
      output: result.stdout,
      error: result.stderr,
      container
    };
  } catch (error) {
    const forgeError = handleError(error);
    throw new ToolError("docker", forgeError.message, {
      operation: "stop",
      container,
      originalError: forgeError
    });
  }
}

export async function dockerRemove(container: string, force = false) {
  try {
    const validator = new Validator();
    validator.validateString(container, "container", { required: true });
    validator.throwIfInvalid();

    const args = ["rm"];
    if (force) args.push("--force");
    args.push(container);

    const result = await runCommand("docker", { args });
    
    return {
      ok: result.code === 0,
      output: result.stdout,
      error: result.stderr,
      container
    };
  } catch (error) {
    const forgeError = handleError(error);
    throw new ToolError("docker", forgeError.message, {
      operation: "remove",
      container,
      force,
      originalError: forgeError
    });
  }
}

// ── FILE: src\core\tools\git.ts
import { runCommand } from "./run.js";
import { validateBranchName, validateCommitMessage } from "../validation.js";
import { ToolError, handleError, ExecutionError } from "../errors.js";

/** git status --porcelain=v1 (stable for scripts) */
export async function gitStatusPorcelain(cwd: string = process.cwd()): Promise<string> {
  const { stdout } = await runCommand("git status --porcelain=v1", { cwd });
  return stdout.trim();
}

/** git diff --numstat (machine-friendly insertions/deletions per file) */
export async function gitDiffNumstat(opts: { staged?: boolean; cwd?: string } = {}): Promise<string> {
  const { staged = false, cwd = process.cwd() } = opts;
  const cmd = staged ? "git diff --cached --numstat" : "git diff --numstat";
  const { stdout } = await runCommand(cmd, { cwd });
  return stdout.trim();
}

/** git diff --stat (human-friendly summary) */
export async function gitDiffStat(opts: { staged?: boolean; cwd?: string } = {}): Promise<string> {
  const { staged = false, cwd = process.cwd() } = opts;
  const cmd = staged ? "git diff --cached --stat" : "git diff --stat";
  const { stdout } = await runCommand(cmd, { cwd });
  return stdout.trim();
}

/** git log (compact) */
export async function gitLogShort(n = 10, cwd: string = process.cwd()): Promise<string> {
  const fmt = `%h%x09%ad%x09%an%x09%s`;
  const cmd = `git log --date=short -n ${n} --pretty=format:"${fmt}"`;
  const { stdout } = await runCommand(cmd, { cwd });
  return stdout.trim();
}

/** Create a new branch (switch -c) */
export async function gitCreateBranch(name: string, cwd: string = process.cwd()) {
  try {
    validateBranchName(name);
    
    const { stdout, stderr, code } = await runCommand("git", { 
      cwd,
      args: ["switch", "-c", name]
    });
    
    if (code !== 0) {
      throw new ExecutionError(
        `Failed to create branch: ${stderr || stdout}`,
        `git switch -c ${name}`,
        code || undefined,
        { branchName: name, cwd }
      );
    }
    
    return { ok: true, output: (stdout || stderr).trim() };
  } catch (error) {
    const forgeError = handleError(error);
    throw new ToolError("git", forgeError.message, {
      operation: "create_branch",
      branchName: name,
      cwd,
      originalError: forgeError
    });
  }
}

/** Add all & commit with message (Conventional Commits encouraged) */
export async function gitCommit(message: string, cwd: string = process.cwd()) {
  try {
    // Sanitize and validate: allow CR/LF, strip other control chars
    const sanitized = (message || "")
      .replace(/[\t\v\f\x00-\x08\x0B\x0C\x0E-\x1F\x7F]/g, "")
      .trim();
    validateCommitMessage(sanitized);
    
    const addResult = await runCommand("git", { cwd, args: ["add", "-A"], shell: false });
    if (addResult.code !== 0) {
      throw new ExecutionError(
        `Failed to add files: ${addResult.stderr || addResult.stdout}`,
        "git add -A",
        addResult.code || undefined,
        { cwd }
      );
    }
    
    // Support subject + body (split on first blank line or first newline)
    const [subject, ...rest] = sanitized.split(/\r?\n\r?\n|\r?\n/);
    const args = ["commit", "-m", subject];
    if (rest.length) {
      const body = rest.join("\n").trim();
      if (body) args.push("-m", body);
    }
    const commitResult = await runCommand("git", { cwd, args, shell: false });
    
    if (commitResult.code !== 0) {
      throw new ExecutionError(
        `Failed to commit: ${commitResult.stderr || commitResult.stdout}`,
        `git ${args.join(" ")}`,
        commitResult.code || undefined,
        { commitMessage: sanitized, cwd }
      );
    }
    
    return { ok: true, output: (commitResult.stdout || commitResult.stderr).trim() };
  } catch (error) {
    const forgeError = handleError(error);
    throw new ToolError("git", forgeError.message, {
      operation: "commit",
      commitMessage: (message || ""),
      cwd,
      originalError: forgeError
    });
  }
}

// ── FILE: src\core\tools\npm.ts
import { runCommand } from "./run.js";
import { ToolError, handleError } from "../errors.js";
import { Validator } from "../validation.js";

export interface NpmInstallOptions {
  dev?: boolean;
  global?: boolean;
  packageManager?: "npm" | "yarn" | "pnpm";
}

export interface NpmScriptOptions {
  packageManager?: "npm" | "yarn" | "pnpm";
  args?: string[];
}

export async function npmInstall(packages: string[], options: NpmInstallOptions = {}) {
  try {
    const validator = new Validator();
    validator.validateArray(packages, "packages", { required: true, minLength: 1 });
    validator.throwIfInvalid();

    const { dev = false, global = false, packageManager = "npm" } = options;
    
    const args: string[] = ["install"];
    if (dev) args.push("--save-dev");
    if (global) args.push("--global");
    args.push(...packages);

    const result = await runCommand(packageManager, { args });
    
    if (result.code !== 0) {
      throw new Error(`Package installation failed: ${result.stderr || result.stdout}`);
    }

    return {
      ok: true,
      output: result.stdout,
      packages: packages.length
    };
  } catch (error) {
    const forgeError = handleError(error);
    throw new ToolError("npm", forgeError.message, {
      operation: "install",
      packages,
      options,
      originalError: forgeError
    });
  }
}

export async function npmRunScript(script: string, options: NpmScriptOptions = {}) {
  try {
    const validator = new Validator();
    validator.validateString(script, "script", { required: true, minLength: 1 });
    validator.throwIfInvalid();

    const { packageManager = "npm", args = [] } = options;
    
    const runArgs = ["run", script, ...args];
    const result = await runCommand(packageManager, { args: runArgs });
    
    if (result.code !== 0) {
      throw new Error(`Script execution failed: ${result.stderr || result.stdout}`);
    }

    return {
      ok: true,
      output: result.stdout,
      script,
      exitCode: result.code
    };
  } catch (error) {
    const forgeError = handleError(error);
    throw new ToolError("npm", forgeError.message, {
      operation: "run_script",
      script,
      options,
      originalError: forgeError
    });
  }
}

export async function npmList(options: { global?: boolean; depth?: number } = {}) {
  try {
    const { global = false, depth = 0 } = options;
    
    const args = ["list"];
    if (global) args.push("--global");
    if (depth > 0) args.push(`--depth=${depth}`);

    const result = await runCommand("npm", { args });
    
    return {
      ok: true,
      output: result.stdout,
      global
    };
  } catch (error) {
    const forgeError = handleError(error);
    throw new ToolError("npm", forgeError.message, {
      operation: "list",
      options,
      originalError: forgeError
    });
  }
}

export async function npmOutdated() {
  try {
    const result = await runCommand("npm", { args: ["outdated"] });
    
    return {
      ok: true,
      output: result.stdout,
      hasOutdated: result.code === 0
    };
  } catch (error) {
    const forgeError = handleError(error);
    throw new ToolError("npm", forgeError.message, {
      operation: "outdated",
      originalError: forgeError
    });
  }
}

// ── FILE: src\core\tools\open_file.ts
import * as fs from "node:fs/promises";
import * as path from "node:path";
import { validateFilePath } from "../validation.js";
import { ToolError, handleError } from "../errors.js";

export interface OpenFileOptions {
  maxBytes?: number; // default 200KB
}

export async function openFile(relPath: string, opts: OpenFileOptions = {}): Promise<{
  path: string;
  content: string;
  truncated: boolean;
}> {
  try {
    validateFilePath(relPath);
    
    const abs = path.resolve(process.cwd(), relPath);
    const raw = await fs.readFile(abs);
    const max = opts.maxBytes ?? 200_000;
    if (raw.byteLength > max) {
      const slice = raw.subarray(0, max);
      return { path: abs, content: slice.toString("utf8") + "\n…(truncated)…", truncated: true };
    }
    return { path: abs, content: raw.toString("utf8"), truncated: false };
  } catch (error) {
    const forgeError = handleError(error);
    throw new ToolError("open_file", forgeError.message, {
      filePath: relPath,
      originalError: forgeError
    });
  }
}

// ── FILE: src\core\tools\pr.ts
// src/core/tools/pr.ts
// Minimal GitHub PR helper via the official `gh` CLI.
// Requires `gh` installed and authenticated (`gh auth login`).

import { spawn } from "node:child_process";

export interface CreatePrOptions {
  title: string;
  body?: string;
  draft?: boolean;
  base?: string;   // e.g. "main"
  head?: string;   // current branch by default
  cwd?: string;    // repo root (default: process.cwd())
  extraArgs?: string[]; // pass-through flags if you need
}

export function createPullRequest(opts: CreatePrOptions): Promise<{ url?: string; stdout: string; stderr: string; code: number; }> {
  return new Promise((resolve) => {
    const args = ["pr", "create"];
    if (opts.title) args.push("--title", opts.title);
    if (opts.body)  args.push("--body", opts.body);
    if (opts.draft) args.push("--draft");
    if (opts.base)  args.push("--base", opts.base);
    if (opts.head)  args.push("--head", opts.head);
    if (opts.extraArgs && opts.extraArgs.length) args.push(...opts.extraArgs);

    const child = spawn("gh", args, {
      cwd: opts.cwd || process.cwd(),
      stdio: ["ignore", "pipe", "pipe"],
      shell: false
    });

    let stdout = "";
    let stderr = "";
    child.stdout.on("data", (d) => (stdout += d.toString()));
    child.stderr.on("data", (d) => (stderr += d.toString()));
    child.on("close", (code) => {
      // gh prints the PR URL on success to stdout
      const urlMatch = stdout.match(/https?:\/\/\S+/);
      resolve({ url: urlMatch?.[0], stdout, stderr, code: code ?? 0 });
    });
  });
}

// ── FILE: src\core\tools\registry.ts
import { openFile } from "./open_file.js";
import { writeFileSafe } from "./write_file.js";
import { applyPatch } from "./apply_patch.js";
import { runCommand } from "./run.js";
import { gitCommit, gitCreateBranch } from "./git.js";
import { npmInstall, npmRunScript, npmList, npmOutdated } from "./npm.js";
import { dockerBuild, dockerRun, dockerPs, dockerStop, dockerRemove } from "./docker.js";
import { searchInFiles, findFiles } from "./search.js";
import { getPluginManager, executePluginTool, getAvailablePluginTools } from "../plugins.js";

export type ToolName = 
  | "open_file" 
  | "write_file" 
  | "apply_patch" 
  | "run" 
  | "git"
  | "npm"
  | "docker"
  | "search";

export interface ToolCall {
  tool: ToolName;
  args: Record<string, any>;
}

const CMD_TIMEOUT = Number.parseInt(process.env.FORGE_CMD_TIMEOUT_MS || "") || undefined;
const STDIO_CAP = Number.parseInt(process.env.FORGE_TOOL_STDIO_LIMIT || "") || undefined;

export const Tools = {
  async open_file(args: { path: string }) {
    return openFile(args.path);
  },
  async write_file(args: { path: string; content: string }) {
    const abs = await writeFileSafe(args.path, args.content, { mkdir: true });
    return { path: abs, bytes: Buffer.byteLength(args.content, "utf8") };
  },
  async apply_patch(args: { patch: string }) {
    return applyPatch(args.patch);
  },
  async run(args: { cmd: string; cwd?: string }) {
    return runCommand(args.cmd, {
      cwd: args.cwd ?? process.cwd(),
      timeoutMs: CMD_TIMEOUT,
      stdioCapBytes: STDIO_CAP,
    });
  },
  async git(args: { subtool: string; [k: string]: any }) {
    if (args.subtool === "commit") return gitCommit(args.message);
    if (args.subtool === "create_branch") return gitCreateBranch(args.name);
    throw new Error(`Unknown git subtool: ${args.subtool}`);
  },
  async npm(args: { subtool: string; [k: string]: any }) {
    if (args.subtool === "install") return npmInstall(args.packages, args.options);
    if (args.subtool === "run") return npmRunScript(args.script, args.options);
    if (args.subtool === "list") return npmList(args.options);
    if (args.subtool === "outdated") return npmOutdated();
    throw new Error(`Unknown npm subtool: ${args.subtool}`);
  },
  async docker(args: { subtool: string; [k: string]: any }) {
    if (args.subtool === "build") return dockerBuild(args.options);
    if (args.subtool === "run") return dockerRun(args.options);
    if (args.subtool === "ps") return dockerPs(args.options);
    if (args.subtool === "stop") return dockerStop(args.container);
    if (args.subtool === "remove") return dockerRemove(args.container, args.force);
    throw new Error(`Unknown docker subtool: ${args.subtool}`);
  },
  async search(args: { subtool: string; [k: string]: any }) {
    if (args.subtool === "files") return searchInFiles(args.options);
    if (args.subtool === "find") return findFiles(args.pattern, args.directory);
    throw new Error(`Unknown search subtool: ${args.subtool}`);
  },
};

export async function executeTool(call: ToolCall) {
  // Check if it's a built-in tool
  const fn = (Tools as any)[call.tool];
  if (fn) {
    return fn(call.args || {});
  }
  
  // Check if it's a plugin tool
  const pluginTools = getAvailablePluginTools();
  if (pluginTools.includes(call.tool)) {
    return executePluginTool(call.tool, call.args || {});
  }
  
  throw new Error(`Unknown tool: ${call.tool}`);
}

// ── FILE: src\core\tools\run.ts
import { spawn } from "node:child_process";

export interface RunResult {
  code: number | null;
  stdout: string;
  stderr: string;
}

export interface RunOptions {
  cwd?: string;
  env?: NodeJS.ProcessEnv;
  stream?: (data: { stdout?: string; stderr?: string }) => void;
  shell?: string | boolean;
  timeoutMs?: number;
  stdioCapBytes?: number; // soft cap for aggregated stdout/stderr
  args?: string[]; // command arguments (when cmd is just the executable)
}

const DEFAULT_TIMEOUT =
  Number.parseInt(process.env.FORGE_CMD_TIMEOUT_MS || "") || undefined;
const DEFAULT_STDIO_CAP =
  Number.parseInt(process.env.FORGE_TOOL_STDIO_LIMIT || "") || undefined;

function capMerge(current: string, chunk: Buffer, cap?: number): string {
  // For simplicity, cap by characters (approx bytes for ASCII; acceptable for logs)
  const s = chunk.toString("utf8");
  if (!cap) return current + s;
  const merged = current + s;
  // Keep the last ~cap chars
  return merged.length > cap ? merged.slice(merged.length - cap) : merged;
}

// Overload 1: object options (preferred)
export function runCommand(cmd: string, opts?: RunOptions): Promise<RunResult>;
// Overload 2: numeric timeout (legacy/callsite-agnostic)
export function runCommand(cmd: string, timeoutMs?: number): Promise<RunResult>;

// Implementation: accepts either RunOptions or number and normalizes to options.
// (Implementation must be general enough to satisfy both overloads.) :contentReference[oaicite:1]{index=1}
export function runCommand(
  cmd: string,
  optsOrTimeout?: RunOptions | number
): Promise<RunResult> {
  const opts: RunOptions =
    typeof optsOrTimeout === "number"
      ? { timeoutMs: optsOrTimeout }
      : optsOrTimeout ?? {};

  const timeoutMs = opts.timeoutMs ?? DEFAULT_TIMEOUT;
  const stdioCap = opts.stdioCapBytes ?? DEFAULT_STDIO_CAP;

  return new Promise((resolve, reject) => {
    const args = opts.args || [];
    // Use shell only when no args are provided (string command). When args are provided,
    // prefer direct exec (shell=false) to preserve exact argument boundaries across platforms.
    const useShell = opts.shell ?? (args.length === 0);
    const child = spawn(cmd, args, {
      cwd: opts.cwd,
      env: { ...process.env, ...(opts.env || {}) },
      shell: useShell,
      windowsHide: true,
    });

    let stdout = "";
    let stderr = "";

    const onStdout = (chunk: Buffer) => {
      stdout = capMerge(stdout, chunk, stdioCap);
      opts.stream?.({ stdout: chunk.toString("utf8") });
    };
    const onStderr = (chunk: Buffer) => {
      stderr = capMerge(stderr, chunk, stdioCap);
      opts.stream?.({ stderr: chunk.toString("utf8") });
    };

    child.stdout?.on("data", onStdout);
    child.stderr?.on("data", onStderr);

    let timer: NodeJS.Timeout | undefined;
    if (timeoutMs && timeoutMs > 0) {
      timer = setTimeout(() => {
        // Reject on timeout to match existing behavior at call sites.
        try { child.kill("SIGKILL"); } catch { /* ignore */ }
        reject(new Error(`Command timed out after ${timeoutMs}ms`));
      }, timeoutMs);
    }

    child.on("error", (err) => {
      if (timer) clearTimeout(timer);
      reject(err);
    });
    child.on("close", (code) => {
      if (timer) clearTimeout(timer);
      resolve({ code, stdout, stderr });
    });
  });
}

// ── FILE: src\core\tools\search.ts
import * as fs from "node:fs/promises";
import * as path from "node:path";
import { ToolError, handleError } from "../errors.js";
import { Validator } from "../validation.js";

export interface SearchOptions {
  pattern: string;
  directory?: string;
  filePattern?: string;
  caseSensitive?: boolean;
  wholeWord?: boolean;
  maxResults?: number;
}

export interface SearchResult {
  file: string;
  line: number;
  column: number;
  content: string;
  match: string;
}

export async function searchInFiles(options: SearchOptions): Promise<SearchResult[]> {
  try {
    const validator = new Validator();
    validator.validateString(options.pattern, "pattern", { required: true, minLength: 1 });
    validator.validateString(options.directory, "directory", { maxLength: 4096 });
    validator.validateString(options.filePattern, "filePattern", { maxLength: 100 });
    validator.validateNumber(options.maxResults, "maxResults", { min: 1, max: 10000 });
    validator.throwIfInvalid();

    const {
      pattern,
      directory = process.cwd(),
      filePattern = "**/*",
      caseSensitive = false,
      wholeWord = false,
      maxResults = 1000
    } = options;

    const results: SearchResult[] = [];
    const searchDir = path.resolve(directory);
    
    // Build regex pattern
    let regexPattern = pattern;
    if (wholeWord) {
      regexPattern = `\\b${regexPattern}\\b`;
    }
    
    const flags = caseSensitive ? "g" : "gi";
    const regex = new RegExp(regexPattern, flags);

    // Simple file pattern matching
    const filePatternRegex = new RegExp(
      filePattern.replace(/\*\*/g, ".*").replace(/\*/g, "[^/]*"),
      "i"
    );

    await searchDirectory(searchDir, regex, filePatternRegex, results, maxResults);

    return results.slice(0, maxResults);
  } catch (error) {
    const forgeError = handleError(error);
    throw new ToolError("search", forgeError.message, {
      operation: "search_in_files",
      options,
      originalError: forgeError
    });
  }
}

async function searchDirectory(
  dir: string,
  regex: RegExp,
  filePattern: RegExp,
  results: SearchResult[],
  maxResults: number
): Promise<void> {
  if (results.length >= maxResults) return;

  try {
    const entries = await fs.readdir(dir, { withFileTypes: true });
    
    for (const entry of entries) {
      if (results.length >= maxResults) break;
      
      const fullPath = path.join(dir, entry.name);
      
      if (entry.isDirectory()) {
        // Skip common directories that shouldn't be searched
        if (shouldSkipDirectory(entry.name)) continue;
        
        await searchDirectory(fullPath, regex, filePattern, results, maxResults);
      } else if (entry.isFile()) {
        // Check if file matches pattern
        if (!filePattern.test(entry.name)) continue;
        
        // Skip binary files and common non-text files
        if (shouldSkipFile(entry.name)) continue;
        
        await searchFile(fullPath, regex, results, maxResults);
      }
    }
  } catch (error) {
    // Skip directories we can't read
    if (error instanceof Error && error.message.includes("EACCES")) {
      return;
    }
    throw error;
  }
}

async function searchFile(
  filePath: string,
  regex: RegExp,
  results: SearchResult[],
  maxResults: number
): Promise<void> {
  try {
    const content = await fs.readFile(filePath, "utf8");
    const lines = content.split("\n");
    
    for (let lineIndex = 0; lineIndex < lines.length; lineIndex++) {
      if (results.length >= maxResults) break;
      
      const line = lines[lineIndex];
      let match;
      
      // Reset regex lastIndex for global regex
      regex.lastIndex = 0;
      
      while ((match = regex.exec(line)) !== null) {
        if (results.length >= maxResults) break;
        
        results.push({
          file: filePath,
          line: lineIndex + 1,
          column: match.index + 1,
          content: line,
          match: match[0]
        });
        
        // Prevent infinite loop with zero-length matches
        if (match.index === regex.lastIndex) {
          regex.lastIndex++;
        }
      }
    }
  } catch (error) {
    // Skip files we can't read or that aren't text
    if (error instanceof Error && 
        (error.message.includes("EACCES") || 
         error.message.includes("ENOENT") ||
         error.message.includes("Invalid character"))) {
      return;
    }
    throw error;
  }
}

function shouldSkipDirectory(name: string): boolean {
  const skipDirs = [
    "node_modules",
    ".git",
    ".svn",
    ".hg",
    "dist",
    "build",
    "out",
    "target",
    ".next",
    ".nuxt",
    ".cache",
    "coverage",
    ".nyc_output",
    ".forge"
  ];
  return skipDirs.includes(name) || name.startsWith(".");
}

function shouldSkipFile(name: string): boolean {
  const skipExtensions = [
    ".exe", ".dll", ".so", ".dylib", ".bin", ".dat", ".db", ".sqlite",
    ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".ico", ".svg", ".webp",
    ".mp3", ".mp4", ".avi", ".mov", ".wav", ".flac",
    ".zip", ".tar", ".gz", ".rar", ".7z",
    ".pdf", ".doc", ".docx", ".xls", ".xlsx", ".ppt", ".pptx"
  ];
  
  const ext = path.extname(name).toLowerCase();
  return skipExtensions.includes(ext) || name.startsWith(".");
}

export async function findFiles(pattern: string, directory = process.cwd()): Promise<string[]> {
  try {
    const validator = new Validator();
    validator.validateString(pattern, "pattern", { required: true });
    validator.validateString(directory, "directory", { maxLength: 4096 });
    validator.throwIfInvalid();

    const files: string[] = [];
    const searchDir = path.resolve(directory);
    
    const filePatternRegex = new RegExp(
      pattern.replace(/\*\*/g, ".*").replace(/\*/g, "[^/]*"),
      "i"
    );

    await findFilesRecursive(searchDir, filePatternRegex, files);
    
    return files;
  } catch (error) {
    const forgeError = handleError(error);
    throw new ToolError("search", forgeError.message, {
      operation: "find_files",
      pattern,
      directory,
      originalError: forgeError
    });
  }
}

async function findFilesRecursive(
  dir: string,
  pattern: RegExp,
  files: string[]
): Promise<void> {
  try {
    const entries = await fs.readdir(dir, { withFileTypes: true });
    
    for (const entry of entries) {
      const fullPath = path.join(dir, entry.name);
      
      if (entry.isDirectory()) {
        if (shouldSkipDirectory(entry.name)) continue;
        await findFilesRecursive(fullPath, pattern, files);
      } else if (entry.isFile()) {
        if (pattern.test(entry.name)) {
          files.push(fullPath);
        }
      }
    }
  } catch (error) {
    // Skip directories we can't read
    if (error instanceof Error && error.message.includes("EACCES")) {
      return;
    }
    throw error;
  }
}

// ── FILE: src\core\tools\write_file.ts
import * as fs from "node:fs/promises";
import * as path from "node:path";
import { validateFilePath } from "../validation.js";
import { ToolError, handleError } from "../errors.js";

export interface WriteFileOptions {
  mkdir?: boolean; // create parent dirs if needed
}

export async function writeFileSafe(relPath: string, content: string, opts: WriteFileOptions = {}) {
  try {
    validateFilePath(relPath);
    
    // Validate content size
    const maxSize = 10 * 1024 * 1024; // 10MB
    if (Buffer.byteLength(content, "utf8") > maxSize) {
      throw new Error(`File content too large: ${Buffer.byteLength(content, "utf8")} bytes. Maximum ${maxSize} bytes allowed.`);
    }
    
    const abs = path.resolve(process.cwd(), relPath);
    if (opts.mkdir) {
      await fs.mkdir(path.dirname(abs), { recursive: true });
    }
    await fs.writeFile(abs, content, "utf8");
    return abs;
  } catch (error) {
    const forgeError = handleError(error);
    throw new ToolError("write_file", forgeError.message, {
      filePath: relPath,
      contentSize: Buffer.byteLength(content, "utf8"),
      originalError: forgeError
    });
  }
}

// ── FILE: src\core\usage.ts
export type UsageMeta = {
  inputTokens?: number;
  outputTokens?: number;
  totalTokens?: number;
  costUSD?: number;
  /** Optional: provider/model id for display in the tokens panel */
  model?: string;
};

const PRICE_PER_M_INPUT = 0.20; // xAI grok-code-fast-1 input $/M
const PRICE_PER_M_OUTPUT = 1.50; // output $/M

export class UsageCounter {
  input = 0;
  output = 0;
  cost = 0;

  add(u?: UsageMeta) {
    if (!u) return;
    this.input += u.inputTokens ?? 0;
    this.output += u.outputTokens ?? 0;
    if (u.costUSD != null) {
      this.cost += u.costUSD;
    } else {
      const cost =
        (this.input / 1_000_000) * PRICE_PER_M_INPUT +
        (this.output / 1_000_000) * PRICE_PER_M_OUTPUT;
      this.cost = cost;
    }
  }

  summarize() {
    const total = this.input + this.output;
    return {
      inputTokens: this.input,
      outputTokens: this.output,
      totalTokens: total,
      estCostUSD: Number(this.cost.toFixed(6)),
    };
  }
}

// ── FILE: src\core\validation.ts
import * as path from "node:path";

export class ValidationError extends Error {
  constructor(message: string, public field?: string) {
    super(message);
    this.name = "ValidationError";
  }
}

export interface ValidationResult {
  valid: boolean;
  errors: string[];
}

export class Validator {
  private errors: string[] = [];

  addError(message: string, field?: string): this {
    this.errors.push(field ? `${field}: ${message}` : message);
    return this;
  }

  validateString(value: unknown, field: string, options: {
    required?: boolean;
    minLength?: number;
    maxLength?: number;
    pattern?: RegExp;
    patternMessage?: string;
  } = {}): this {
    const { required = false, minLength, maxLength, pattern, patternMessage } = options;

    if (required && (!value || typeof value !== "string" || value.trim().length === 0)) {
      this.addError("is required", field);
      return this;
    }

    if (value !== undefined && value !== null) {
      if (typeof value !== "string") {
        this.addError("must be a string", field);
        return this;
      }

      if (minLength !== undefined && value.length < minLength) {
        this.addError(`must be at least ${minLength} characters long`, field);
      }

      if (maxLength !== undefined && value.length > maxLength) {
        this.addError(`must be at most ${maxLength} characters long`, field);
      }

      if (pattern && !pattern.test(value)) {
        this.addError(patternMessage || `must match pattern ${pattern}`, field);
      }
    }

    return this;
  }

  validateNumber(value: unknown, field: string, options: {
    required?: boolean;
    min?: number;
    max?: number;
    integer?: boolean;
  } = {}): this {
    const { required = false, min, max, integer = false } = options;

    if (required && (value === undefined || value === null)) {
      this.addError("is required", field);
      return this;
    }

    if (value !== undefined && value !== null) {
      const num = Number(value);
      if (isNaN(num)) {
        this.addError("must be a valid number", field);
        return this;
      }

      if (integer && !Number.isInteger(num)) {
        this.addError("must be an integer", field);
      }

      if (min !== undefined && num < min) {
        this.addError(`must be at least ${min}`, field);
      }

      if (max !== undefined && num > max) {
        this.addError(`must be at most ${max}`, field);
      }
    }

    return this;
  }

  validatePath(value: unknown, field: string, options: {
    required?: boolean;
    mustExist?: boolean;
    mustBeFile?: boolean;
    mustBeDirectory?: boolean;
    maxLength?: number;
  } = {}): this {
    const { required = false, mustExist = false, mustBeFile = false, mustBeDirectory = false, maxLength = 4096 } = options;

    this.validateString(value, field, { required, maxLength });

    if (this.errors.length === 0 && value) {
      const pathStr = value as string;
      
      // Check for path traversal attempts
      if (pathStr.includes("..") || pathStr.includes("~")) {
        this.addError("contains invalid path characters", field);
        return this;
      }

      // Check if path is absolute when it shouldn't be
      if (path.isAbsolute(pathStr) && !mustExist) {
        this.addError("must be a relative path", field);
        return this;
      }
    }

    return this;
  }

  validateArray(value: unknown, field: string, options: {
    required?: boolean;
    minLength?: number;
    maxLength?: number;
    itemValidator?: (item: unknown, index: number) => void;
  } = {}): this {
    const { required = false, minLength, maxLength, itemValidator } = options;

    if (required && (!Array.isArray(value) || value.length === 0)) {
      this.addError("is required and must not be empty", field);
      return this;
    }

    if (value !== undefined && value !== null) {
      if (!Array.isArray(value)) {
        this.addError("must be an array", field);
        return this;
      }

      if (minLength !== undefined && value.length < minLength) {
        this.addError(`must have at least ${minLength} items`, field);
      }

      if (maxLength !== undefined && value.length > maxLength) {
        this.addError(`must have at most ${maxLength} items`, field);
      }

      if (itemValidator) {
        value.forEach((item, index) => {
          try {
            itemValidator(item, index);
          } catch (error) {
            this.addError(`item ${index}: ${error instanceof Error ? error.message : String(error)}`, field);
          }
        });
      }
    }

    return this;
  }

  getResult(): ValidationResult {
    return {
      valid: this.errors.length === 0,
      errors: [...this.errors]
    };
  }

  throwIfInvalid(): void {
    const result = this.getResult();
    if (!result.valid) {
      throw new ValidationError(result.errors.join("; "));
    }
  }
}

// Common validation patterns
export const Patterns = {
  branchName: /^[a-zA-Z0-9._/-]+$/,
  fileName: /^[a-zA-Z0-9._-]+$/,
  // Allow printable ASCII plus CR/LF for multiline messages. Disallow other control chars (incl. TAB)
  commitMessage: /^[\x20-\x7E\r\n]+$/,
  apiKey: /^[a-zA-Z0-9_-]+$/,
  url: /^https?:\/\/.+/,
} as const;

// Convenience functions
export function validateBranchName(name: string): void {
  const validator = new Validator();
  validator.validateString(name, "branchName", {
    required: true,
    minLength: 1,
    maxLength: 250,
    pattern: Patterns.branchName,
    patternMessage: "must contain only alphanumeric characters, dots, underscores, slashes, and hyphens"
  });
  validator.throwIfInvalid();
}

export function validateFilePath(filePath: string): void {
  const validator = new Validator();
  validator.validatePath(filePath, "filePath", {
    required: true,
    maxLength: 4096
  });
  validator.throwIfInvalid();
}

export function validateCommitMessage(message: string): void {
  const validator = new Validator();
  validator.validateString(message, "commitMessage", {
    required: true,
    minLength: 1,
    maxLength: 1000,
    pattern: Patterns.commitMessage,
    patternMessage: "must not contain control characters"
  });
  validator.throwIfInvalid();
}

export function validateApiKey(key: string): void {
  const validator = new Validator();
  validator.validateString(key, "apiKey", {
    required: true,
    minLength: 10,
    maxLength: 200,
    pattern: Patterns.apiKey,
    patternMessage: "must contain only alphanumeric characters, underscores, and hyphens"
  });
  validator.throwIfInvalid();
}

// ── FILE: src\core\verify.ts
import * as fs from "node:fs";
import * as path from "node:path";
import { runCommand } from "./tools/run.js";

export type VerifyMode = "none" | "lint" | "test" | "both";

function readPkg(cwd: string) {
  const p = path.join(cwd, "package.json");
  if (fs.existsSync(p)) {
    try { return JSON.parse(fs.readFileSync(p, "utf8")); } catch {}
  }
  return undefined;
}

function scriptExists(pkg: any | undefined, name: string): boolean {
  return Boolean(pkg?.scripts && typeof pkg.scripts[name] === "string");
}

function hasDevDep(pkg: any | undefined, name: string): boolean {
  return Boolean(pkg?.devDependencies?.[name] || pkg?.dependencies?.[name]);
}

function hasLocalBinary(cwd: string, bin: string): boolean {
  const p = path.join(
    cwd,
    "node_modules",
    ".bin",
    process.platform === "win32" ? `${bin}.cmd` : bin
  );
  return fs.existsSync(p);
}

function hasESLintConfig(cwd: string): boolean {
  const candidates = ["eslint.config.js", "eslint.config.mjs", "eslint.config.cjs"]
    .map(f => path.join(cwd, f));
  return candidates.some(fs.existsSync);
}

function pickCommands(
  cwd: string,
  mode: VerifyMode
): { cmd: string; why: string }[] {
  if (mode === "none") return [];
  const pkg = readPkg(cwd);

  const wantLint = mode === "lint" || mode === "both";
  const wantTest = mode === "test" || mode === "both";

  const cmds: { cmd: string; why: string }[] = [];

  // LINT: only run if configured
  if (wantLint) {
    if (scriptExists(pkg, "lint")) {
      cmds.push({ cmd: "npm run lint --silent", why: "npm script 'lint' present" });
    } else if (hasESLintConfig(cwd) && (hasDevDep(pkg, "eslint") || hasLocalBinary(cwd, "eslint"))) {
      // ESLint v9 default is flat config file (eslint.config.js*). Run directly if found.
      cmds.push({ cmd: "npx eslint . --max-warnings=0", why: "eslint config detected" });
    }
  }

  // TEST: only run if a test script exists
  if (wantTest && scriptExists(pkg, "test")) {
    cmds.push({ cmd: "npm test --silent", why: "npm script 'test' present" });
  }

  return cmds;
}

export async function runVerification(
  mode: VerifyMode,
  cwd = process.cwd()
): Promise<{ ok: boolean; summary: string }> {
  const cmds = pickCommands(cwd, mode);

  const lines: string[] = [];
  let overallOK = true;

  const wantsLint = mode === "lint" || mode === "both";
  const wantsTest = mode === "test" || mode === "both";
  const hasLintCmd = cmds.some(c => /(?:eslint|lint)\b/.test(c.cmd));
  const hasTestCmd = cmds.some(c => /\btest\b/.test(c.cmd));

  if (wantsLint && !hasLintCmd) {
    // Clear “what to do” message if not configured (ESLint v9 uses flat config)
    lines.push(
      "lint: skipped (ESLint not configured — no eslint.config.* and no `lint` script).",
      "See: ESLint v9 migration to flat config (eslint.config.js)."
    );
  }
  if (wantsTest && !hasTestCmd) {
    lines.push("test: skipped (no `test` script in package.json).");
  }
  if (!cmds.length) {
    return { ok: true, summary: lines.concat(["verification disabled or nothing to run."]).join("\n") };
  }

  for (const { cmd, why } of cmds) {
    lines.push(`$ ${cmd}    # ${why}`);
    try {
      const res = await runCommand(cmd, { cwd, timeoutMs: 10 * 60_000, stdioCapBytes: 500_000 });
      const out = (res.stdout || res.stderr || "").trim();
      lines.push(out ? out : "(no output)");
      overallOK = overallOK && res.code === 0;
    } catch (err: any) {
      lines.push(String(err?.message ?? err ?? "command failed"));
      overallOK = false;
    }
    lines.push("");
  }

  return { ok: overallOK, summary: lines.join("\n") };
}

// ── FILE: src\core\__tests__\errors.test.ts
import { describe, it, expect } from "vitest";
import { 
  ForgeError, 
  ToolError, 
  ValidationError, 
  NetworkError, 
  ConfigurationError, 
  ExecutionError,
  handleError,
  isRetryableError,
  getErrorDisplayMessage
} from "../errors.js";

describe("Error Classes", () => {
  it("should create ForgeError with proper properties", () => {
    const error = new ForgeError("Test message", "TEST_ERROR", { key: "value" });
    expect(error.message).toBe("Test message");
    expect(error.code).toBe("TEST_ERROR");
    expect(error.context).toEqual({ key: "value" });
    expect(error.name).toBe("ForgeError");
  });

  it("should create ToolError with tool context", () => {
    const error = new ToolError("git", "Operation failed", { operation: "commit" });
    expect(error.message).toBe("Operation failed");
    expect(error.code).toBe("TOOL_GIT_ERROR");
    expect(error.context?.tool).toBe("git");
    expect(error.context?.operation).toBe("commit");
  });

  it("should create ValidationError with field context", () => {
    const error = new ValidationError("Invalid input", "fieldName", { value: "test" });
    expect(error.message).toBe("Invalid input");
    expect(error.code).toBe("VALIDATION_ERROR");
    expect(error.context?.field).toBe("fieldName");
  });

  it("should create NetworkError with status code", () => {
    const error = new NetworkError("Connection failed", 500, { url: "https://api.example.com" });
    expect(error.message).toBe("Connection failed");
    expect(error.code).toBe("NETWORK_ERROR");
    expect(error.context?.statusCode).toBe(500);
  });

  it("should create ConfigurationError with config key", () => {
    const error = new ConfigurationError("Invalid config", "apiKey", { file: "config.json" });
    expect(error.message).toBe("Invalid config");
    expect(error.code).toBe("CONFIGURATION_ERROR");
    expect(error.context?.configKey).toBe("apiKey");
  });

  it("should create ExecutionError with command and exit code", () => {
    const error = new ExecutionError("Command failed", "git commit", 1, { cwd: "/tmp" });
    expect(error.message).toBe("Command failed");
    expect(error.code).toBe("EXECUTION_ERROR");
    expect(error.context?.command).toBe("git commit");
    expect(error.context?.exitCode).toBe(1);
  });
});

describe("handleError", () => {
  it("should wrap Error objects", () => {
    const originalError = new Error("Original error");
    const wrapped = handleError(originalError);
    expect(wrapped).toBeInstanceOf(ForgeError);
    expect(wrapped.message).toBe("Original error");
    expect(wrapped.context?.originalError).toBe("Original error");
  });

  it("should detect file not found errors", () => {
    const error = new Error("ENOENT: no such file or directory");
    const wrapped = handleError(error);
    expect(wrapped.code).toBe("FILE_NOT_FOUND");
  });

  it("should detect permission denied errors", () => {
    const error = new Error("EACCES: permission denied");
    const wrapped = handleError(error);
    expect(wrapped.code).toBe("PERMISSION_DENIED");
  });

  it("should detect connection refused errors", () => {
    const error = new Error("ECONNREFUSED: connection refused");
    const wrapped = handleError(error);
    expect(wrapped).toBeInstanceOf(NetworkError);
  });

  it("should detect timeout errors", () => {
    const error = new Error("Operation timed out");
    const wrapped = handleError(error);
    expect(wrapped).toBeInstanceOf(ExecutionError);
  });

  it("should handle non-Error objects", () => {
    const wrapped = handleError("String error");
    expect(wrapped).toBeInstanceOf(ForgeError);
    expect(wrapped.message).toBe("Unknown error: String error");
  });

  it("should preserve ForgeError instances", () => {
    const original = new ForgeError("Test", "TEST");
    const wrapped = handleError(original);
    expect(wrapped).toBe(original);
  });
});

describe("isRetryableError", () => {
  it("should identify retryable network errors", () => {
    const error = new NetworkError("Server error", 500);
    expect(isRetryableError(error)).toBe(true);
  });

  it("should identify retryable rate limit errors", () => {
    const error = new NetworkError("Rate limited", 429);
    expect(isRetryableError(error)).toBe(true);
  });

  it("should identify retryable timeout errors", () => {
    const error = new ExecutionError("Operation timed out", "git push");
    expect(isRetryableError(error)).toBe(true);
  });

  it("should not identify non-retryable errors", () => {
    const error = new ValidationError("Invalid input");
    expect(isRetryableError(error)).toBe(false);
  });

  it("should not identify client errors as retryable", () => {
    const error = new NetworkError("Not found", 404);
    expect(isRetryableError(error)).toBe(false);
  });
});

describe("getErrorDisplayMessage", () => {
  it("should format validation errors", () => {
    const error = new ValidationError("Invalid input", "fieldName");
    const message = getErrorDisplayMessage(error);
    expect(message).toBe("Validation failed: Invalid input");
  });

  it("should format tool errors", () => {
    const error = new ToolError("git", "Operation failed");
    const message = getErrorDisplayMessage(error);
    expect(message).toBe("Git operation failed: Operation failed");
  });

  it("should format network errors with status code", () => {
    const error = new NetworkError("Server error", 500);
    const message = getErrorDisplayMessage(error);
    expect(message).toBe("Network error (500): Server error");
  });

  it("should format execution errors with command", () => {
    const error = new ExecutionError("Command failed", "git commit", 1);
    const message = getErrorDisplayMessage(error);
    expect(message).toBe("Execution failed (git commit) [exit code: 1]: Command failed");
  });

  it("should return message for unknown errors", () => {
    const error = new ForgeError("Unknown error", "UNKNOWN");
    const message = getErrorDisplayMessage(error);
    expect(message).toBe("Unknown error");
  });
});

// ── FILE: src\core\__tests__\validation.test.ts
import { describe, it, expect } from "vitest";
import { Validator, validateBranchName, validateFilePath, validateCommitMessage, validateApiKey, Patterns } from "../validation.js";

describe("Validator", () => {
  it("should validate strings correctly", () => {
    const validator = new Validator();
    validator.validateString("test", "field", { required: true, minLength: 2, maxLength: 10 });
    expect(validator.getResult().valid).toBe(true);
  });

  it("should catch validation errors", () => {
    const validator = new Validator();
    validator.validateString("", "field", { required: true });
    const result = validator.getResult();
    expect(result.valid).toBe(false);
    expect(result.errors).toContain("field: is required");
  });

  it("should validate numbers correctly", () => {
    const validator = new Validator();
    validator.validateNumber(5, "field", { min: 1, max: 10, integer: true });
    expect(validator.getResult().valid).toBe(true);
  });

  it("should validate paths correctly", () => {
    const validator = new Validator();
    validator.validatePath("test/file.txt", "field", { required: true });
    expect(validator.getResult().valid).toBe(true);
  });

  it("should reject path traversal attempts", () => {
    const validator = new Validator();
    validator.validatePath("../secret.txt", "field", { required: true });
    const result = validator.getResult();
    expect(result.valid).toBe(false);
    expect(result.errors.some(e => e.includes("invalid path characters"))).toBe(true);
  });
});

describe("validateBranchName", () => {
  it("should accept valid branch names", () => {
    expect(() => validateBranchName("feature/new-feature")).not.toThrow();
    expect(() => validateBranchName("bugfix-123")).not.toThrow();
    expect(() => validateBranchName("release/v1.0.0")).not.toThrow();
  });

  it("should reject invalid branch names", () => {
    expect(() => validateBranchName("")).toThrow();
    expect(() => validateBranchName("feature with spaces")).toThrow();
    expect(() => validateBranchName("feature@special")).toThrow();
    expect(() => validateBranchName("a".repeat(251))).toThrow();
  });
});

describe("validateFilePath", () => {
  it("should accept valid file paths", () => {
    expect(() => validateFilePath("src/file.ts")).not.toThrow();
    expect(() => validateFilePath("test/file.test.js")).not.toThrow();
  });

  it("should reject invalid file paths", () => {
    expect(() => validateFilePath("")).toThrow();
    expect(() => validateFilePath("../secret.txt")).toThrow();
    expect(() => validateFilePath("~/home/file.txt")).toThrow();
  });
});

describe("validateCommitMessage", () => {
  it("should accept valid commit messages", () => {
    expect(() => validateCommitMessage("feat: add new feature")).not.toThrow();
    expect(() => validateCommitMessage("fix: resolve bug")).not.toThrow();
  });

  it("should reject invalid commit messages", () => {
    expect(() => validateCommitMessage("")).toThrow();
    expect(() => validateCommitMessage("a".repeat(1001))).toThrow();
    expect(() => validateCommitMessage("message with\0null")).toThrow();
  });
});

describe("validateApiKey", () => {
  it("should accept valid API keys", () => {
    expect(() => validateApiKey("sk-1234567890abcdef")).not.toThrow();
    expect(() => validateApiKey("api_key_123")).not.toThrow();
  });

  it("should reject invalid API keys", () => {
    expect(() => validateApiKey("")).toThrow();
    expect(() => validateApiKey("short")).toThrow();
    expect(() => validateApiKey("key with spaces")).toThrow();
    expect(() => validateApiKey("key@special")).toThrow();
  });
});

describe("Patterns", () => {
  it("should match valid patterns", () => {
    expect(Patterns.branchName.test("feature/new-feature")).toBe(true);
    expect(Patterns.fileName.test("file.txt")).toBe(true);
    expect(Patterns.commitMessage.test("feat: add feature")).toBe(true);
    expect(Patterns.apiKey.test("sk-1234567890")).toBe(true);
    expect(Patterns.url.test("https://api.example.com")).toBe(true);
  });

  it("should reject invalid patterns", () => {
    expect(Patterns.branchName.test("feature with spaces")).toBe(false);
    expect(Patterns.fileName.test("file with spaces.txt")).toBe(false);
    expect(Patterns.commitMessage.test("message\0with\0null")).toBe(false);
    expect(Patterns.apiKey.test("key with spaces")).toBe(false);
    expect(Patterns.url.test("not-a-url")).toBe(false);
  });
});

// ── FILE: src\providers\grok.ts
/* Provider adapter for Grok via OpenRouter or direct x.ai */
import { loadProfile } from "../config/profile.js";
import type { LLM, ChatMessage, ChatOptions } from "./types.js";
import type { UsageMeta } from "../core/usage.js";

/**
 * Grok (xAI) / OpenRouter compatible provider.
 * Uses OpenAI-style /v1/chat/completions with optional streaming (SSE).
 */
export class GrokProvider implements LLM {
  constructor(private cfg = loadProfile()) {}

  /** Ensure base URL matches provider expectations and includes version segment when needed. */
  private normalizedBaseUrl(): string {
    let base =
      this.cfg.baseUrl ??
      (this.cfg.provider === "openrouter"
        ? "https://openrouter.ai/api/v1"
        : "https://api.x.ai/v1");

    // Trim trailing slashes
    base = base.replace(/\/+$/, "");

    // If calling x.ai directly and /vN is missing, add /v1
    try {
      const u = new URL(base);
      const isXai = /(^|\.)x\.ai$/i.test(u.hostname);
      const hasV = /\/v\d+(\/|$)?/i.test(u.pathname);
      if (isXai && !hasV) {
        base = `${base}/v1`; // xAI uses /v1/chat/completions
      }
    } catch {
      // if not a valid URL, leave as-is
    }
    return base;
  }

  private endpoint(): string {
    const base = this.normalizedBaseUrl();
    return `${base}/chat/completions`;
  }

  private headers(): Record<string, string> {
    const h: Record<string, string> = { "Content-Type": "application/json" };
    if (this.cfg.apiKey) h["Authorization"] = `Bearer ${this.cfg.apiKey}`;
    // Extra headers are OK for OpenRouter; harmless for xAI, but we can keep them generic.
    h["HTTP-Referer"] = "https://github.com/savant-ai/forge";
    h["X-Title"] = "forge-cli";
    return h;
  }

  // === Overloads (must mirror the LLM interface) ===
  public chat(messages: ChatMessage[], options: ChatOptions & { stream: true }): AsyncIterable<{ content: string; reasoning?: string }>;
  public chat(
    messages: ChatMessage[],
    options?: ChatOptions & { stream?: false }
  ): Promise<{ text: string; usage?: UsageMeta; reasoning?: string }>;

  // === Implementation (broad signature; explicit `any` return type to satisfy overload compatibility) ===
  // See TS handbook: overload signatures appear above a single implementation; the implementation must be compatible with all overloads. :contentReference[oaicite:2]{index=2}
  public chat(messages: ChatMessage[], options?: ChatOptions): any {
    const stream = !!options?.stream;

    const body: any = {
      model: this.cfg.model, // normalized in profile loader
      messages,
      stream,
      temperature: options?.temperature ?? 0.3,
      max_tokens: options?.maxTokens ?? 2048,
    };

    if (options?.reasoning) {
      // Best-effort hint; ignored by providers that don't use it.
      body.reasoning = { effort: "medium" };
    }

    // STREAMING: return an async generator (AsyncIterable). MDN notes async generators conform to the async iterable protocol. :contentReference[oaicite:3]{index=3}
    if (stream) {
      const self = this;
      return (async function* () {
        const res = await fetch(self.endpoint(), {
          method: "POST",
          headers: self.headers(),
          body: JSON.stringify(body),
        });

        if (!res.ok) {
          const txt = await res.text().catch(() => "");
          if (res.status === 404) {
            throw new Error(
              `Grok request failed: 404 Not Found\n` +
                `Hint: if you're using xAI directly, the base URL must include /v1 (e.g., https://api.x.ai/v1). Response:\n${txt}`
            );
          }
          throw new Error(`Grok request failed: ${res.status} ${res.statusText}\n${txt}`);
        }

        const reader = res.body?.getReader();
        if (!reader) return;

        const decoder = new TextDecoder();
        let buf = "";

        let reasoningBuffer = "";
        
        while (true) {
          const { value, done } = await reader.read();
          if (done) break;
          buf += decoder.decode(value, { stream: true });

          // SSE lines: "data: {...}"
          const lines = buf.split(/\r?\n/);
          buf = lines.pop() ?? "";
          for (const raw of lines) {
            const line = raw.trim();
            if (!line.startsWith("data:")) continue;
            const payload = line.slice(5).trim();
            if (!payload) continue;
            if (payload === "[DONE]") return;
            try {
              const json = JSON.parse(payload);
              
              // Extract content
              const delta =
                json.choices?.[0]?.delta?.content ??
                json.choices?.[0]?.message?.content ??
                "";
              
              // Extract reasoning if available
              const reasoningDelta = 
                json.choices?.[0]?.delta?.reasoning ??
                json.choices?.[0]?.message?.reasoning ??
                "";
              
              if (reasoningDelta) {
                reasoningBuffer += reasoningDelta;
              }
              
              if (delta) {
                yield { 
                  content: String(delta), 
                  reasoning: reasoningDelta ? reasoningBuffer : undefined 
                };
              }
            } catch {
              // ignore malformed partials
            }
          }
        }

        // Flush a final complete event if it's sitting in the buffer
        const tail = buf.trim();
        if (tail.startsWith("data:")) {
          const payload = tail.slice(5).trim();
          if (payload && payload !== "[DONE]") {
            try {
              const json = JSON.parse(payload);
              const delta =
                json.choices?.[0]?.delta?.content ??
                json.choices?.[0]?.message?.content ??
                "";
              const reasoningDelta = 
                json.choices?.[0]?.delta?.reasoning ??
                json.choices?.[0]?.message?.reasoning ??
                "";
              
              if (delta) {
                yield { 
                  content: String(delta), 
                  reasoning: reasoningDelta ? reasoningBuffer + reasoningDelta : undefined 
                };
              }
            } catch {
              // ignore
            }
          }
        }
      })();
    }

    // NON-STREAMING: return a Promise<{ text, usage }>
    const doFetch = async () => {
      const res = await fetch(this.endpoint(), {
        method: "POST",
        headers: this.headers(),
        body: JSON.stringify(body),
      });

      if (!res.ok) {
        const txt = await res.text().catch(() => "");
        if (res.status === 404) {
          throw new Error(
            `Grok request failed: 404 Not Found\n` +
              `Hint: if you're using xAI directly, the base URL must include /v1 (e.g., https://api.x.ai/v1). Response:\n${txt}`
          );
        }
        throw new Error(`Grok request failed: ${res.status} ${res.statusText}\n${txt}`);
      }

      const json: any = await res.json();
      const text =
        json.choices?.[0]?.message?.content ??
        json.choices?.[0]?.delta?.content ??
        "";
      const reasoning = 
        json.choices?.[0]?.message?.reasoning ??
        json.choices?.[0]?.delta?.reasoning ??
        undefined;
      const usage: UsageMeta | undefined = json.usage
        ? {
            inputTokens: json.usage.prompt_tokens,
            outputTokens: json.usage.completion_tokens,
            costUSD: json.usage.total_cost,
            model: json.model, // optional, display only
          }
        : undefined;
      return { text, usage, reasoning };
    };

    return doFetch();
  }
}

// ── FILE: src\providers\types.ts
import type { UsageMeta } from "../core/usage.js";

export interface ChatMessage {
  role: "system" | "user" | "assistant";
  content: string | object;
}

export interface ChatOptions {
  /** stream tokens as they arrive (SSE / chunked) */
  stream?: boolean;
  /** soft cap for provider */
  maxTokens?: number;
  /** sampling temperature */
  temperature?: number;
  /** hint that we want visible reasoning when available */
  reasoning?: boolean;
}

export interface LLM {
  // Streaming overload
  chat(messages: ChatMessage[], options: ChatOptions & { stream: true }): AsyncIterable<{ content: string; reasoning?: string }>;
  // Non-streaming overload (default)
  chat(
    messages: ChatMessage[],
    options?: ChatOptions & { stream?: false }
  ): Promise<{ text: string; usage?: UsageMeta; reasoning?: string }>;
}

// ── FILE: src\state\history.ts
// src/state/history.ts
import * as fs from "node:fs";
import * as path from "node:path";

const SESSIONS_DIR = path.join(process.cwd(), ".forge", "sessions");

export type Role = "system" | "user" | "assistant" | "tool" | "meta";

export interface Turn {
  ts: string;            // ISO timestamp
  role: Role;
  content: string;       // concatenated text for the turn
  meta?: Record<string, unknown>;
}

/**
 * Minimal JSONL session logger for audits.
 * .forge/sessions/YYYYMMDDTHHMMSS.jsonl
 */
export class SessionLog {
  private filepath: string;

  private constructor(filepath: string) {
    this.filepath = filepath;
  }

  static create(now: Date = new Date()): SessionLog {
    if (!fs.existsSync(SESSIONS_DIR)) fs.mkdirSync(SESSIONS_DIR, { recursive: true });
    const stamp = now.toISOString().replace(/[:.]/g, "").slice(0, 15); // e.g., 20250928T144233
    const file = path.join(SESSIONS_DIR, `${stamp}.jsonl`);
    return new SessionLog(file);
  }

  path(): string {
    return this.filepath;
  }

  append(turn: Turn): void {
    const line = JSON.stringify(turn);
    fs.appendFileSync(this.filepath, line + "\n", "utf8");
  }
}

// ── FILE: src\state\memory.ts
// src/state/memory.ts
import * as fs from "node:fs";
import * as path from "node:path";

const CONFIG_DIR = path.join(process.cwd(), ".forge");
const MEMORY_PATH = path.join(CONFIG_DIR, "MEMORY.md");

/** Ensure .forge exists. Safe to call multiple times. */
export function ensureConfigDir() {
  if (!fs.existsSync(CONFIG_DIR)) fs.mkdirSync(CONFIG_DIR, { recursive: true });
}

/** Loads .forge/MEMORY.md if present. Returns undefined when absent. */
export function loadMemory(): string | undefined {
  try {
    ensureConfigDir();
    if (fs.existsSync(MEMORY_PATH)) {
      return fs.readFileSync(MEMORY_PATH, "utf8");
    }
  } catch {
    // ignore read errors; treat as no memory
  }
  return undefined;
}

/** Returns absolute path to the memory file. */
export function memoryPath(): string {
  return MEMORY_PATH;
}

// ── FILE: src\types\prompts.d.ts
// src/types/prompts.d.ts
declare module "prompts" {
  export interface PromptObject<T extends string = string> {
    type: string | ((prev: any, values: any, prompt: any) => string | Promise<string>);
    name: T;
    message: string | ((prev: any, values: any, prompt: any) => string | Promise<string>);
    initial?: any;
    choices?: Array<{ title: string; value: any }>;
    validate?: (value: any) => boolean | string | Promise<boolean | string>;
    format?: (value: any) => any | Promise<any>;
  }

  export type Prompt = <T extends string = string>(
    questions: PromptObject<T> | Array<PromptObject<T>>,
    options?: { onCancel?: () => void; onSubmit?: (prompt: any, answer: any) => void }
  ) => Promise<Record<T, any>>;

  const prompts: Prompt & { inject(values: any[]): void; override(fn: (prompt: any, answer: any) => any): void; };

  export default prompts;
}

// ── FILE: src\ui\animations.ts
import ora from "ora";
import chalk from "chalk";
import type { SpinnerName } from "cli-spinners";

export class AnimationManager {
  private spinner: any = null;
  private isActive = false;

  startSpinner(text: string, spinnerType: SpinnerName = "dots") {
    if (this.isActive) {
      this.stopSpinner();
    }
    
    this.spinner = ora({
      text: chalk.cyan(text),
      spinner: spinnerType,
      color: "cyan",
    }).start();
    
    this.isActive = true;
  }

  updateSpinner(text: string) {
    if (this.spinner && this.isActive) {
      this.spinner.text = chalk.cyan(text);
    }
  }

  stopSpinner() {
    if (this.spinner && this.isActive) {
      this.spinner.stop();
      this.isActive = false;
    }
  }

  succeed(text: string) {
    if (this.spinner && this.isActive) {
      this.spinner.succeed(chalk.green(text));
      this.isActive = false;
    }
  }

  fail(text: string) {
    if (this.spinner && this.isActive) {
      this.spinner.fail(chalk.red(text));
      this.isActive = false;
    }
  }

  warn(text: string) {
    if (this.spinner && this.isActive) {
      this.spinner.warn(chalk.yellow(text));
      this.isActive = false;
    }
  }

  info(text: string) {
    if (this.spinner && this.isActive) {
      this.spinner.info(chalk.blue(text));
      this.isActive = false;
    }
  }
}

// Global animation manager instance
export const animationManager = new AnimationManager();

// Convenience functions
export function startThinkingAnimation() {
  animationManager.startSpinner("💭 Thinking...", "dots");
}

export function startProcessingAnimation() {
  animationManager.startSpinner("⚡ Processing...", "bouncingBar");
}

export function startLoadingAnimation(text: string) {
  animationManager.startSpinner(text, "dots");
}

export function updateAnimation(text: string) {
  animationManager.updateSpinner(text);
}

export function stopAnimation() {
  animationManager.stopSpinner();
}

export function succeedAnimation(text: string) {
  animationManager.succeed(text);
}

export function failAnimation(text: string) {
  animationManager.fail(text);
}

export function warnAnimation(text: string) {
  animationManager.warn(text);
}

export function infoAnimation(text: string) {
  animationManager.info(text);
}

// ── FILE: src\ui\confirm.ts
import * as readline from "node:readline/promises";
import { stdin as input, stdout as output } from "node:process";

/**
 * Ask a yes/no question in the terminal and resolve to true/false.
 * Uses native readline (promises) to avoid nested interactive libraries.
 */
export async function confirmYN(message: string, defaultYes = false): Promise<boolean> {
  const rl = readline.createInterface({ input, output });
  const suffix = defaultYes ? " [Y/n] " : " [y/N] ";
  try {
    const ans = (await rl.question(`${message}${suffix}`)).trim().toLowerCase();
    if (!ans) return defaultYes;
    return ans === "y" || ans === "yes";
  } finally {
    rl.close();
  }
}

// ── FILE: src\ui\render.ts
import * as readline from "node:readline";
import chalk from "chalk";
import figlet from "figlet";

/**
 * Append-only writer for terminal output.
 * Uses a TTY-only clearLine() so non-TTY streams (e.g., redirected to a file)
 * won’t error.
 */
export class AppendOnlyStream {
  constructor(private out: NodeJS.WriteStream = process.stdout) {}

  write(s: string) {
    this.out.write(s);
  }

  newline() {
    this.out.write("\n");
  }

  clearLine() {
    // Only attempt cursor ops on a TTY stream.
    // process.stdout/process.stderr are tty.WriteStream instances when attached to a terminal.
    if (!this.out.isTTY) return; // no-op if redirected. 
    readline.clearLine(this.out, 0);
    readline.cursorTo(this.out, 0);
  }
}

export function renderPlan(input: { plan?: string[]; rationale?: string }) {
  const { plan = [], rationale } = input;
  const lines: string[] = [];
  if (plan.length) {
    lines.push(chalk.gray.bold("▶ Plan"));
    for (const p of plan) lines.push(chalk.gray(`  • ${p}`));
  }
  if (rationale) {
    lines.push(chalk.gray.bold("\n▶ Why"));
    lines.push(chalk.gray(`  ${rationale}`));
  }
  lines.push(""); // trailing newline
  return lines.join("\n");
}

export function renderTokensPanel(usage: {
  inputTokens?: number;
  outputTokens?: number;
  costUSD?: number;
  model?: string;
}) {
  const it = usage.inputTokens ?? 0;
  const ot = usage.outputTokens ?? 0;
  const cost = usage.costUSD ?? 0;
  const model = usage.model ?? "";
  const total = it + ot;
  return [
    "\n",
    chalk.gray("┌─ tokens ───────────────────────────────────────┐"),
    chalk.gray(`│ model: ${chalk.white(model.padEnd(38))} │`),
    chalk.gray(`│ input: ${chalk.dim(String(it).padStart(7))}  output: ${chalk.dim(String(ot).padStart(7))}  total: ${chalk.dim(String(total).padStart(7))} │`),
    chalk.gray(`│ est. cost: ${chalk.dim("$" + cost.toFixed(6).padStart(12))}                  │`),
    chalk.gray("└───────────────────────────────────────────────┘"),
    "\n",
  ].join("\n");
}

export function renderContextPanel(stats: {
  filesRead?: number;
  bytesRead?: number;
  approxTokens?: number;
}) {
  const files = stats.filesRead ?? 0;
  const bytes = stats.bytesRead ?? 0;
  const toks = stats.approxTokens ?? 0;
  return [
    "\n",
    chalk.gray("┌─ context ───────────────────────────────────────┐"),
    chalk.gray(`│ files: ${String(files).padStart(6)}  bytes: ${String(bytes).padStart(10)}  tokens*: ${String(toks).padStart(8)} │`),
    chalk.gray("│ *approx tokens = chars/4                           │"),
    chalk.gray("└──────────────────────────────────────────────────┘"),
    "\n",
  ].join("\n");
}

export function renderWelcomeBanner() {
  const banner = figlet.textSync("FORGE", {
    font: "ANSI Shadow",
    horizontalLayout: "default",
    verticalLayout: "default",
  });
  const subtitle = chalk.gray("🤖 AI-Powered Engineering Copilot");
  const version = chalk.dim("v0.1.0");
  
  return [
    "\n",
    chalk.gray(banner),
    subtitle,
    version,
    "\n",
    chalk.gray("Type your message below or '/exit' to quit"),
    chalk.gray("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"),
    "\n"
  ].join("\n");
}

export function renderThinkingAnimation() {
  return chalk.gray("💭 Thinking...");
}

export function renderProcessingAnimation() {
  return chalk.gray("⚡ Processing...");
}

export function renderSuccessMessage(message: string) {
  return chalk.gray(`✅ ${message}`);
}

export function renderErrorMessage(message: string) {
  return chalk.gray(`❌ ${message}`);
}

export function renderWarningMessage(message: string) {
  return chalk.gray(`⚠️  ${message}`);
}

export function renderInfoMessage(message: string) {
  return chalk.gray(`ℹ️  ${message}`);
}

export function renderUserPrompt(prompt: string) {
  return [
    chalk.gray.bold("👤 You:"),
    chalk.white(prompt),
    ""
  ].join("\n");
}

export function renderAssistantResponse(response: string) {
  return [
    chalk.gray.bold("🤖 Assistant:"),
    chalk.white(response),
    ""
  ].join("\n");
}

export function renderToolExecution(tool: string, args: any) {
  return [
    chalk.gray.bold("🔧 Tool:"),
    chalk.gray(`${tool}(${JSON.stringify(args, null, 2)})`),
    ""
  ].join("\n");
}

export function renderSeparator() {
  return chalk.gray("━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━");
}

// ── FILE: tsconfig.json
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2022"],
    "module": "NodeNext",
    "moduleResolution": "NodeNext",

    "outDir": "dist",
    "rootDir": "src",

    "verbatimModuleSyntax": true,
    "strict": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "skipLibCheck": true,
    "resolveJsonModule": true,
    "types": ["node"]
  },
  "include": ["src/**/*.ts"],
  "exclude": ["dist", "node_modules"]
}

// ── FILE: vitest.config.js
import { defineConfig } from "vitest/config";
export default defineConfig({
    test: {
        globals: true,
        environment: "node",
        include: ["src/**/*.test.ts"],
        exclude: ["node_modules", "dist"],
        coverage: {
            provider: "v8",
            reporter: ["text", "json", "html"],
            include: ["src/**/*.ts"],
            exclude: [
                "src/**/*.test.ts",
                "src/**/*.d.ts",
                "src/**/__tests__/**",
                "dist/**"
            ],
            thresholds: {
                global: {
                    branches: 80,
                    functions: 80,
                    lines: 80,
                    statements: 80
                }
            }
        }
    },
    resolve: {
        alias: {
            "@": "./src"
        }
    }
});

// ── FILE: vitest.config.ts
import { defineConfig } from "vitest/config";

export default defineConfig({
  test: {
    globals: true,
    environment: "node",
    include: ["src/**/*.test.ts"],
    exclude: ["node_modules", "dist"],
    coverage: {
      provider: "v8",
      reporter: ["text", "json", "html"],
      include: ["src/**/*.ts"],
      exclude: [
        "src/**/*.test.ts",
        "src/**/*.d.ts",
        "src/**/__tests__/**",
        "dist/**"
      ],
      thresholds: {
        global: {
          branches: 80,
          functions: 80,
          lines: 80,
          statements: 80
        }
      }
    }
  },
  resolve: {
    alias: {
      "@": "./src"
    }
  }
});

